/* soapXmlaWebServiceSoapProxy.h
   Generated by gSOAP 2.8.15 from xmlaWSDL.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapXmlaWebServiceSoapProxy_H
#define soapXmlaWebServiceSoapProxy_H
#include "soapH.h"

class SOAP_CMAC XmlaWebServiceSoapProxy : public soap
{ public:
	/// Endpoint URL of service 'XmlaWebServiceSoapProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	XmlaWebServiceSoapProxy();
	/// Construct from another engine state
	XmlaWebServiceSoapProxy(const struct soap&);
	/// Constructor with endpoint URL
	XmlaWebServiceSoapProxy(const char *url);
	/// Constructor with engine input+output mode control
	XmlaWebServiceSoapProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	XmlaWebServiceSoapProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	XmlaWebServiceSoapProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~XmlaWebServiceSoapProxy();
	/// Initializer used by constructors
	virtual	void XmlaWebServiceSoapProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (with soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Put SOAP Header in message
	virtual	void soap_header(ns1__BeginSession *ns1__BeginSession_, ns1__EndSession *ns1__EndSession_, ns1__Session *ns1__Session_, ns6__Security *ns6__Security_);
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service operation 'Execute' (returns error code or SOAP_OK)
	virtual	int Execute(_ns1__Execute *ns1__Execute, _ns1__ExecuteResponse *ns1__ExecuteResponse) { return this->Execute(NULL, NULL, ns1__Execute, ns1__ExecuteResponse); }
	virtual	int Execute(const char *endpoint, const char *soap_action, _ns1__Execute *ns1__Execute, _ns1__ExecuteResponse *ns1__ExecuteResponse);

	/// Web service operation 'Discover' (returns error code or SOAP_OK)
	virtual	int Discover(_ns1__Discover *ns1__Discover, _ns1__DiscoverResponse *ns1__DiscoverResponse) { return this->Discover(NULL, NULL, ns1__Discover, ns1__DiscoverResponse); }
	virtual	int Discover(const char *endpoint, const char *soap_action, _ns1__Discover *ns1__Discover, _ns1__DiscoverResponse *ns1__DiscoverResponse);

	/// Web service operation 'Execute' (returns error code or SOAP_OK)
	virtual	int Execute_(_ns1__Execute *ns1__Execute, _ns1__ExecuteResponse *ns1__ExecuteResponse) { return this->Execute_(NULL, NULL, ns1__Execute, ns1__ExecuteResponse); }
	virtual	int Execute_(const char *endpoint, const char *soap_action, _ns1__Execute *ns1__Execute, _ns1__ExecuteResponse *ns1__ExecuteResponse);

	/// Web service operation 'Discover' (returns error code or SOAP_OK)
	virtual	int Discover_(_ns1__Discover *ns1__Discover, _ns1__DiscoverResponse *ns1__DiscoverResponse) { return this->Discover_(NULL, NULL, ns1__Discover, ns1__DiscoverResponse); }
	virtual	int Discover_(const char *endpoint, const char *soap_action, _ns1__Discover *ns1__Discover, _ns1__DiscoverResponse *ns1__DiscoverResponse);
};
#endif
