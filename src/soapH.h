/* soapH.h
   Generated by gSOAP 2.8.15 from xmlaWSDL.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_serialize_byte(soap, data), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_serialize_int(soap, data), soap_begin_send(soap) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_double
#define SOAP_TYPE_double (229)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap*, double *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap*, const char*, int, const double *, const char*);
SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap*, const char*, double *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap*, const double *, const char*, const char*);

#ifndef soap_write_double
#define soap_write_double(soap, data) ( soap_serialize_double(soap, data), soap_begin_send(soap) || soap_put_double(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap*, double *, const char*, const char*);

#ifndef soap_read_double
#define soap_read_double(soap, data) ( soap_begin_recv(soap) || !soap_get_double(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_bool
#define SOAP_TYPE_bool (353)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap*, bool *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap*, const char*, int, const bool *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap*, bool);
SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap*, const char*, bool *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap*, const char*, bool *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap*, const bool *, const char*, const char*);

#ifndef soap_write_bool
#define soap_write_bool(soap, data) ( soap_serialize_bool(soap, data), soap_begin_send(soap) || soap_put_bool(soap, data, "boolean", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap*, bool *, const char*, const char*);

#ifndef soap_read_bool
#define soap_read_bool(soap, data) ( soap_begin_recv(soap) || !soap_get_bool(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns3__XmlSchemaUse
#define SOAP_TYPE_ns3__XmlSchemaUse (208)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__XmlSchemaUse(struct soap*, enum ns3__XmlSchemaUse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaUse(struct soap*, const char*, int, const enum ns3__XmlSchemaUse *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__XmlSchemaUse2s(struct soap*, enum ns3__XmlSchemaUse);
SOAP_FMAC3 enum ns3__XmlSchemaUse * SOAP_FMAC4 soap_in_ns3__XmlSchemaUse(struct soap*, const char*, enum ns3__XmlSchemaUse *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__XmlSchemaUse(struct soap*, const char*, enum ns3__XmlSchemaUse *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__XmlSchemaUse(struct soap*, const enum ns3__XmlSchemaUse *, const char*, const char*);

#ifndef soap_write_ns3__XmlSchemaUse
#define soap_write_ns3__XmlSchemaUse(soap, data) ( soap_serialize_ns3__XmlSchemaUse(soap, data), soap_begin_send(soap) || soap_put_ns3__XmlSchemaUse(soap, data, "ns3:XmlSchemaUse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns3__XmlSchemaUse * SOAP_FMAC4 soap_get_ns3__XmlSchemaUse(struct soap*, enum ns3__XmlSchemaUse *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaUse
#define soap_read_ns3__XmlSchemaUse(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaUse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns3__XmlSchemaContentProcessing
#define SOAP_TYPE_ns3__XmlSchemaContentProcessing (207)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__XmlSchemaContentProcessing(struct soap*, enum ns3__XmlSchemaContentProcessing *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaContentProcessing(struct soap*, const char*, int, const enum ns3__XmlSchemaContentProcessing *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__XmlSchemaContentProcessing2s(struct soap*, enum ns3__XmlSchemaContentProcessing);
SOAP_FMAC3 enum ns3__XmlSchemaContentProcessing * SOAP_FMAC4 soap_in_ns3__XmlSchemaContentProcessing(struct soap*, const char*, enum ns3__XmlSchemaContentProcessing *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__XmlSchemaContentProcessing(struct soap*, const char*, enum ns3__XmlSchemaContentProcessing *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__XmlSchemaContentProcessing(struct soap*, const enum ns3__XmlSchemaContentProcessing *, const char*, const char*);

#ifndef soap_write_ns3__XmlSchemaContentProcessing
#define soap_write_ns3__XmlSchemaContentProcessing(soap, data) ( soap_serialize_ns3__XmlSchemaContentProcessing(soap, data), soap_begin_send(soap) || soap_put_ns3__XmlSchemaContentProcessing(soap, data, "ns3:XmlSchemaContentProcessing", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns3__XmlSchemaContentProcessing * SOAP_FMAC4 soap_get_ns3__XmlSchemaContentProcessing(struct soap*, enum ns3__XmlSchemaContentProcessing *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaContentProcessing
#define soap_read_ns3__XmlSchemaContentProcessing(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaContentProcessing(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns3__XmlSchemaForm
#define SOAP_TYPE_ns3__XmlSchemaForm (206)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__XmlSchemaForm(struct soap*, enum ns3__XmlSchemaForm *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaForm(struct soap*, const char*, int, const enum ns3__XmlSchemaForm *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__XmlSchemaForm2s(struct soap*, enum ns3__XmlSchemaForm);
SOAP_FMAC3 enum ns3__XmlSchemaForm * SOAP_FMAC4 soap_in_ns3__XmlSchemaForm(struct soap*, const char*, enum ns3__XmlSchemaForm *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__XmlSchemaForm(struct soap*, const char*, enum ns3__XmlSchemaForm *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__XmlSchemaForm(struct soap*, const enum ns3__XmlSchemaForm *, const char*, const char*);

#ifndef soap_write_ns3__XmlSchemaForm
#define soap_write_ns3__XmlSchemaForm(soap, data) ( soap_serialize_ns3__XmlSchemaForm(soap, data), soap_begin_send(soap) || soap_put_ns3__XmlSchemaForm(soap, data, "ns3:XmlSchemaForm", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns3__XmlSchemaForm * SOAP_FMAC4 soap_get_ns3__XmlSchemaForm(struct soap*, enum ns3__XmlSchemaForm *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaForm
#define soap_read_ns3__XmlSchemaForm(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaForm(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_ns3__XmlSchemaDerivationMethod
#define SOAP_TYPE_ns3__XmlSchemaDerivationMethod (205)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns3__XmlSchemaDerivationMethod(struct soap*, enum ns3__XmlSchemaDerivationMethod *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaDerivationMethod(struct soap*, const char*, int, const enum ns3__XmlSchemaDerivationMethod *, const char*);

SOAP_FMAC3S const char* SOAP_FMAC4S soap_ns3__XmlSchemaDerivationMethod2s(struct soap*, enum ns3__XmlSchemaDerivationMethod);
SOAP_FMAC3 enum ns3__XmlSchemaDerivationMethod * SOAP_FMAC4 soap_in_ns3__XmlSchemaDerivationMethod(struct soap*, const char*, enum ns3__XmlSchemaDerivationMethod *, const char*);

SOAP_FMAC3S int SOAP_FMAC4S soap_s2ns3__XmlSchemaDerivationMethod(struct soap*, const char*, enum ns3__XmlSchemaDerivationMethod *);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns3__XmlSchemaDerivationMethod(struct soap*, const enum ns3__XmlSchemaDerivationMethod *, const char*, const char*);

#ifndef soap_write_ns3__XmlSchemaDerivationMethod
#define soap_write_ns3__XmlSchemaDerivationMethod(soap, data) ( soap_serialize_ns3__XmlSchemaDerivationMethod(soap, data), soap_begin_send(soap) || soap_put_ns3__XmlSchemaDerivationMethod(soap, data, "ns3:XmlSchemaDerivationMethod", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 enum ns3__XmlSchemaDerivationMethod * SOAP_FMAC4 soap_get_ns3__XmlSchemaDerivationMethod(struct soap*, enum ns3__XmlSchemaDerivationMethod *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaDerivationMethod
#define soap_read_ns3__XmlSchemaDerivationMethod(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaDerivationMethod(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE___ns3__union_XmlSchemaRedefine
#define SOAP_TYPE___ns3__union_XmlSchemaRedefine (397)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaRedefine(struct soap*, const char*, int, const __ns3__union_XmlSchemaRedefine *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaRedefine * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaRedefine(struct soap*, const char*, __ns3__union_XmlSchemaRedefine *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaRedefine
#define soap_write___ns3__union_XmlSchemaRedefine(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaRedefine", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaRedefine * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaRedefine(struct soap*, __ns3__union_XmlSchemaRedefine *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaRedefine
#define soap_read___ns3__union_XmlSchemaRedefine(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaRedefine(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaRedefine * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaRedefine(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaRedefine * soap_new___ns3__union_XmlSchemaRedefine(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaRedefine(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaRedefine * soap_new_req___ns3__union_XmlSchemaRedefine(struct soap *soap) { __ns3__union_XmlSchemaRedefine *_p = soap_instantiate___ns3__union_XmlSchemaRedefine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaRedefine * soap_new_set___ns3__union_XmlSchemaRedefine(struct soap *soap, std::string *group, std::string *annotation, std::string *complexType, std::string *simpleType, std::string *attributeGroup) { __ns3__union_XmlSchemaRedefine *_p = soap_instantiate___ns3__union_XmlSchemaRedefine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaRedefine::group = group; _p->__ns3__union_XmlSchemaRedefine::annotation = annotation; _p->__ns3__union_XmlSchemaRedefine::complexType = complexType; _p->__ns3__union_XmlSchemaRedefine::simpleType = simpleType; _p->__ns3__union_XmlSchemaRedefine::attributeGroup = attributeGroup; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaRedefine(struct soap *soap, __ns3__union_XmlSchemaRedefine *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaRedefine(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaSimpleTypeRestriction
#define SOAP_TYPE___ns3__union_XmlSchemaSimpleTypeRestriction (395)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, const char*, int, const __ns3__union_XmlSchemaSimpleTypeRestriction *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleTypeRestriction * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, const char*, __ns3__union_XmlSchemaSimpleTypeRestriction *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaSimpleTypeRestriction
#define soap_write___ns3__union_XmlSchemaSimpleTypeRestriction(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaSimpleTypeRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleTypeRestriction * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, __ns3__union_XmlSchemaSimpleTypeRestriction *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaSimpleTypeRestriction
#define soap_read___ns3__union_XmlSchemaSimpleTypeRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaSimpleTypeRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaSimpleTypeRestriction * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaSimpleTypeRestriction * soap_new___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaSimpleTypeRestriction(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaSimpleTypeRestriction * soap_new_req___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap *soap) { __ns3__union_XmlSchemaSimpleTypeRestriction *_p = soap_instantiate___ns3__union_XmlSchemaSimpleTypeRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaSimpleTypeRestriction * soap_new_set___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap *soap, std::string *maxExclusive, std::string *minInclusive, std::string *maxInclusive, std::string *minExclusive, std::string *minLength, std::string *maxLength, std::string *pattern, std::string *enumeration, std::string *length, std::string *whiteSpace, std::string *totalDigits, std::string *fractionDigits) { __ns3__union_XmlSchemaSimpleTypeRestriction *_p = soap_instantiate___ns3__union_XmlSchemaSimpleTypeRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaSimpleTypeRestriction::maxExclusive = maxExclusive; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::minInclusive = minInclusive; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::maxInclusive = maxInclusive; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::minExclusive = minExclusive; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::minLength = minLength; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::maxLength = maxLength; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::pattern = pattern; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::enumeration = enumeration; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::length = length; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::whiteSpace = whiteSpace; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::totalDigits = totalDigits; _p->__ns3__union_XmlSchemaSimpleTypeRestriction::fractionDigits = fractionDigits; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap *soap, __ns3__union_XmlSchemaSimpleTypeRestriction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaSimpleContentRestriction_
#define SOAP_TYPE___ns3__union_XmlSchemaSimpleContentRestriction_ (392)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, const char*, int, const __ns3__union_XmlSchemaSimpleContentRestriction_ *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction_ * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, const char*, __ns3__union_XmlSchemaSimpleContentRestriction_ *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaSimpleContentRestriction_
#define soap_write___ns3__union_XmlSchemaSimpleContentRestriction_(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaSimpleContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction_ * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction_ *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaSimpleContentRestriction_
#define soap_read___ns3__union_XmlSchemaSimpleContentRestriction_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaSimpleContentRestriction_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaSimpleContentRestriction_ * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaSimpleContentRestriction_ * soap_new___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction_(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaSimpleContentRestriction_ * soap_new_req___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap *soap) { __ns3__union_XmlSchemaSimpleContentRestriction_ *_p = soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaSimpleContentRestriction_ * soap_new_set___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap *soap, std::string *attributeGroup, std::string *attribute) { __ns3__union_XmlSchemaSimpleContentRestriction_ *_p = soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaSimpleContentRestriction_::attributeGroup = attributeGroup; _p->__ns3__union_XmlSchemaSimpleContentRestriction_::attribute = attribute; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap *soap, __ns3__union_XmlSchemaSimpleContentRestriction_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaSimpleContentRestriction
#define SOAP_TYPE___ns3__union_XmlSchemaSimpleContentRestriction (378)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, const char*, int, const __ns3__union_XmlSchemaSimpleContentRestriction *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, const char*, __ns3__union_XmlSchemaSimpleContentRestriction *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaSimpleContentRestriction
#define soap_write___ns3__union_XmlSchemaSimpleContentRestriction(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaSimpleContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaSimpleContentRestriction
#define soap_read___ns3__union_XmlSchemaSimpleContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaSimpleContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaSimpleContentRestriction * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaSimpleContentRestriction * soap_new___ns3__union_XmlSchemaSimpleContentRestriction(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaSimpleContentRestriction * soap_new_req___ns3__union_XmlSchemaSimpleContentRestriction(struct soap *soap) { __ns3__union_XmlSchemaSimpleContentRestriction *_p = soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaSimpleContentRestriction * soap_new_set___ns3__union_XmlSchemaSimpleContentRestriction(struct soap *soap, std::string *minExclusive, std::string *enumeration, std::string *maxInclusive, std::string *length, std::string *minLength, std::string *maxLength, std::string *pattern, std::string *maxExclusive, std::string *minInclusive, std::string *whiteSpace, std::string *totalDigits, std::string *fractionDigits) { __ns3__union_XmlSchemaSimpleContentRestriction *_p = soap_instantiate___ns3__union_XmlSchemaSimpleContentRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaSimpleContentRestriction::minExclusive = minExclusive; _p->__ns3__union_XmlSchemaSimpleContentRestriction::enumeration = enumeration; _p->__ns3__union_XmlSchemaSimpleContentRestriction::maxInclusive = maxInclusive; _p->__ns3__union_XmlSchemaSimpleContentRestriction::length = length; _p->__ns3__union_XmlSchemaSimpleContentRestriction::minLength = minLength; _p->__ns3__union_XmlSchemaSimpleContentRestriction::maxLength = maxLength; _p->__ns3__union_XmlSchemaSimpleContentRestriction::pattern = pattern; _p->__ns3__union_XmlSchemaSimpleContentRestriction::maxExclusive = maxExclusive; _p->__ns3__union_XmlSchemaSimpleContentRestriction::minInclusive = minInclusive; _p->__ns3__union_XmlSchemaSimpleContentRestriction::whiteSpace = whiteSpace; _p->__ns3__union_XmlSchemaSimpleContentRestriction::totalDigits = totalDigits; _p->__ns3__union_XmlSchemaSimpleContentRestriction::fractionDigits = fractionDigits; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaSimpleContentRestriction(struct soap *soap, __ns3__union_XmlSchemaSimpleContentRestriction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaSimpleContentExtension
#define SOAP_TYPE___ns3__union_XmlSchemaSimpleContentExtension (376)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaSimpleContentExtension(struct soap*, const char*, int, const __ns3__union_XmlSchemaSimpleContentExtension *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentExtension * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaSimpleContentExtension(struct soap*, const char*, __ns3__union_XmlSchemaSimpleContentExtension *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaSimpleContentExtension
#define soap_write___ns3__union_XmlSchemaSimpleContentExtension(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaSimpleContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentExtension * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaSimpleContentExtension(struct soap*, __ns3__union_XmlSchemaSimpleContentExtension *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaSimpleContentExtension
#define soap_read___ns3__union_XmlSchemaSimpleContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaSimpleContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaSimpleContentExtension * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaSimpleContentExtension(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaSimpleContentExtension * soap_new___ns3__union_XmlSchemaSimpleContentExtension(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaSimpleContentExtension(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaSimpleContentExtension * soap_new_req___ns3__union_XmlSchemaSimpleContentExtension(struct soap *soap) { __ns3__union_XmlSchemaSimpleContentExtension *_p = soap_instantiate___ns3__union_XmlSchemaSimpleContentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaSimpleContentExtension * soap_new_set___ns3__union_XmlSchemaSimpleContentExtension(struct soap *soap, std::string *attribute, std::string *attributeGroup) { __ns3__union_XmlSchemaSimpleContentExtension *_p = soap_instantiate___ns3__union_XmlSchemaSimpleContentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaSimpleContentExtension::attribute = attribute; _p->__ns3__union_XmlSchemaSimpleContentExtension::attributeGroup = attributeGroup; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaSimpleContentExtension(struct soap *soap, __ns3__union_XmlSchemaSimpleContentExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaSimpleContentExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaSequence
#define SOAP_TYPE___ns3__union_XmlSchemaSequence (373)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaSequence(struct soap*, const char*, int, const __ns3__union_XmlSchemaSequence *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaSequence * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaSequence(struct soap*, const char*, __ns3__union_XmlSchemaSequence *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaSequence
#define soap_write___ns3__union_XmlSchemaSequence(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaSequence", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSequence * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaSequence(struct soap*, __ns3__union_XmlSchemaSequence *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaSequence
#define soap_read___ns3__union_XmlSchemaSequence(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaSequence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaSequence * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaSequence(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaSequence * soap_new___ns3__union_XmlSchemaSequence(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaSequence(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaSequence * soap_new_req___ns3__union_XmlSchemaSequence(struct soap *soap) { __ns3__union_XmlSchemaSequence *_p = soap_instantiate___ns3__union_XmlSchemaSequence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaSequence * soap_new_set___ns3__union_XmlSchemaSequence(struct soap *soap, std::string *group, std::string *any, std::string *sequence, std::string *element, std::string *choice) { __ns3__union_XmlSchemaSequence *_p = soap_instantiate___ns3__union_XmlSchemaSequence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaSequence::group = group; _p->__ns3__union_XmlSchemaSequence::any = any; _p->__ns3__union_XmlSchemaSequence::sequence = sequence; _p->__ns3__union_XmlSchemaSequence::element = element; _p->__ns3__union_XmlSchemaSequence::choice = choice; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaSequence(struct soap *soap, __ns3__union_XmlSchemaSequence *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaSequence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaChoice
#define SOAP_TYPE___ns3__union_XmlSchemaChoice (370)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaChoice(struct soap*, const char*, int, const __ns3__union_XmlSchemaChoice *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaChoice * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaChoice(struct soap*, const char*, __ns3__union_XmlSchemaChoice *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaChoice
#define soap_write___ns3__union_XmlSchemaChoice(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaChoice", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaChoice * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaChoice(struct soap*, __ns3__union_XmlSchemaChoice *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaChoice
#define soap_read___ns3__union_XmlSchemaChoice(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaChoice(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaChoice * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaChoice(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaChoice * soap_new___ns3__union_XmlSchemaChoice(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaChoice(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaChoice * soap_new_req___ns3__union_XmlSchemaChoice(struct soap *soap) { __ns3__union_XmlSchemaChoice *_p = soap_instantiate___ns3__union_XmlSchemaChoice(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaChoice * soap_new_set___ns3__union_XmlSchemaChoice(struct soap *soap, std::string *any, std::string *choice, std::string *sequence, std::string *element, std::string *group) { __ns3__union_XmlSchemaChoice *_p = soap_instantiate___ns3__union_XmlSchemaChoice(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaChoice::any = any; _p->__ns3__union_XmlSchemaChoice::choice = choice; _p->__ns3__union_XmlSchemaChoice::sequence = sequence; _p->__ns3__union_XmlSchemaChoice::element = element; _p->__ns3__union_XmlSchemaChoice::group = group; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaChoice(struct soap *soap, __ns3__union_XmlSchemaChoice *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaChoice(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaElement_
#define SOAP_TYPE___ns3__union_XmlSchemaElement_ (362)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaElement_(struct soap*, const char*, int, const __ns3__union_XmlSchemaElement_ *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaElement_ * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaElement_(struct soap*, const char*, __ns3__union_XmlSchemaElement_ *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaElement_
#define soap_write___ns3__union_XmlSchemaElement_(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaElement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaElement_ * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaElement_(struct soap*, __ns3__union_XmlSchemaElement_ *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaElement_
#define soap_read___ns3__union_XmlSchemaElement_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaElement_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaElement_ * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaElement_(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaElement_ * soap_new___ns3__union_XmlSchemaElement_(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaElement_(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaElement_ * soap_new_req___ns3__union_XmlSchemaElement_(struct soap *soap) { __ns3__union_XmlSchemaElement_ *_p = soap_instantiate___ns3__union_XmlSchemaElement_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaElement_ * soap_new_set___ns3__union_XmlSchemaElement_(struct soap *soap, std::string *unique, std::string *key, std::string *keyref) { __ns3__union_XmlSchemaElement_ *_p = soap_instantiate___ns3__union_XmlSchemaElement_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaElement_::unique = unique; _p->__ns3__union_XmlSchemaElement_::key = key; _p->__ns3__union_XmlSchemaElement_::keyref = keyref; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaElement_(struct soap *soap, __ns3__union_XmlSchemaElement_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaElement_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaComplexContentExtension_
#define SOAP_TYPE___ns3__union_XmlSchemaComplexContentExtension_ (360)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaComplexContentExtension_(struct soap*, const char*, int, const __ns3__union_XmlSchemaComplexContentExtension_ *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentExtension_ * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaComplexContentExtension_(struct soap*, const char*, __ns3__union_XmlSchemaComplexContentExtension_ *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaComplexContentExtension_
#define soap_write___ns3__union_XmlSchemaComplexContentExtension_(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaComplexContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentExtension_ * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaComplexContentExtension_(struct soap*, __ns3__union_XmlSchemaComplexContentExtension_ *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaComplexContentExtension_
#define soap_read___ns3__union_XmlSchemaComplexContentExtension_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaComplexContentExtension_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaComplexContentExtension_ * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaComplexContentExtension_(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaComplexContentExtension_ * soap_new___ns3__union_XmlSchemaComplexContentExtension_(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaComplexContentExtension_(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaComplexContentExtension_ * soap_new_req___ns3__union_XmlSchemaComplexContentExtension_(struct soap *soap) { __ns3__union_XmlSchemaComplexContentExtension_ *_p = soap_instantiate___ns3__union_XmlSchemaComplexContentExtension_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaComplexContentExtension_ * soap_new_set___ns3__union_XmlSchemaComplexContentExtension_(struct soap *soap, std::string *attributeGroup, std::string *attribute) { __ns3__union_XmlSchemaComplexContentExtension_ *_p = soap_instantiate___ns3__union_XmlSchemaComplexContentExtension_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaComplexContentExtension_::attributeGroup = attributeGroup; _p->__ns3__union_XmlSchemaComplexContentExtension_::attribute = attribute; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaComplexContentExtension_(struct soap *soap, __ns3__union_XmlSchemaComplexContentExtension_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaComplexContentExtension_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaComplexContentRestriction_
#define SOAP_TYPE___ns3__union_XmlSchemaComplexContentRestriction_ (358)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, const char*, int, const __ns3__union_XmlSchemaComplexContentRestriction_ *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentRestriction_ * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, const char*, __ns3__union_XmlSchemaComplexContentRestriction_ *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaComplexContentRestriction_
#define soap_write___ns3__union_XmlSchemaComplexContentRestriction_(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaComplexContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentRestriction_ * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, __ns3__union_XmlSchemaComplexContentRestriction_ *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaComplexContentRestriction_
#define soap_read___ns3__union_XmlSchemaComplexContentRestriction_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaComplexContentRestriction_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaComplexContentRestriction_ * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaComplexContentRestriction_ * soap_new___ns3__union_XmlSchemaComplexContentRestriction_(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaComplexContentRestriction_(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaComplexContentRestriction_ * soap_new_req___ns3__union_XmlSchemaComplexContentRestriction_(struct soap *soap) { __ns3__union_XmlSchemaComplexContentRestriction_ *_p = soap_instantiate___ns3__union_XmlSchemaComplexContentRestriction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaComplexContentRestriction_ * soap_new_set___ns3__union_XmlSchemaComplexContentRestriction_(struct soap *soap, std::string *attributeGroup, std::string *attribute) { __ns3__union_XmlSchemaComplexContentRestriction_ *_p = soap_instantiate___ns3__union_XmlSchemaComplexContentRestriction_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaComplexContentRestriction_::attributeGroup = attributeGroup; _p->__ns3__union_XmlSchemaComplexContentRestriction_::attribute = attribute; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaComplexContentRestriction_(struct soap *soap, __ns3__union_XmlSchemaComplexContentRestriction_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaComplexType__
#define SOAP_TYPE___ns3__union_XmlSchemaComplexType__ (351)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaComplexType__(struct soap*, const char*, int, const __ns3__union_XmlSchemaComplexType__ *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaComplexType__ * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaComplexType__(struct soap*, const char*, __ns3__union_XmlSchemaComplexType__ *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaComplexType__
#define soap_write___ns3__union_XmlSchemaComplexType__(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaComplexType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaComplexType__ * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaComplexType__(struct soap*, __ns3__union_XmlSchemaComplexType__ *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaComplexType__
#define soap_read___ns3__union_XmlSchemaComplexType__(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaComplexType__(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaComplexType__ * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaComplexType__(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaComplexType__ * soap_new___ns3__union_XmlSchemaComplexType__(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaComplexType__(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaComplexType__ * soap_new_req___ns3__union_XmlSchemaComplexType__(struct soap *soap) { __ns3__union_XmlSchemaComplexType__ *_p = soap_instantiate___ns3__union_XmlSchemaComplexType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaComplexType__ * soap_new_set___ns3__union_XmlSchemaComplexType__(struct soap *soap, std::string *attributeGroup, std::string *attribute) { __ns3__union_XmlSchemaComplexType__ *_p = soap_instantiate___ns3__union_XmlSchemaComplexType__(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaComplexType__::attributeGroup = attributeGroup; _p->__ns3__union_XmlSchemaComplexType__::attribute = attribute; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaComplexType__(struct soap *soap, __ns3__union_XmlSchemaComplexType__ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaComplexType__(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaAttributeGroup
#define SOAP_TYPE___ns3__union_XmlSchemaAttributeGroup (336)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaAttributeGroup(struct soap*, const char*, int, const __ns3__union_XmlSchemaAttributeGroup *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaAttributeGroup * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaAttributeGroup(struct soap*, const char*, __ns3__union_XmlSchemaAttributeGroup *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaAttributeGroup
#define soap_write___ns3__union_XmlSchemaAttributeGroup(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaAttributeGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaAttributeGroup * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaAttributeGroup(struct soap*, __ns3__union_XmlSchemaAttributeGroup *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaAttributeGroup
#define soap_read___ns3__union_XmlSchemaAttributeGroup(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaAttributeGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaAttributeGroup * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaAttributeGroup(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaAttributeGroup * soap_new___ns3__union_XmlSchemaAttributeGroup(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaAttributeGroup(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaAttributeGroup * soap_new_req___ns3__union_XmlSchemaAttributeGroup(struct soap *soap) { __ns3__union_XmlSchemaAttributeGroup *_p = soap_instantiate___ns3__union_XmlSchemaAttributeGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaAttributeGroup * soap_new_set___ns3__union_XmlSchemaAttributeGroup(struct soap *soap, std::string *attributeGroup, std::string *attribute) { __ns3__union_XmlSchemaAttributeGroup *_p = soap_instantiate___ns3__union_XmlSchemaAttributeGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaAttributeGroup::attributeGroup = attributeGroup; _p->__ns3__union_XmlSchemaAttributeGroup::attribute = attribute; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaAttributeGroup(struct soap *soap, __ns3__union_XmlSchemaAttributeGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaAttributeGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchemaAnnotation
#define SOAP_TYPE___ns3__union_XmlSchemaAnnotation (331)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchemaAnnotation(struct soap*, const char*, int, const __ns3__union_XmlSchemaAnnotation *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchemaAnnotation * SOAP_FMAC4 soap_in___ns3__union_XmlSchemaAnnotation(struct soap*, const char*, __ns3__union_XmlSchemaAnnotation *, const char*);

#ifndef soap_write___ns3__union_XmlSchemaAnnotation
#define soap_write___ns3__union_XmlSchemaAnnotation(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchemaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaAnnotation * SOAP_FMAC4 soap_get___ns3__union_XmlSchemaAnnotation(struct soap*, __ns3__union_XmlSchemaAnnotation *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchemaAnnotation
#define soap_read___ns3__union_XmlSchemaAnnotation(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchemaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchemaAnnotation * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchemaAnnotation(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchemaAnnotation * soap_new___ns3__union_XmlSchemaAnnotation(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchemaAnnotation(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchemaAnnotation * soap_new_req___ns3__union_XmlSchemaAnnotation(struct soap *soap) { __ns3__union_XmlSchemaAnnotation *_p = soap_instantiate___ns3__union_XmlSchemaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchemaAnnotation * soap_new_set___ns3__union_XmlSchemaAnnotation(struct soap *soap, std::string *documentation, std::string *appinfo) { __ns3__union_XmlSchemaAnnotation *_p = soap_instantiate___ns3__union_XmlSchemaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchemaAnnotation::documentation = documentation; _p->__ns3__union_XmlSchemaAnnotation::appinfo = appinfo; } return _p; }

inline void soap_delete___ns3__union_XmlSchemaAnnotation(struct soap *soap, __ns3__union_XmlSchemaAnnotation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchemaAnnotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchema_
#define SOAP_TYPE___ns3__union_XmlSchema_ (316)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchema_(struct soap*, const char*, int, const __ns3__union_XmlSchema_ *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchema_ * SOAP_FMAC4 soap_in___ns3__union_XmlSchema_(struct soap*, const char*, __ns3__union_XmlSchema_ *, const char*);

#ifndef soap_write___ns3__union_XmlSchema_
#define soap_write___ns3__union_XmlSchema_(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchema", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchema_ * SOAP_FMAC4 soap_get___ns3__union_XmlSchema_(struct soap*, __ns3__union_XmlSchema_ *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchema_
#define soap_read___ns3__union_XmlSchema_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchema_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchema_ * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchema_(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchema_ * soap_new___ns3__union_XmlSchema_(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchema_(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchema_ * soap_new_req___ns3__union_XmlSchema_(struct soap *soap) { __ns3__union_XmlSchema_ *_p = soap_instantiate___ns3__union_XmlSchema_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchema_ * soap_new_set___ns3__union_XmlSchema_(struct soap *soap, std::string *notation, std::string *group, std::string *annotation, std::string *attribute, std::string *attributeGroup, std::string *complexType, std::string *simpleType, std::string *element) { __ns3__union_XmlSchema_ *_p = soap_instantiate___ns3__union_XmlSchema_(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchema_::notation = notation; _p->__ns3__union_XmlSchema_::group = group; _p->__ns3__union_XmlSchema_::annotation = annotation; _p->__ns3__union_XmlSchema_::attribute = attribute; _p->__ns3__union_XmlSchema_::attributeGroup = attributeGroup; _p->__ns3__union_XmlSchema_::complexType = complexType; _p->__ns3__union_XmlSchema_::simpleType = simpleType; _p->__ns3__union_XmlSchema_::element = element; } return _p; }

inline void soap_delete___ns3__union_XmlSchema_(struct soap *soap, __ns3__union_XmlSchema_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchema_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns3__union_XmlSchema
#define SOAP_TYPE___ns3__union_XmlSchema (311)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns3__union_XmlSchema(struct soap*, const char*, int, const __ns3__union_XmlSchema *, const char*);
SOAP_FMAC3 __ns3__union_XmlSchema * SOAP_FMAC4 soap_in___ns3__union_XmlSchema(struct soap*, const char*, __ns3__union_XmlSchema *, const char*);

#ifndef soap_write___ns3__union_XmlSchema
#define soap_write___ns3__union_XmlSchema(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns3:union-XmlSchema", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchema * SOAP_FMAC4 soap_get___ns3__union_XmlSchema(struct soap*, __ns3__union_XmlSchema *, const char*, const char*);

#ifndef soap_read___ns3__union_XmlSchema
#define soap_read___ns3__union_XmlSchema(soap, data) ( soap_begin_recv(soap) || !soap_get___ns3__union_XmlSchema(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns3__union_XmlSchema * SOAP_FMAC2 soap_instantiate___ns3__union_XmlSchema(struct soap*, int, const char*, const char*, size_t*);

inline __ns3__union_XmlSchema * soap_new___ns3__union_XmlSchema(struct soap *soap, int n = -1) { return soap_instantiate___ns3__union_XmlSchema(soap, n, NULL, NULL, NULL); }

inline __ns3__union_XmlSchema * soap_new_req___ns3__union_XmlSchema(struct soap *soap) { __ns3__union_XmlSchema *_p = soap_instantiate___ns3__union_XmlSchema(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns3__union_XmlSchema * soap_new_set___ns3__union_XmlSchema(struct soap *soap, std::string *include, std::string *redefine, std::string *import) { __ns3__union_XmlSchema *_p = soap_instantiate___ns3__union_XmlSchema(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns3__union_XmlSchema::include = include; _p->__ns3__union_XmlSchema::redefine = redefine; _p->__ns3__union_XmlSchema::import = import; } return _p; }

inline void soap_delete___ns3__union_XmlSchema(struct soap *soap, __ns3__union_XmlSchema *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns3__union_XmlSchema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns5__union_Axis
#define SOAP_TYPE___ns5__union_Axis (291)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__union_Axis(struct soap*, const char*, int, const __ns5__union_Axis *, const char*);
SOAP_FMAC3 __ns5__union_Axis * SOAP_FMAC4 soap_in___ns5__union_Axis(struct soap*, const char*, __ns5__union_Axis *, const char*);

#ifndef soap_write___ns5__union_Axis
#define soap_write___ns5__union_Axis(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns5:union-Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns5__union_Axis * SOAP_FMAC4 soap_get___ns5__union_Axis(struct soap*, __ns5__union_Axis *, const char*, const char*);

#ifndef soap_read___ns5__union_Axis
#define soap_read___ns5__union_Axis(soap, data) ( soap_begin_recv(soap) || !soap_get___ns5__union_Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns5__union_Axis * SOAP_FMAC2 soap_instantiate___ns5__union_Axis(struct soap*, int, const char*, const char*, size_t*);

inline __ns5__union_Axis * soap_new___ns5__union_Axis(struct soap *soap, int n = -1) { return soap_instantiate___ns5__union_Axis(soap, n, NULL, NULL, NULL); }

inline __ns5__union_Axis * soap_new_req___ns5__union_Axis(struct soap *soap) { __ns5__union_Axis *_p = soap_instantiate___ns5__union_Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns5__union_Axis * soap_new_set___ns5__union_Axis(struct soap *soap, ns5__Tuples *Tuples, ns5__CrossProduct *CrossProduct) { __ns5__union_Axis *_p = soap_instantiate___ns5__union_Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns5__union_Axis::Tuples = Tuples; _p->__ns5__union_Axis::CrossProduct = CrossProduct; } return _p; }

inline void soap_delete___ns5__union_Axis(struct soap *soap, __ns5__union_Axis *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns5__union_Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns5__union_ResultXmlRoot
#define SOAP_TYPE___ns5__union_ResultXmlRoot (281)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns5__union_ResultXmlRoot(struct soap*, const char*, int, const __ns5__union_ResultXmlRoot *, const char*);
SOAP_FMAC3 __ns5__union_ResultXmlRoot * SOAP_FMAC4 soap_in___ns5__union_ResultXmlRoot(struct soap*, const char*, __ns5__union_ResultXmlRoot *, const char*);

#ifndef soap_write___ns5__union_ResultXmlRoot
#define soap_write___ns5__union_ResultXmlRoot(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns5:union-ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns5__union_ResultXmlRoot * SOAP_FMAC4 soap_get___ns5__union_ResultXmlRoot(struct soap*, __ns5__union_ResultXmlRoot *, const char*, const char*);

#ifndef soap_read___ns5__union_ResultXmlRoot
#define soap_read___ns5__union_ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get___ns5__union_ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns5__union_ResultXmlRoot * SOAP_FMAC2 soap_instantiate___ns5__union_ResultXmlRoot(struct soap*, int, const char*, const char*, size_t*);

inline __ns5__union_ResultXmlRoot * soap_new___ns5__union_ResultXmlRoot(struct soap *soap, int n = -1) { return soap_instantiate___ns5__union_ResultXmlRoot(soap, n, NULL, NULL, NULL); }

inline __ns5__union_ResultXmlRoot * soap_new_req___ns5__union_ResultXmlRoot(struct soap *soap) { __ns5__union_ResultXmlRoot *_p = soap_instantiate___ns5__union_ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns5__union_ResultXmlRoot * soap_new_set___ns5__union_ResultXmlRoot(struct soap *soap, ns5__CellData *CellData, ns5__Axes *Axes, ns5__Row *row, ns5__OlapInfo *OlapInfo) { __ns5__union_ResultXmlRoot *_p = soap_instantiate___ns5__union_ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns5__union_ResultXmlRoot::CellData = CellData; _p->__ns5__union_ResultXmlRoot::Axes = Axes; _p->__ns5__union_ResultXmlRoot::row = row; _p->__ns5__union_ResultXmlRoot::OlapInfo = OlapInfo; } return _p; }

inline void soap_delete___ns5__union_ResultXmlRoot(struct soap *soap, __ns5__union_ResultXmlRoot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns5__union_ResultXmlRoot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns4__union_Axis
#define SOAP_TYPE___ns4__union_Axis (262)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__union_Axis(struct soap*, const char*, int, const __ns4__union_Axis *, const char*);
SOAP_FMAC3 __ns4__union_Axis * SOAP_FMAC4 soap_in___ns4__union_Axis(struct soap*, const char*, __ns4__union_Axis *, const char*);

#ifndef soap_write___ns4__union_Axis
#define soap_write___ns4__union_Axis(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns4:union-Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns4__union_Axis * SOAP_FMAC4 soap_get___ns4__union_Axis(struct soap*, __ns4__union_Axis *, const char*, const char*);

#ifndef soap_read___ns4__union_Axis
#define soap_read___ns4__union_Axis(soap, data) ( soap_begin_recv(soap) || !soap_get___ns4__union_Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns4__union_Axis * SOAP_FMAC2 soap_instantiate___ns4__union_Axis(struct soap*, int, const char*, const char*, size_t*);

inline __ns4__union_Axis * soap_new___ns4__union_Axis(struct soap *soap, int n = -1) { return soap_instantiate___ns4__union_Axis(soap, n, NULL, NULL, NULL); }

inline __ns4__union_Axis * soap_new_req___ns4__union_Axis(struct soap *soap) { __ns4__union_Axis *_p = soap_instantiate___ns4__union_Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns4__union_Axis * soap_new_set___ns4__union_Axis(struct soap *soap, ns4__Tuples *Tuples, ns4__CrossProduct *CrossProduct) { __ns4__union_Axis *_p = soap_instantiate___ns4__union_Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns4__union_Axis::Tuples = Tuples; _p->__ns4__union_Axis::CrossProduct = CrossProduct; } return _p; }

inline void soap_delete___ns4__union_Axis(struct soap *soap, __ns4__union_Axis *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__union_Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns4__union_ResultXmlRoot
#define SOAP_TYPE___ns4__union_ResultXmlRoot (252)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns4__union_ResultXmlRoot(struct soap*, const char*, int, const __ns4__union_ResultXmlRoot *, const char*);
SOAP_FMAC3 __ns4__union_ResultXmlRoot * SOAP_FMAC4 soap_in___ns4__union_ResultXmlRoot(struct soap*, const char*, __ns4__union_ResultXmlRoot *, const char*);

#ifndef soap_write___ns4__union_ResultXmlRoot
#define soap_write___ns4__union_ResultXmlRoot(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns4:union-ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns4__union_ResultXmlRoot * SOAP_FMAC4 soap_get___ns4__union_ResultXmlRoot(struct soap*, __ns4__union_ResultXmlRoot *, const char*, const char*);

#ifndef soap_read___ns4__union_ResultXmlRoot
#define soap_read___ns4__union_ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get___ns4__union_ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns4__union_ResultXmlRoot * SOAP_FMAC2 soap_instantiate___ns4__union_ResultXmlRoot(struct soap*, int, const char*, const char*, size_t*);

inline __ns4__union_ResultXmlRoot * soap_new___ns4__union_ResultXmlRoot(struct soap *soap, int n = -1) { return soap_instantiate___ns4__union_ResultXmlRoot(soap, n, NULL, NULL, NULL); }

inline __ns4__union_ResultXmlRoot * soap_new_req___ns4__union_ResultXmlRoot(struct soap *soap) { __ns4__union_ResultXmlRoot *_p = soap_instantiate___ns4__union_ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns4__union_ResultXmlRoot * soap_new_set___ns4__union_ResultXmlRoot(struct soap *soap, ns4__CellData *CellData, ns4__Axes *Axes, ns4__Row *row, ns4__OlapInfo *OlapInfo) { __ns4__union_ResultXmlRoot *_p = soap_instantiate___ns4__union_ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns4__union_ResultXmlRoot::CellData = CellData; _p->__ns4__union_ResultXmlRoot::Axes = Axes; _p->__ns4__union_ResultXmlRoot::row = row; _p->__ns4__union_ResultXmlRoot::OlapInfo = OlapInfo; } return _p; }

inline void soap_delete___ns4__union_ResultXmlRoot(struct soap *soap, __ns4__union_ResultXmlRoot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns4__union_ResultXmlRoot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns2__union_Axis
#define SOAP_TYPE___ns2__union_Axis (233)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__union_Axis(struct soap*, const char*, int, const __ns2__union_Axis *, const char*);
SOAP_FMAC3 __ns2__union_Axis * SOAP_FMAC4 soap_in___ns2__union_Axis(struct soap*, const char*, __ns2__union_Axis *, const char*);

#ifndef soap_write___ns2__union_Axis
#define soap_write___ns2__union_Axis(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns2:union-Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns2__union_Axis * SOAP_FMAC4 soap_get___ns2__union_Axis(struct soap*, __ns2__union_Axis *, const char*, const char*);

#ifndef soap_read___ns2__union_Axis
#define soap_read___ns2__union_Axis(soap, data) ( soap_begin_recv(soap) || !soap_get___ns2__union_Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns2__union_Axis * SOAP_FMAC2 soap_instantiate___ns2__union_Axis(struct soap*, int, const char*, const char*, size_t*);

inline __ns2__union_Axis * soap_new___ns2__union_Axis(struct soap *soap, int n = -1) { return soap_instantiate___ns2__union_Axis(soap, n, NULL, NULL, NULL); }

inline __ns2__union_Axis * soap_new_req___ns2__union_Axis(struct soap *soap) { __ns2__union_Axis *_p = soap_instantiate___ns2__union_Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns2__union_Axis * soap_new_set___ns2__union_Axis(struct soap *soap, ns2__Tuples *Tuples, ns2__CrossProduct *CrossProduct) { __ns2__union_Axis *_p = soap_instantiate___ns2__union_Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_Axis::Tuples = Tuples; _p->__ns2__union_Axis::CrossProduct = CrossProduct; } return _p; }

inline void soap_delete___ns2__union_Axis(struct soap *soap, __ns2__union_Axis *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__union_Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns2__union_ResultXmlRoot
#define SOAP_TYPE___ns2__union_ResultXmlRoot (222)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns2__union_ResultXmlRoot(struct soap*, const char*, int, const __ns2__union_ResultXmlRoot *, const char*);
SOAP_FMAC3 __ns2__union_ResultXmlRoot * SOAP_FMAC4 soap_in___ns2__union_ResultXmlRoot(struct soap*, const char*, __ns2__union_ResultXmlRoot *, const char*);

#ifndef soap_write___ns2__union_ResultXmlRoot
#define soap_write___ns2__union_ResultXmlRoot(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "-ns2:union-ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns2__union_ResultXmlRoot * SOAP_FMAC4 soap_get___ns2__union_ResultXmlRoot(struct soap*, __ns2__union_ResultXmlRoot *, const char*, const char*);

#ifndef soap_read___ns2__union_ResultXmlRoot
#define soap_read___ns2__union_ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get___ns2__union_ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 __ns2__union_ResultXmlRoot * SOAP_FMAC2 soap_instantiate___ns2__union_ResultXmlRoot(struct soap*, int, const char*, const char*, size_t*);

inline __ns2__union_ResultXmlRoot * soap_new___ns2__union_ResultXmlRoot(struct soap *soap, int n = -1) { return soap_instantiate___ns2__union_ResultXmlRoot(soap, n, NULL, NULL, NULL); }

inline __ns2__union_ResultXmlRoot * soap_new_req___ns2__union_ResultXmlRoot(struct soap *soap) { __ns2__union_ResultXmlRoot *_p = soap_instantiate___ns2__union_ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline __ns2__union_ResultXmlRoot * soap_new_set___ns2__union_ResultXmlRoot(struct soap *soap, ns2__CellData *CellData, ns2__Axes *Axes, std::vector<char * >& row, ns2__OlapInfo *OlapInfo) { __ns2__union_ResultXmlRoot *_p = soap_instantiate___ns2__union_ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->__ns2__union_ResultXmlRoot::CellData = CellData; _p->__ns2__union_ResultXmlRoot::Axes = Axes; _p->__ns2__union_ResultXmlRoot::row = row; _p->__ns2__union_ResultXmlRoot::OlapInfo = OlapInfo; } return _p; }

inline void soap_delete___ns2__union_ResultXmlRoot(struct soap *soap, __ns2__union_ResultXmlRoot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns2__union_ResultXmlRoot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__UsernameTokenElement
#define SOAP_TYPE_ns6__UsernameTokenElement (204)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__UsernameTokenElement(struct soap*, const char*, int, const ns6__UsernameTokenElement *, const char*);
SOAP_FMAC3 ns6__UsernameTokenElement * SOAP_FMAC4 soap_in_ns6__UsernameTokenElement(struct soap*, const char*, ns6__UsernameTokenElement *, const char*);

#ifndef soap_write_ns6__UsernameTokenElement
#define soap_write_ns6__UsernameTokenElement(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns6:UsernameTokenElement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns6__UsernameTokenElement * SOAP_FMAC4 soap_get_ns6__UsernameTokenElement(struct soap*, ns6__UsernameTokenElement *, const char*, const char*);

#ifndef soap_read_ns6__UsernameTokenElement
#define soap_read_ns6__UsernameTokenElement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__UsernameTokenElement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns6__UsernameTokenElement * SOAP_FMAC2 soap_instantiate_ns6__UsernameTokenElement(struct soap*, int, const char*, const char*, size_t*);

inline ns6__UsernameTokenElement * soap_new_ns6__UsernameTokenElement(struct soap *soap, int n = -1) { return soap_instantiate_ns6__UsernameTokenElement(soap, n, NULL, NULL, NULL); }

inline ns6__UsernameTokenElement * soap_new_req_ns6__UsernameTokenElement(struct soap *soap) { ns6__UsernameTokenElement *_p = soap_instantiate_ns6__UsernameTokenElement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns6__UsernameTokenElement * soap_new_set_ns6__UsernameTokenElement(struct soap *soap, std::string *Username, std::string *Password) { ns6__UsernameTokenElement *_p = soap_instantiate_ns6__UsernameTokenElement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__UsernameTokenElement::Username = Username; _p->ns6__UsernameTokenElement::Password = Password; } return _p; }

inline void soap_delete_ns6__UsernameTokenElement(struct soap *soap, ns6__UsernameTokenElement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__UsernameTokenElement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns6__Security
#define SOAP_TYPE_ns6__Security (203)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__Security(struct soap*, const char*, int, const ns6__Security *, const char*);
SOAP_FMAC3 ns6__Security * SOAP_FMAC4 soap_in_ns6__Security(struct soap*, const char*, ns6__Security *, const char*);

#ifndef soap_write_ns6__Security
#define soap_write_ns6__Security(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns6:Security", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns6__Security * SOAP_FMAC4 soap_get_ns6__Security(struct soap*, ns6__Security *, const char*, const char*);

#ifndef soap_read_ns6__Security
#define soap_read_ns6__Security(soap, data) ( soap_begin_recv(soap) || !soap_get_ns6__Security(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns6__Security * SOAP_FMAC2 soap_instantiate_ns6__Security(struct soap*, int, const char*, const char*, size_t*);

inline ns6__Security * soap_new_ns6__Security(struct soap *soap, int n = -1) { return soap_instantiate_ns6__Security(soap, n, NULL, NULL, NULL); }

inline ns6__Security * soap_new_req_ns6__Security(struct soap *soap) { ns6__Security *_p = soap_instantiate_ns6__Security(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns6__Security * soap_new_set_ns6__Security(struct soap *soap, ns6__UsernameTokenElement *UsernameToken, char *__anyAttribute) { ns6__Security *_p = soap_instantiate_ns6__Security(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns6__Security::UsernameToken = UsernameToken; _p->ns6__Security::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns6__Security(struct soap *soap, ns6__Security *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__Security(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__CellInfo
#define SOAP_TYPE_ns5__CellInfo (202)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__CellInfo(struct soap*, const char*, int, const ns5__CellInfo *, const char*);
SOAP_FMAC3 ns5__CellInfo * SOAP_FMAC4 soap_in_ns5__CellInfo(struct soap*, const char*, ns5__CellInfo *, const char*);

#ifndef soap_write_ns5__CellInfo
#define soap_write_ns5__CellInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:CellInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CellInfo * SOAP_FMAC4 soap_get_ns5__CellInfo(struct soap*, ns5__CellInfo *, const char*, const char*);

#ifndef soap_read_ns5__CellInfo
#define soap_read_ns5__CellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__CellInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__CellInfo * SOAP_FMAC2 soap_instantiate_ns5__CellInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__CellInfo * soap_new_ns5__CellInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__CellInfo(soap, n, NULL, NULL, NULL); }

inline ns5__CellInfo * soap_new_req_ns5__CellInfo(struct soap *soap) { ns5__CellInfo *_p = soap_instantiate_ns5__CellInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__CellInfo * soap_new_set_ns5__CellInfo(struct soap *soap, std::vector<char * >& __any) { ns5__CellInfo *_p = soap_instantiate_ns5__CellInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__CellInfo::__any = __any; } return _p; }

inline void soap_delete_ns5__CellInfo(struct soap *soap, ns5__CellInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__CellInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__HierarchyInfo
#define SOAP_TYPE_ns5__HierarchyInfo (201)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__HierarchyInfo(struct soap*, const char*, int, const ns5__HierarchyInfo *, const char*);
SOAP_FMAC3 ns5__HierarchyInfo * SOAP_FMAC4 soap_in_ns5__HierarchyInfo(struct soap*, const char*, ns5__HierarchyInfo *, const char*);

#ifndef soap_write_ns5__HierarchyInfo
#define soap_write_ns5__HierarchyInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:HierarchyInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__HierarchyInfo * SOAP_FMAC4 soap_get_ns5__HierarchyInfo(struct soap*, ns5__HierarchyInfo *, const char*, const char*);

#ifndef soap_read_ns5__HierarchyInfo
#define soap_read_ns5__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__HierarchyInfo * SOAP_FMAC2 soap_instantiate_ns5__HierarchyInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__HierarchyInfo * soap_new_ns5__HierarchyInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__HierarchyInfo(soap, n, NULL, NULL, NULL); }

inline ns5__HierarchyInfo * soap_new_req_ns5__HierarchyInfo(struct soap *soap) { ns5__HierarchyInfo *_p = soap_instantiate_ns5__HierarchyInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__HierarchyInfo * soap_new_set_ns5__HierarchyInfo(struct soap *soap, std::vector<char * >& __any, std::string *name) { ns5__HierarchyInfo *_p = soap_instantiate_ns5__HierarchyInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__HierarchyInfo::__any = __any; _p->ns5__HierarchyInfo::name = name; } return _p; }

inline void soap_delete_ns5__HierarchyInfo(struct soap *soap, ns5__HierarchyInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__HierarchyInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__AxisInfo
#define SOAP_TYPE_ns5__AxisInfo (200)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__AxisInfo(struct soap*, const char*, int, const ns5__AxisInfo *, const char*);
SOAP_FMAC3 ns5__AxisInfo * SOAP_FMAC4 soap_in_ns5__AxisInfo(struct soap*, const char*, ns5__AxisInfo *, const char*);

#ifndef soap_write_ns5__AxisInfo
#define soap_write_ns5__AxisInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:AxisInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__AxisInfo * SOAP_FMAC4 soap_get_ns5__AxisInfo(struct soap*, ns5__AxisInfo *, const char*, const char*);

#ifndef soap_read_ns5__AxisInfo
#define soap_read_ns5__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__AxisInfo * SOAP_FMAC2 soap_instantiate_ns5__AxisInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__AxisInfo * soap_new_ns5__AxisInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__AxisInfo(soap, n, NULL, NULL, NULL); }

inline ns5__AxisInfo * soap_new_req_ns5__AxisInfo(struct soap *soap) { ns5__AxisInfo *_p = soap_instantiate_ns5__AxisInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__AxisInfo * soap_new_set_ns5__AxisInfo(struct soap *soap, std::vector<ns5__HierarchyInfo * >& HierarchyInfo, std::string *name) { ns5__AxisInfo *_p = soap_instantiate_ns5__AxisInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__AxisInfo::HierarchyInfo = HierarchyInfo; _p->ns5__AxisInfo::name = name; } return _p; }

inline void soap_delete_ns5__AxisInfo(struct soap *soap, ns5__AxisInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__AxisInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__AxesInfo
#define SOAP_TYPE_ns5__AxesInfo (199)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__AxesInfo(struct soap*, const char*, int, const ns5__AxesInfo *, const char*);
SOAP_FMAC3 ns5__AxesInfo * SOAP_FMAC4 soap_in_ns5__AxesInfo(struct soap*, const char*, ns5__AxesInfo *, const char*);

#ifndef soap_write_ns5__AxesInfo
#define soap_write_ns5__AxesInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:AxesInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__AxesInfo * SOAP_FMAC4 soap_get_ns5__AxesInfo(struct soap*, ns5__AxesInfo *, const char*, const char*);

#ifndef soap_read_ns5__AxesInfo
#define soap_read_ns5__AxesInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__AxesInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__AxesInfo * SOAP_FMAC2 soap_instantiate_ns5__AxesInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__AxesInfo * soap_new_ns5__AxesInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__AxesInfo(soap, n, NULL, NULL, NULL); }

inline ns5__AxesInfo * soap_new_req_ns5__AxesInfo(struct soap *soap) { ns5__AxesInfo *_p = soap_instantiate_ns5__AxesInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__AxesInfo * soap_new_set_ns5__AxesInfo(struct soap *soap, std::vector<ns5__AxisInfo * >& AxisInfo) { ns5__AxesInfo *_p = soap_instantiate_ns5__AxesInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__AxesInfo::AxisInfo = AxisInfo; } return _p; }

inline void soap_delete_ns5__AxesInfo(struct soap *soap, ns5__AxesInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__AxesInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Cube
#define SOAP_TYPE_ns5__Cube (198)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Cube(struct soap*, const char*, int, const ns5__Cube *, const char*);
SOAP_FMAC3 ns5__Cube * SOAP_FMAC4 soap_in_ns5__Cube(struct soap*, const char*, ns5__Cube *, const char*);

#ifndef soap_write_ns5__Cube
#define soap_write_ns5__Cube(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Cube", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Cube * SOAP_FMAC4 soap_get_ns5__Cube(struct soap*, ns5__Cube *, const char*, const char*);

#ifndef soap_read_ns5__Cube
#define soap_read_ns5__Cube(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Cube(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Cube * SOAP_FMAC2 soap_instantiate_ns5__Cube(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Cube * soap_new_ns5__Cube(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Cube(soap, n, NULL, NULL, NULL); }

inline ns5__Cube * soap_new_req_ns5__Cube(struct soap *soap) { ns5__Cube *_p = soap_instantiate_ns5__Cube(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__Cube * soap_new_set_ns5__Cube(struct soap *soap, std::string *CubeName) { ns5__Cube *_p = soap_instantiate_ns5__Cube(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Cube::CubeName = CubeName; } return _p; }

inline void soap_delete_ns5__Cube(struct soap *soap, ns5__Cube *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Cube(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__CubeInfo
#define SOAP_TYPE_ns5__CubeInfo (197)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__CubeInfo(struct soap*, const char*, int, const ns5__CubeInfo *, const char*);
SOAP_FMAC3 ns5__CubeInfo * SOAP_FMAC4 soap_in_ns5__CubeInfo(struct soap*, const char*, ns5__CubeInfo *, const char*);

#ifndef soap_write_ns5__CubeInfo
#define soap_write_ns5__CubeInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:CubeInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CubeInfo * SOAP_FMAC4 soap_get_ns5__CubeInfo(struct soap*, ns5__CubeInfo *, const char*, const char*);

#ifndef soap_read_ns5__CubeInfo
#define soap_read_ns5__CubeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__CubeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__CubeInfo * SOAP_FMAC2 soap_instantiate_ns5__CubeInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__CubeInfo * soap_new_ns5__CubeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__CubeInfo(soap, n, NULL, NULL, NULL); }

inline ns5__CubeInfo * soap_new_req_ns5__CubeInfo(struct soap *soap) { ns5__CubeInfo *_p = soap_instantiate_ns5__CubeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__CubeInfo * soap_new_set_ns5__CubeInfo(struct soap *soap, std::vector<ns5__Cube * >& Cube) { ns5__CubeInfo *_p = soap_instantiate_ns5__CubeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__CubeInfo::Cube = Cube; } return _p; }

inline void soap_delete_ns5__CubeInfo(struct soap *soap, ns5__CubeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__CubeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__OlapInfo
#define SOAP_TYPE_ns5__OlapInfo (196)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__OlapInfo(struct soap*, const char*, int, const ns5__OlapInfo *, const char*);
SOAP_FMAC3 ns5__OlapInfo * SOAP_FMAC4 soap_in_ns5__OlapInfo(struct soap*, const char*, ns5__OlapInfo *, const char*);

#ifndef soap_write_ns5__OlapInfo
#define soap_write_ns5__OlapInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:OlapInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__OlapInfo * SOAP_FMAC4 soap_get_ns5__OlapInfo(struct soap*, ns5__OlapInfo *, const char*, const char*);

#ifndef soap_read_ns5__OlapInfo
#define soap_read_ns5__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__OlapInfo * SOAP_FMAC2 soap_instantiate_ns5__OlapInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns5__OlapInfo * soap_new_ns5__OlapInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns5__OlapInfo(soap, n, NULL, NULL, NULL); }

inline ns5__OlapInfo * soap_new_req_ns5__OlapInfo(struct soap *soap) { ns5__OlapInfo *_p = soap_instantiate_ns5__OlapInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__OlapInfo * soap_new_set_ns5__OlapInfo(struct soap *soap, ns5__CubeInfo *CubeInfo, ns5__AxesInfo *AxesInfo, ns5__CellInfo *CellInfo) { ns5__OlapInfo *_p = soap_instantiate_ns5__OlapInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__OlapInfo::CubeInfo = CubeInfo; _p->ns5__OlapInfo::AxesInfo = AxesInfo; _p->ns5__OlapInfo::CellInfo = CellInfo; } return _p; }

inline void soap_delete_ns5__OlapInfo(struct soap *soap, ns5__OlapInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__OlapInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Row
#define SOAP_TYPE_ns5__Row (195)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Row(struct soap*, const char*, int, const ns5__Row *, const char*);
SOAP_FMAC3 ns5__Row * SOAP_FMAC4 soap_in_ns5__Row(struct soap*, const char*, ns5__Row *, const char*);

#ifndef soap_write_ns5__Row
#define soap_write_ns5__Row(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Row", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Row * SOAP_FMAC4 soap_get_ns5__Row(struct soap*, ns5__Row *, const char*, const char*);

#ifndef soap_read_ns5__Row
#define soap_read_ns5__Row(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Row(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Row * SOAP_FMAC2 soap_instantiate_ns5__Row(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Row * soap_new_ns5__Row(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Row(soap, n, NULL, NULL, NULL); }

inline ns5__Row * soap_new_req_ns5__Row(struct soap *soap) { ns5__Row *_p = soap_instantiate_ns5__Row(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__Row * soap_new_set_ns5__Row(struct soap *soap, std::vector<char * >& __any) { ns5__Row *_p = soap_instantiate_ns5__Row(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Row::__any = __any; } return _p; }

inline void soap_delete_ns5__Row(struct soap *soap, ns5__Row *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Row(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Members
#define SOAP_TYPE_ns5__Members (194)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Members(struct soap*, const char*, int, const ns5__Members *, const char*);
SOAP_FMAC3 ns5__Members * SOAP_FMAC4 soap_in_ns5__Members(struct soap*, const char*, ns5__Members *, const char*);

#ifndef soap_write_ns5__Members
#define soap_write_ns5__Members(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Members", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Members * SOAP_FMAC4 soap_get_ns5__Members(struct soap*, ns5__Members *, const char*, const char*);

#ifndef soap_read_ns5__Members
#define soap_read_ns5__Members(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Members(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Members * SOAP_FMAC2 soap_instantiate_ns5__Members(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Members * soap_new_ns5__Members(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Members(soap, n, NULL, NULL, NULL); }

inline ns5__Members * soap_new_req_ns5__Members(struct soap *soap) { ns5__Members *_p = soap_instantiate_ns5__Members(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__Members * soap_new_set_ns5__Members(struct soap *soap, std::vector<ns5__Member * >& Member, std::string *Hierarchy) { ns5__Members *_p = soap_instantiate_ns5__Members(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Members::Member = Member; _p->ns5__Members::Hierarchy = Hierarchy; } return _p; }

inline void soap_delete_ns5__Members(struct soap *soap, ns5__Members *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Members(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__CrossProduct
#define SOAP_TYPE_ns5__CrossProduct (193)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__CrossProduct(struct soap*, const char*, int, const ns5__CrossProduct *, const char*);
SOAP_FMAC3 ns5__CrossProduct * SOAP_FMAC4 soap_in_ns5__CrossProduct(struct soap*, const char*, ns5__CrossProduct *, const char*);

#ifndef soap_write_ns5__CrossProduct
#define soap_write_ns5__CrossProduct(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:CrossProduct", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CrossProduct * SOAP_FMAC4 soap_get_ns5__CrossProduct(struct soap*, ns5__CrossProduct *, const char*, const char*);

#ifndef soap_read_ns5__CrossProduct
#define soap_read_ns5__CrossProduct(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__CrossProduct(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__CrossProduct * SOAP_FMAC2 soap_instantiate_ns5__CrossProduct(struct soap*, int, const char*, const char*, size_t*);

inline ns5__CrossProduct * soap_new_ns5__CrossProduct(struct soap *soap, int n = -1) { return soap_instantiate_ns5__CrossProduct(soap, n, NULL, NULL, NULL); }

inline ns5__CrossProduct * soap_new_req_ns5__CrossProduct(struct soap *soap, int Size) { ns5__CrossProduct *_p = soap_instantiate_ns5__CrossProduct(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__CrossProduct::Size = Size; } return _p; }

inline ns5__CrossProduct * soap_new_set_ns5__CrossProduct(struct soap *soap, std::vector<ns5__Members * >& Members, int Size) { ns5__CrossProduct *_p = soap_instantiate_ns5__CrossProduct(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__CrossProduct::Members = Members; _p->ns5__CrossProduct::Size = Size; } return _p; }

inline void soap_delete_ns5__CrossProduct(struct soap *soap, ns5__CrossProduct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__CrossProduct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Member
#define SOAP_TYPE_ns5__Member (192)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Member(struct soap*, const char*, int, const ns5__Member *, const char*);
SOAP_FMAC3 ns5__Member * SOAP_FMAC4 soap_in_ns5__Member(struct soap*, const char*, ns5__Member *, const char*);

#ifndef soap_write_ns5__Member
#define soap_write_ns5__Member(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Member * SOAP_FMAC4 soap_get_ns5__Member(struct soap*, ns5__Member *, const char*, const char*);

#ifndef soap_read_ns5__Member
#define soap_read_ns5__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Member(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Member * SOAP_FMAC2 soap_instantiate_ns5__Member(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Member * soap_new_ns5__Member(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Member(soap, n, NULL, NULL, NULL); }

inline ns5__Member * soap_new_req_ns5__Member(struct soap *soap) { ns5__Member *_p = soap_instantiate_ns5__Member(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__Member * soap_new_set_ns5__Member(struct soap *soap, std::string *UName, std::string *Caption, std::string *LName, std::string *LNum, std::string *DisplayInfo, std::vector<char * >& __any, std::string *Hierarchy) { ns5__Member *_p = soap_instantiate_ns5__Member(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Member::UName = UName; _p->ns5__Member::Caption = Caption; _p->ns5__Member::LName = LName; _p->ns5__Member::LNum = LNum; _p->ns5__Member::DisplayInfo = DisplayInfo; _p->ns5__Member::__any = __any; _p->ns5__Member::Hierarchy = Hierarchy; } return _p; }

inline void soap_delete_ns5__Member(struct soap *soap, ns5__Member *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Tuple
#define SOAP_TYPE_ns5__Tuple (191)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Tuple(struct soap*, const char*, int, const ns5__Tuple *, const char*);
SOAP_FMAC3 ns5__Tuple * SOAP_FMAC4 soap_in_ns5__Tuple(struct soap*, const char*, ns5__Tuple *, const char*);

#ifndef soap_write_ns5__Tuple
#define soap_write_ns5__Tuple(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Tuple", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Tuple * SOAP_FMAC4 soap_get_ns5__Tuple(struct soap*, ns5__Tuple *, const char*, const char*);

#ifndef soap_read_ns5__Tuple
#define soap_read_ns5__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Tuple * SOAP_FMAC2 soap_instantiate_ns5__Tuple(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Tuple * soap_new_ns5__Tuple(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Tuple(soap, n, NULL, NULL, NULL); }

inline ns5__Tuple * soap_new_req_ns5__Tuple(struct soap *soap) { ns5__Tuple *_p = soap_instantiate_ns5__Tuple(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__Tuple * soap_new_set_ns5__Tuple(struct soap *soap, std::vector<ns5__Member * >& Member) { ns5__Tuple *_p = soap_instantiate_ns5__Tuple(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Tuple::Member = Member; } return _p; }

inline void soap_delete_ns5__Tuple(struct soap *soap, ns5__Tuple *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Tuple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Tuples
#define SOAP_TYPE_ns5__Tuples (190)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Tuples(struct soap*, const char*, int, const ns5__Tuples *, const char*);
SOAP_FMAC3 ns5__Tuples * SOAP_FMAC4 soap_in_ns5__Tuples(struct soap*, const char*, ns5__Tuples *, const char*);

#ifndef soap_write_ns5__Tuples
#define soap_write_ns5__Tuples(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Tuples", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Tuples * SOAP_FMAC4 soap_get_ns5__Tuples(struct soap*, ns5__Tuples *, const char*, const char*);

#ifndef soap_read_ns5__Tuples
#define soap_read_ns5__Tuples(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Tuples(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Tuples * SOAP_FMAC2 soap_instantiate_ns5__Tuples(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Tuples * soap_new_ns5__Tuples(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Tuples(soap, n, NULL, NULL, NULL); }

inline ns5__Tuples * soap_new_req_ns5__Tuples(struct soap *soap) { ns5__Tuples *_p = soap_instantiate_ns5__Tuples(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__Tuples * soap_new_set_ns5__Tuples(struct soap *soap, std::vector<ns5__Tuple * >& Tuple) { ns5__Tuples *_p = soap_instantiate_ns5__Tuples(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Tuples::Tuple = Tuple; } return _p; }

inline void soap_delete_ns5__Tuples(struct soap *soap, ns5__Tuples *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Tuples(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Axis
#define SOAP_TYPE_ns5__Axis (189)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Axis(struct soap*, const char*, int, const ns5__Axis *, const char*);
SOAP_FMAC3 ns5__Axis * SOAP_FMAC4 soap_in_ns5__Axis(struct soap*, const char*, ns5__Axis *, const char*);

#ifndef soap_write_ns5__Axis
#define soap_write_ns5__Axis(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Axis * SOAP_FMAC4 soap_get_ns5__Axis(struct soap*, ns5__Axis *, const char*, const char*);

#ifndef soap_read_ns5__Axis
#define soap_read_ns5__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Axis * SOAP_FMAC2 soap_instantiate_ns5__Axis(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Axis * soap_new_ns5__Axis(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Axis(soap, n, NULL, NULL, NULL); }

inline ns5__Axis * soap_new_req_ns5__Axis(struct soap *soap, int __size_Axis, __ns5__union_Axis *__union_Axis) { ns5__Axis *_p = soap_instantiate_ns5__Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Axis::__size_Axis = __size_Axis; _p->ns5__Axis::__union_Axis = __union_Axis; } return _p; }

inline ns5__Axis * soap_new_set_ns5__Axis(struct soap *soap, int __size_Axis, __ns5__union_Axis *__union_Axis, std::string *name) { ns5__Axis *_p = soap_instantiate_ns5__Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Axis::__size_Axis = __size_Axis; _p->ns5__Axis::__union_Axis = __union_Axis; _p->ns5__Axis::name = name; } return _p; }

inline void soap_delete_ns5__Axis(struct soap *soap, ns5__Axis *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Axes
#define SOAP_TYPE_ns5__Axes (188)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Axes(struct soap*, const char*, int, const ns5__Axes *, const char*);
SOAP_FMAC3 ns5__Axes * SOAP_FMAC4 soap_in_ns5__Axes(struct soap*, const char*, ns5__Axes *, const char*);

#ifndef soap_write_ns5__Axes
#define soap_write_ns5__Axes(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Axes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Axes * SOAP_FMAC4 soap_get_ns5__Axes(struct soap*, ns5__Axes *, const char*, const char*);

#ifndef soap_read_ns5__Axes
#define soap_read_ns5__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Axes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Axes * SOAP_FMAC2 soap_instantiate_ns5__Axes(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Axes * soap_new_ns5__Axes(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Axes(soap, n, NULL, NULL, NULL); }

inline ns5__Axes * soap_new_req_ns5__Axes(struct soap *soap) { ns5__Axes *_p = soap_instantiate_ns5__Axes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__Axes * soap_new_set_ns5__Axes(struct soap *soap, std::vector<ns5__Axis * >& Axis) { ns5__Axes *_p = soap_instantiate_ns5__Axes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Axes::Axis = Axis; } return _p; }

inline void soap_delete_ns5__Axes(struct soap *soap, ns5__Axes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Axes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__Cell
#define SOAP_TYPE_ns5__Cell (187)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__Cell(struct soap*, const char*, int, const ns5__Cell *, const char*);
SOAP_FMAC3 ns5__Cell * SOAP_FMAC4 soap_in_ns5__Cell(struct soap*, const char*, ns5__Cell *, const char*);

#ifndef soap_write_ns5__Cell
#define soap_write_ns5__Cell(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:Cell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Cell * SOAP_FMAC4 soap_get_ns5__Cell(struct soap*, ns5__Cell *, const char*, const char*);

#ifndef soap_read_ns5__Cell
#define soap_read_ns5__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__Cell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__Cell * SOAP_FMAC2 soap_instantiate_ns5__Cell(struct soap*, int, const char*, const char*, size_t*);

inline ns5__Cell * soap_new_ns5__Cell(struct soap *soap, int n = -1) { return soap_instantiate_ns5__Cell(soap, n, NULL, NULL, NULL); }

inline ns5__Cell * soap_new_req_ns5__Cell(struct soap *soap, int CellOrdinal) { ns5__Cell *_p = soap_instantiate_ns5__Cell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Cell::CellOrdinal = CellOrdinal; } return _p; }

inline ns5__Cell * soap_new_set_ns5__Cell(struct soap *soap, double *Value, std::vector<char * >& __any, int CellOrdinal) { ns5__Cell *_p = soap_instantiate_ns5__Cell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__Cell::Value = Value; _p->ns5__Cell::__any = __any; _p->ns5__Cell::CellOrdinal = CellOrdinal; } return _p; }

inline void soap_delete_ns5__Cell(struct soap *soap, ns5__Cell *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__Cell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__CellData
#define SOAP_TYPE_ns5__CellData (186)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__CellData(struct soap*, const char*, int, const ns5__CellData *, const char*);
SOAP_FMAC3 ns5__CellData * SOAP_FMAC4 soap_in_ns5__CellData(struct soap*, const char*, ns5__CellData *, const char*);

#ifndef soap_write_ns5__CellData
#define soap_write_ns5__CellData(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:CellData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CellData * SOAP_FMAC4 soap_get_ns5__CellData(struct soap*, ns5__CellData *, const char*, const char*);

#ifndef soap_read_ns5__CellData
#define soap_read_ns5__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__CellData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__CellData * SOAP_FMAC2 soap_instantiate_ns5__CellData(struct soap*, int, const char*, const char*, size_t*);

inline ns5__CellData * soap_new_ns5__CellData(struct soap *soap, int n = -1) { return soap_instantiate_ns5__CellData(soap, n, NULL, NULL, NULL); }

inline ns5__CellData * soap_new_req_ns5__CellData(struct soap *soap) { ns5__CellData *_p = soap_instantiate_ns5__CellData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns5__CellData * soap_new_set_ns5__CellData(struct soap *soap, std::vector<ns5__Cell * >& Cell) { ns5__CellData *_p = soap_instantiate_ns5__CellData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__CellData::Cell = Cell; } return _p; }

inline void soap_delete_ns5__CellData(struct soap *soap, ns5__CellData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__CellData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns5__ResultXmlRoot
#define SOAP_TYPE_ns5__ResultXmlRoot (185)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ResultXmlRoot(struct soap*, const char*, int, const ns5__ResultXmlRoot *, const char*);
SOAP_FMAC3 ns5__ResultXmlRoot * SOAP_FMAC4 soap_in_ns5__ResultXmlRoot(struct soap*, const char*, ns5__ResultXmlRoot *, const char*);

#ifndef soap_write_ns5__ResultXmlRoot
#define soap_write_ns5__ResultXmlRoot(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns5:ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__ResultXmlRoot * SOAP_FMAC4 soap_get_ns5__ResultXmlRoot(struct soap*, ns5__ResultXmlRoot *, const char*, const char*);

#ifndef soap_read_ns5__ResultXmlRoot
#define soap_read_ns5__ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_ns5__ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns5__ResultXmlRoot * SOAP_FMAC2 soap_instantiate_ns5__ResultXmlRoot(struct soap*, int, const char*, const char*, size_t*);

inline ns5__ResultXmlRoot * soap_new_ns5__ResultXmlRoot(struct soap *soap, int n = -1) { return soap_instantiate_ns5__ResultXmlRoot(soap, n, NULL, NULL, NULL); }

inline ns5__ResultXmlRoot * soap_new_req_ns5__ResultXmlRoot(struct soap *soap, int __size_ResultXmlRoot, __ns5__union_ResultXmlRoot *__union_ResultXmlRoot) { ns5__ResultXmlRoot *_p = soap_instantiate_ns5__ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__ResultXmlRoot::__size_ResultXmlRoot = __size_ResultXmlRoot; _p->ns5__ResultXmlRoot::__union_ResultXmlRoot = __union_ResultXmlRoot; } return _p; }

inline ns5__ResultXmlRoot * soap_new_set_ns5__ResultXmlRoot(struct soap *soap, char *xsd__schema, int __size_ResultXmlRoot, __ns5__union_ResultXmlRoot *__union_ResultXmlRoot) { ns5__ResultXmlRoot *_p = soap_instantiate_ns5__ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns5__ResultXmlRoot::xsd__schema = xsd__schema; _p->ns5__ResultXmlRoot::__size_ResultXmlRoot = __size_ResultXmlRoot; _p->ns5__ResultXmlRoot::__union_ResultXmlRoot = __union_ResultXmlRoot; } return _p; }

inline void soap_delete_ns5__ResultXmlRoot(struct soap *soap, ns5__ResultXmlRoot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ResultXmlRoot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__CellInfo
#define SOAP_TYPE_ns4__CellInfo (184)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__CellInfo(struct soap*, const char*, int, const ns4__CellInfo *, const char*);
SOAP_FMAC3 ns4__CellInfo * SOAP_FMAC4 soap_in_ns4__CellInfo(struct soap*, const char*, ns4__CellInfo *, const char*);

#ifndef soap_write_ns4__CellInfo
#define soap_write_ns4__CellInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:CellInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CellInfo * SOAP_FMAC4 soap_get_ns4__CellInfo(struct soap*, ns4__CellInfo *, const char*, const char*);

#ifndef soap_read_ns4__CellInfo
#define soap_read_ns4__CellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__CellInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__CellInfo * SOAP_FMAC2 soap_instantiate_ns4__CellInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__CellInfo * soap_new_ns4__CellInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__CellInfo(soap, n, NULL, NULL, NULL); }

inline ns4__CellInfo * soap_new_req_ns4__CellInfo(struct soap *soap) { ns4__CellInfo *_p = soap_instantiate_ns4__CellInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__CellInfo * soap_new_set_ns4__CellInfo(struct soap *soap, std::vector<char * >& __any) { ns4__CellInfo *_p = soap_instantiate_ns4__CellInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__CellInfo::__any = __any; } return _p; }

inline void soap_delete_ns4__CellInfo(struct soap *soap, ns4__CellInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__CellInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__HierarchyInfo
#define SOAP_TYPE_ns4__HierarchyInfo (183)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__HierarchyInfo(struct soap*, const char*, int, const ns4__HierarchyInfo *, const char*);
SOAP_FMAC3 ns4__HierarchyInfo * SOAP_FMAC4 soap_in_ns4__HierarchyInfo(struct soap*, const char*, ns4__HierarchyInfo *, const char*);

#ifndef soap_write_ns4__HierarchyInfo
#define soap_write_ns4__HierarchyInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:HierarchyInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__HierarchyInfo * SOAP_FMAC4 soap_get_ns4__HierarchyInfo(struct soap*, ns4__HierarchyInfo *, const char*, const char*);

#ifndef soap_read_ns4__HierarchyInfo
#define soap_read_ns4__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__HierarchyInfo * SOAP_FMAC2 soap_instantiate_ns4__HierarchyInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__HierarchyInfo * soap_new_ns4__HierarchyInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__HierarchyInfo(soap, n, NULL, NULL, NULL); }

inline ns4__HierarchyInfo * soap_new_req_ns4__HierarchyInfo(struct soap *soap) { ns4__HierarchyInfo *_p = soap_instantiate_ns4__HierarchyInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__HierarchyInfo * soap_new_set_ns4__HierarchyInfo(struct soap *soap, std::vector<char * >& __any, std::string *name) { ns4__HierarchyInfo *_p = soap_instantiate_ns4__HierarchyInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__HierarchyInfo::__any = __any; _p->ns4__HierarchyInfo::name = name; } return _p; }

inline void soap_delete_ns4__HierarchyInfo(struct soap *soap, ns4__HierarchyInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__HierarchyInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__AxisInfo
#define SOAP_TYPE_ns4__AxisInfo (182)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__AxisInfo(struct soap*, const char*, int, const ns4__AxisInfo *, const char*);
SOAP_FMAC3 ns4__AxisInfo * SOAP_FMAC4 soap_in_ns4__AxisInfo(struct soap*, const char*, ns4__AxisInfo *, const char*);

#ifndef soap_write_ns4__AxisInfo
#define soap_write_ns4__AxisInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:AxisInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__AxisInfo * SOAP_FMAC4 soap_get_ns4__AxisInfo(struct soap*, ns4__AxisInfo *, const char*, const char*);

#ifndef soap_read_ns4__AxisInfo
#define soap_read_ns4__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__AxisInfo * SOAP_FMAC2 soap_instantiate_ns4__AxisInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__AxisInfo * soap_new_ns4__AxisInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__AxisInfo(soap, n, NULL, NULL, NULL); }

inline ns4__AxisInfo * soap_new_req_ns4__AxisInfo(struct soap *soap) { ns4__AxisInfo *_p = soap_instantiate_ns4__AxisInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__AxisInfo * soap_new_set_ns4__AxisInfo(struct soap *soap, std::vector<ns4__HierarchyInfo * >& HierarchyInfo, std::string *name) { ns4__AxisInfo *_p = soap_instantiate_ns4__AxisInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__AxisInfo::HierarchyInfo = HierarchyInfo; _p->ns4__AxisInfo::name = name; } return _p; }

inline void soap_delete_ns4__AxisInfo(struct soap *soap, ns4__AxisInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__AxisInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__AxesInfo
#define SOAP_TYPE_ns4__AxesInfo (181)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__AxesInfo(struct soap*, const char*, int, const ns4__AxesInfo *, const char*);
SOAP_FMAC3 ns4__AxesInfo * SOAP_FMAC4 soap_in_ns4__AxesInfo(struct soap*, const char*, ns4__AxesInfo *, const char*);

#ifndef soap_write_ns4__AxesInfo
#define soap_write_ns4__AxesInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:AxesInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__AxesInfo * SOAP_FMAC4 soap_get_ns4__AxesInfo(struct soap*, ns4__AxesInfo *, const char*, const char*);

#ifndef soap_read_ns4__AxesInfo
#define soap_read_ns4__AxesInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__AxesInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__AxesInfo * SOAP_FMAC2 soap_instantiate_ns4__AxesInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__AxesInfo * soap_new_ns4__AxesInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__AxesInfo(soap, n, NULL, NULL, NULL); }

inline ns4__AxesInfo * soap_new_req_ns4__AxesInfo(struct soap *soap) { ns4__AxesInfo *_p = soap_instantiate_ns4__AxesInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__AxesInfo * soap_new_set_ns4__AxesInfo(struct soap *soap, std::vector<ns4__AxisInfo * >& AxisInfo) { ns4__AxesInfo *_p = soap_instantiate_ns4__AxesInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__AxesInfo::AxisInfo = AxisInfo; } return _p; }

inline void soap_delete_ns4__AxesInfo(struct soap *soap, ns4__AxesInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__AxesInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Cube
#define SOAP_TYPE_ns4__Cube (180)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Cube(struct soap*, const char*, int, const ns4__Cube *, const char*);
SOAP_FMAC3 ns4__Cube * SOAP_FMAC4 soap_in_ns4__Cube(struct soap*, const char*, ns4__Cube *, const char*);

#ifndef soap_write_ns4__Cube
#define soap_write_ns4__Cube(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Cube", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Cube * SOAP_FMAC4 soap_get_ns4__Cube(struct soap*, ns4__Cube *, const char*, const char*);

#ifndef soap_read_ns4__Cube
#define soap_read_ns4__Cube(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Cube(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Cube * SOAP_FMAC2 soap_instantiate_ns4__Cube(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Cube * soap_new_ns4__Cube(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Cube(soap, n, NULL, NULL, NULL); }

inline ns4__Cube * soap_new_req_ns4__Cube(struct soap *soap) { ns4__Cube *_p = soap_instantiate_ns4__Cube(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__Cube * soap_new_set_ns4__Cube(struct soap *soap, std::string *CubeName) { ns4__Cube *_p = soap_instantiate_ns4__Cube(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Cube::CubeName = CubeName; } return _p; }

inline void soap_delete_ns4__Cube(struct soap *soap, ns4__Cube *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Cube(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__CubeInfo
#define SOAP_TYPE_ns4__CubeInfo (179)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__CubeInfo(struct soap*, const char*, int, const ns4__CubeInfo *, const char*);
SOAP_FMAC3 ns4__CubeInfo * SOAP_FMAC4 soap_in_ns4__CubeInfo(struct soap*, const char*, ns4__CubeInfo *, const char*);

#ifndef soap_write_ns4__CubeInfo
#define soap_write_ns4__CubeInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:CubeInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CubeInfo * SOAP_FMAC4 soap_get_ns4__CubeInfo(struct soap*, ns4__CubeInfo *, const char*, const char*);

#ifndef soap_read_ns4__CubeInfo
#define soap_read_ns4__CubeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__CubeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__CubeInfo * SOAP_FMAC2 soap_instantiate_ns4__CubeInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__CubeInfo * soap_new_ns4__CubeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__CubeInfo(soap, n, NULL, NULL, NULL); }

inline ns4__CubeInfo * soap_new_req_ns4__CubeInfo(struct soap *soap) { ns4__CubeInfo *_p = soap_instantiate_ns4__CubeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__CubeInfo * soap_new_set_ns4__CubeInfo(struct soap *soap, std::vector<ns4__Cube * >& Cube) { ns4__CubeInfo *_p = soap_instantiate_ns4__CubeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__CubeInfo::Cube = Cube; } return _p; }

inline void soap_delete_ns4__CubeInfo(struct soap *soap, ns4__CubeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__CubeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__OlapInfo
#define SOAP_TYPE_ns4__OlapInfo (178)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__OlapInfo(struct soap*, const char*, int, const ns4__OlapInfo *, const char*);
SOAP_FMAC3 ns4__OlapInfo * SOAP_FMAC4 soap_in_ns4__OlapInfo(struct soap*, const char*, ns4__OlapInfo *, const char*);

#ifndef soap_write_ns4__OlapInfo
#define soap_write_ns4__OlapInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:OlapInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__OlapInfo * SOAP_FMAC4 soap_get_ns4__OlapInfo(struct soap*, ns4__OlapInfo *, const char*, const char*);

#ifndef soap_read_ns4__OlapInfo
#define soap_read_ns4__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__OlapInfo * SOAP_FMAC2 soap_instantiate_ns4__OlapInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns4__OlapInfo * soap_new_ns4__OlapInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns4__OlapInfo(soap, n, NULL, NULL, NULL); }

inline ns4__OlapInfo * soap_new_req_ns4__OlapInfo(struct soap *soap) { ns4__OlapInfo *_p = soap_instantiate_ns4__OlapInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__OlapInfo * soap_new_set_ns4__OlapInfo(struct soap *soap, ns4__CubeInfo *CubeInfo, ns4__AxesInfo *AxesInfo, ns4__CellInfo *CellInfo) { ns4__OlapInfo *_p = soap_instantiate_ns4__OlapInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__OlapInfo::CubeInfo = CubeInfo; _p->ns4__OlapInfo::AxesInfo = AxesInfo; _p->ns4__OlapInfo::CellInfo = CellInfo; } return _p; }

inline void soap_delete_ns4__OlapInfo(struct soap *soap, ns4__OlapInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__OlapInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Row
#define SOAP_TYPE_ns4__Row (177)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Row(struct soap*, const char*, int, const ns4__Row *, const char*);
SOAP_FMAC3 ns4__Row * SOAP_FMAC4 soap_in_ns4__Row(struct soap*, const char*, ns4__Row *, const char*);

#ifndef soap_write_ns4__Row
#define soap_write_ns4__Row(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Row", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Row * SOAP_FMAC4 soap_get_ns4__Row(struct soap*, ns4__Row *, const char*, const char*);

#ifndef soap_read_ns4__Row
#define soap_read_ns4__Row(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Row(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Row * SOAP_FMAC2 soap_instantiate_ns4__Row(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Row * soap_new_ns4__Row(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Row(soap, n, NULL, NULL, NULL); }

inline ns4__Row * soap_new_req_ns4__Row(struct soap *soap) { ns4__Row *_p = soap_instantiate_ns4__Row(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__Row * soap_new_set_ns4__Row(struct soap *soap, std::vector<char * >& __any) { ns4__Row *_p = soap_instantiate_ns4__Row(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Row::__any = __any; } return _p; }

inline void soap_delete_ns4__Row(struct soap *soap, ns4__Row *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Row(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Members
#define SOAP_TYPE_ns4__Members (176)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Members(struct soap*, const char*, int, const ns4__Members *, const char*);
SOAP_FMAC3 ns4__Members * SOAP_FMAC4 soap_in_ns4__Members(struct soap*, const char*, ns4__Members *, const char*);

#ifndef soap_write_ns4__Members
#define soap_write_ns4__Members(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Members", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Members * SOAP_FMAC4 soap_get_ns4__Members(struct soap*, ns4__Members *, const char*, const char*);

#ifndef soap_read_ns4__Members
#define soap_read_ns4__Members(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Members(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Members * SOAP_FMAC2 soap_instantiate_ns4__Members(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Members * soap_new_ns4__Members(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Members(soap, n, NULL, NULL, NULL); }

inline ns4__Members * soap_new_req_ns4__Members(struct soap *soap) { ns4__Members *_p = soap_instantiate_ns4__Members(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__Members * soap_new_set_ns4__Members(struct soap *soap, std::vector<ns4__Member * >& Member, std::string *Hierarchy) { ns4__Members *_p = soap_instantiate_ns4__Members(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Members::Member = Member; _p->ns4__Members::Hierarchy = Hierarchy; } return _p; }

inline void soap_delete_ns4__Members(struct soap *soap, ns4__Members *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Members(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__CrossProduct
#define SOAP_TYPE_ns4__CrossProduct (175)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__CrossProduct(struct soap*, const char*, int, const ns4__CrossProduct *, const char*);
SOAP_FMAC3 ns4__CrossProduct * SOAP_FMAC4 soap_in_ns4__CrossProduct(struct soap*, const char*, ns4__CrossProduct *, const char*);

#ifndef soap_write_ns4__CrossProduct
#define soap_write_ns4__CrossProduct(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:CrossProduct", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CrossProduct * SOAP_FMAC4 soap_get_ns4__CrossProduct(struct soap*, ns4__CrossProduct *, const char*, const char*);

#ifndef soap_read_ns4__CrossProduct
#define soap_read_ns4__CrossProduct(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__CrossProduct(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__CrossProduct * SOAP_FMAC2 soap_instantiate_ns4__CrossProduct(struct soap*, int, const char*, const char*, size_t*);

inline ns4__CrossProduct * soap_new_ns4__CrossProduct(struct soap *soap, int n = -1) { return soap_instantiate_ns4__CrossProduct(soap, n, NULL, NULL, NULL); }

inline ns4__CrossProduct * soap_new_req_ns4__CrossProduct(struct soap *soap, int Size) { ns4__CrossProduct *_p = soap_instantiate_ns4__CrossProduct(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__CrossProduct::Size = Size; } return _p; }

inline ns4__CrossProduct * soap_new_set_ns4__CrossProduct(struct soap *soap, std::vector<ns4__Members * >& Members, int Size) { ns4__CrossProduct *_p = soap_instantiate_ns4__CrossProduct(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__CrossProduct::Members = Members; _p->ns4__CrossProduct::Size = Size; } return _p; }

inline void soap_delete_ns4__CrossProduct(struct soap *soap, ns4__CrossProduct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__CrossProduct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Member
#define SOAP_TYPE_ns4__Member (174)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Member(struct soap*, const char*, int, const ns4__Member *, const char*);
SOAP_FMAC3 ns4__Member * SOAP_FMAC4 soap_in_ns4__Member(struct soap*, const char*, ns4__Member *, const char*);

#ifndef soap_write_ns4__Member
#define soap_write_ns4__Member(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Member * SOAP_FMAC4 soap_get_ns4__Member(struct soap*, ns4__Member *, const char*, const char*);

#ifndef soap_read_ns4__Member
#define soap_read_ns4__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Member(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Member * SOAP_FMAC2 soap_instantiate_ns4__Member(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Member * soap_new_ns4__Member(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Member(soap, n, NULL, NULL, NULL); }

inline ns4__Member * soap_new_req_ns4__Member(struct soap *soap) { ns4__Member *_p = soap_instantiate_ns4__Member(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__Member * soap_new_set_ns4__Member(struct soap *soap, std::string *UName, std::string *Caption, std::string *LName, std::string *LNum, std::string *DisplayInfo, std::vector<char * >& __any, std::string *Hierarchy) { ns4__Member *_p = soap_instantiate_ns4__Member(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Member::UName = UName; _p->ns4__Member::Caption = Caption; _p->ns4__Member::LName = LName; _p->ns4__Member::LNum = LNum; _p->ns4__Member::DisplayInfo = DisplayInfo; _p->ns4__Member::__any = __any; _p->ns4__Member::Hierarchy = Hierarchy; } return _p; }

inline void soap_delete_ns4__Member(struct soap *soap, ns4__Member *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Tuple
#define SOAP_TYPE_ns4__Tuple (173)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Tuple(struct soap*, const char*, int, const ns4__Tuple *, const char*);
SOAP_FMAC3 ns4__Tuple * SOAP_FMAC4 soap_in_ns4__Tuple(struct soap*, const char*, ns4__Tuple *, const char*);

#ifndef soap_write_ns4__Tuple
#define soap_write_ns4__Tuple(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Tuple", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Tuple * SOAP_FMAC4 soap_get_ns4__Tuple(struct soap*, ns4__Tuple *, const char*, const char*);

#ifndef soap_read_ns4__Tuple
#define soap_read_ns4__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Tuple * SOAP_FMAC2 soap_instantiate_ns4__Tuple(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Tuple * soap_new_ns4__Tuple(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Tuple(soap, n, NULL, NULL, NULL); }

inline ns4__Tuple * soap_new_req_ns4__Tuple(struct soap *soap) { ns4__Tuple *_p = soap_instantiate_ns4__Tuple(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__Tuple * soap_new_set_ns4__Tuple(struct soap *soap, std::vector<ns4__Member * >& Member) { ns4__Tuple *_p = soap_instantiate_ns4__Tuple(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Tuple::Member = Member; } return _p; }

inline void soap_delete_ns4__Tuple(struct soap *soap, ns4__Tuple *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Tuple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Tuples
#define SOAP_TYPE_ns4__Tuples (172)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Tuples(struct soap*, const char*, int, const ns4__Tuples *, const char*);
SOAP_FMAC3 ns4__Tuples * SOAP_FMAC4 soap_in_ns4__Tuples(struct soap*, const char*, ns4__Tuples *, const char*);

#ifndef soap_write_ns4__Tuples
#define soap_write_ns4__Tuples(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Tuples", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Tuples * SOAP_FMAC4 soap_get_ns4__Tuples(struct soap*, ns4__Tuples *, const char*, const char*);

#ifndef soap_read_ns4__Tuples
#define soap_read_ns4__Tuples(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Tuples(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Tuples * SOAP_FMAC2 soap_instantiate_ns4__Tuples(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Tuples * soap_new_ns4__Tuples(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Tuples(soap, n, NULL, NULL, NULL); }

inline ns4__Tuples * soap_new_req_ns4__Tuples(struct soap *soap) { ns4__Tuples *_p = soap_instantiate_ns4__Tuples(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__Tuples * soap_new_set_ns4__Tuples(struct soap *soap, std::vector<ns4__Tuple * >& Tuple) { ns4__Tuples *_p = soap_instantiate_ns4__Tuples(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Tuples::Tuple = Tuple; } return _p; }

inline void soap_delete_ns4__Tuples(struct soap *soap, ns4__Tuples *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Tuples(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Axis
#define SOAP_TYPE_ns4__Axis (171)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Axis(struct soap*, const char*, int, const ns4__Axis *, const char*);
SOAP_FMAC3 ns4__Axis * SOAP_FMAC4 soap_in_ns4__Axis(struct soap*, const char*, ns4__Axis *, const char*);

#ifndef soap_write_ns4__Axis
#define soap_write_ns4__Axis(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Axis * SOAP_FMAC4 soap_get_ns4__Axis(struct soap*, ns4__Axis *, const char*, const char*);

#ifndef soap_read_ns4__Axis
#define soap_read_ns4__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Axis * SOAP_FMAC2 soap_instantiate_ns4__Axis(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Axis * soap_new_ns4__Axis(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Axis(soap, n, NULL, NULL, NULL); }

inline ns4__Axis * soap_new_req_ns4__Axis(struct soap *soap, int __size_Axis, __ns4__union_Axis *__union_Axis) { ns4__Axis *_p = soap_instantiate_ns4__Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Axis::__size_Axis = __size_Axis; _p->ns4__Axis::__union_Axis = __union_Axis; } return _p; }

inline ns4__Axis * soap_new_set_ns4__Axis(struct soap *soap, int __size_Axis, __ns4__union_Axis *__union_Axis, std::string *name) { ns4__Axis *_p = soap_instantiate_ns4__Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Axis::__size_Axis = __size_Axis; _p->ns4__Axis::__union_Axis = __union_Axis; _p->ns4__Axis::name = name; } return _p; }

inline void soap_delete_ns4__Axis(struct soap *soap, ns4__Axis *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Axes
#define SOAP_TYPE_ns4__Axes (170)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Axes(struct soap*, const char*, int, const ns4__Axes *, const char*);
SOAP_FMAC3 ns4__Axes * SOAP_FMAC4 soap_in_ns4__Axes(struct soap*, const char*, ns4__Axes *, const char*);

#ifndef soap_write_ns4__Axes
#define soap_write_ns4__Axes(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Axes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Axes * SOAP_FMAC4 soap_get_ns4__Axes(struct soap*, ns4__Axes *, const char*, const char*);

#ifndef soap_read_ns4__Axes
#define soap_read_ns4__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Axes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Axes * SOAP_FMAC2 soap_instantiate_ns4__Axes(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Axes * soap_new_ns4__Axes(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Axes(soap, n, NULL, NULL, NULL); }

inline ns4__Axes * soap_new_req_ns4__Axes(struct soap *soap) { ns4__Axes *_p = soap_instantiate_ns4__Axes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__Axes * soap_new_set_ns4__Axes(struct soap *soap, std::vector<ns4__Axis * >& Axis) { ns4__Axes *_p = soap_instantiate_ns4__Axes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Axes::Axis = Axis; } return _p; }

inline void soap_delete_ns4__Axes(struct soap *soap, ns4__Axes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Axes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__Cell
#define SOAP_TYPE_ns4__Cell (169)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__Cell(struct soap*, const char*, int, const ns4__Cell *, const char*);
SOAP_FMAC3 ns4__Cell * SOAP_FMAC4 soap_in_ns4__Cell(struct soap*, const char*, ns4__Cell *, const char*);

#ifndef soap_write_ns4__Cell
#define soap_write_ns4__Cell(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:Cell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Cell * SOAP_FMAC4 soap_get_ns4__Cell(struct soap*, ns4__Cell *, const char*, const char*);

#ifndef soap_read_ns4__Cell
#define soap_read_ns4__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__Cell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__Cell * SOAP_FMAC2 soap_instantiate_ns4__Cell(struct soap*, int, const char*, const char*, size_t*);

inline ns4__Cell * soap_new_ns4__Cell(struct soap *soap, int n = -1) { return soap_instantiate_ns4__Cell(soap, n, NULL, NULL, NULL); }

inline ns4__Cell * soap_new_req_ns4__Cell(struct soap *soap, int CellOrdinal) { ns4__Cell *_p = soap_instantiate_ns4__Cell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Cell::CellOrdinal = CellOrdinal; } return _p; }

inline ns4__Cell * soap_new_set_ns4__Cell(struct soap *soap, double *Value, std::vector<char * >& __any, int CellOrdinal) { ns4__Cell *_p = soap_instantiate_ns4__Cell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__Cell::Value = Value; _p->ns4__Cell::__any = __any; _p->ns4__Cell::CellOrdinal = CellOrdinal; } return _p; }

inline void soap_delete_ns4__Cell(struct soap *soap, ns4__Cell *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__Cell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__CellData
#define SOAP_TYPE_ns4__CellData (168)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__CellData(struct soap*, const char*, int, const ns4__CellData *, const char*);
SOAP_FMAC3 ns4__CellData * SOAP_FMAC4 soap_in_ns4__CellData(struct soap*, const char*, ns4__CellData *, const char*);

#ifndef soap_write_ns4__CellData
#define soap_write_ns4__CellData(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:CellData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CellData * SOAP_FMAC4 soap_get_ns4__CellData(struct soap*, ns4__CellData *, const char*, const char*);

#ifndef soap_read_ns4__CellData
#define soap_read_ns4__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__CellData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__CellData * SOAP_FMAC2 soap_instantiate_ns4__CellData(struct soap*, int, const char*, const char*, size_t*);

inline ns4__CellData * soap_new_ns4__CellData(struct soap *soap, int n = -1) { return soap_instantiate_ns4__CellData(soap, n, NULL, NULL, NULL); }

inline ns4__CellData * soap_new_req_ns4__CellData(struct soap *soap) { ns4__CellData *_p = soap_instantiate_ns4__CellData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns4__CellData * soap_new_set_ns4__CellData(struct soap *soap, std::vector<ns4__Cell * >& Cell) { ns4__CellData *_p = soap_instantiate_ns4__CellData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__CellData::Cell = Cell; } return _p; }

inline void soap_delete_ns4__CellData(struct soap *soap, ns4__CellData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__CellData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns4__ResultXmlRoot
#define SOAP_TYPE_ns4__ResultXmlRoot (167)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__ResultXmlRoot(struct soap*, const char*, int, const ns4__ResultXmlRoot *, const char*);
SOAP_FMAC3 ns4__ResultXmlRoot * SOAP_FMAC4 soap_in_ns4__ResultXmlRoot(struct soap*, const char*, ns4__ResultXmlRoot *, const char*);

#ifndef soap_write_ns4__ResultXmlRoot
#define soap_write_ns4__ResultXmlRoot(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns4:ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__ResultXmlRoot * SOAP_FMAC4 soap_get_ns4__ResultXmlRoot(struct soap*, ns4__ResultXmlRoot *, const char*, const char*);

#ifndef soap_read_ns4__ResultXmlRoot
#define soap_read_ns4__ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_ns4__ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns4__ResultXmlRoot * SOAP_FMAC2 soap_instantiate_ns4__ResultXmlRoot(struct soap*, int, const char*, const char*, size_t*);

inline ns4__ResultXmlRoot * soap_new_ns4__ResultXmlRoot(struct soap *soap, int n = -1) { return soap_instantiate_ns4__ResultXmlRoot(soap, n, NULL, NULL, NULL); }

inline ns4__ResultXmlRoot * soap_new_req_ns4__ResultXmlRoot(struct soap *soap, int __size_ResultXmlRoot, __ns4__union_ResultXmlRoot *__union_ResultXmlRoot) { ns4__ResultXmlRoot *_p = soap_instantiate_ns4__ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ResultXmlRoot::__size_ResultXmlRoot = __size_ResultXmlRoot; _p->ns4__ResultXmlRoot::__union_ResultXmlRoot = __union_ResultXmlRoot; } return _p; }

inline ns4__ResultXmlRoot * soap_new_set_ns4__ResultXmlRoot(struct soap *soap, char *xsd__schema, int __size_ResultXmlRoot, __ns4__union_ResultXmlRoot *__union_ResultXmlRoot) { ns4__ResultXmlRoot *_p = soap_instantiate_ns4__ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns4__ResultXmlRoot::xsd__schema = xsd__schema; _p->ns4__ResultXmlRoot::__size_ResultXmlRoot = __size_ResultXmlRoot; _p->ns4__ResultXmlRoot::__union_ResultXmlRoot = __union_ResultXmlRoot; } return _p; }

inline void soap_delete_ns4__ResultXmlRoot(struct soap *soap, ns4__ResultXmlRoot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__ResultXmlRoot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaInclude
#define SOAP_TYPE_ns3__XmlSchemaInclude (166)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaInclude(struct soap*, const char*, int, const ns3__XmlSchemaInclude *, const char*);
SOAP_FMAC3 ns3__XmlSchemaInclude * SOAP_FMAC4 soap_in_ns3__XmlSchemaInclude(struct soap*, const char*, ns3__XmlSchemaInclude *, const char*);

#ifndef soap_write_ns3__XmlSchemaInclude
#define soap_write_ns3__XmlSchemaInclude(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaInclude", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaInclude * SOAP_FMAC4 soap_get_ns3__XmlSchemaInclude(struct soap*, ns3__XmlSchemaInclude *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaInclude
#define soap_read_ns3__XmlSchemaInclude(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaInclude(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaInclude * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaInclude(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaInclude * soap_new_ns3__XmlSchemaInclude(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaInclude(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaInclude * soap_new_req_ns3__XmlSchemaInclude(struct soap *soap) { ns3__XmlSchemaInclude *_p = soap_instantiate_ns3__XmlSchemaInclude(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaInclude * soap_new_set_ns3__XmlSchemaInclude(struct soap *soap, std::string *annotation) { ns3__XmlSchemaInclude *_p = soap_instantiate_ns3__XmlSchemaInclude(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaInclude::annotation = annotation; } return _p; }

inline void soap_delete_ns3__XmlSchemaInclude(struct soap *soap, ns3__XmlSchemaInclude *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaInclude(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaRedefine
#define SOAP_TYPE_ns3__XmlSchemaRedefine (165)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaRedefine(struct soap*, const char*, int, const ns3__XmlSchemaRedefine *, const char*);
SOAP_FMAC3 ns3__XmlSchemaRedefine * SOAP_FMAC4 soap_in_ns3__XmlSchemaRedefine(struct soap*, const char*, ns3__XmlSchemaRedefine *, const char*);

#ifndef soap_write_ns3__XmlSchemaRedefine
#define soap_write_ns3__XmlSchemaRedefine(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaRedefine", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaRedefine * SOAP_FMAC4 soap_get_ns3__XmlSchemaRedefine(struct soap*, ns3__XmlSchemaRedefine *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaRedefine
#define soap_read_ns3__XmlSchemaRedefine(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaRedefine(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaRedefine * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaRedefine(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaRedefine * soap_new_ns3__XmlSchemaRedefine(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaRedefine(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaRedefine * soap_new_req_ns3__XmlSchemaRedefine(struct soap *soap, int __size_XmlSchemaRedefine, __ns3__union_XmlSchemaRedefine *__union_XmlSchemaRedefine) { ns3__XmlSchemaRedefine *_p = soap_instantiate_ns3__XmlSchemaRedefine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaRedefine::__size_XmlSchemaRedefine = __size_XmlSchemaRedefine; _p->ns3__XmlSchemaRedefine::__union_XmlSchemaRedefine = __union_XmlSchemaRedefine; } return _p; }

inline ns3__XmlSchemaRedefine * soap_new_set_ns3__XmlSchemaRedefine(struct soap *soap, int __size_XmlSchemaRedefine, __ns3__union_XmlSchemaRedefine *__union_XmlSchemaRedefine) { ns3__XmlSchemaRedefine *_p = soap_instantiate_ns3__XmlSchemaRedefine(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaRedefine::__size_XmlSchemaRedefine = __size_XmlSchemaRedefine; _p->ns3__XmlSchemaRedefine::__union_XmlSchemaRedefine = __union_XmlSchemaRedefine; } return _p; }

inline void soap_delete_ns3__XmlSchemaRedefine(struct soap *soap, ns3__XmlSchemaRedefine *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaRedefine(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaImport
#define SOAP_TYPE_ns3__XmlSchemaImport (164)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaImport(struct soap*, const char*, int, const ns3__XmlSchemaImport *, const char*);
SOAP_FMAC3 ns3__XmlSchemaImport * SOAP_FMAC4 soap_in_ns3__XmlSchemaImport(struct soap*, const char*, ns3__XmlSchemaImport *, const char*);

#ifndef soap_write_ns3__XmlSchemaImport
#define soap_write_ns3__XmlSchemaImport(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaImport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaImport * SOAP_FMAC4 soap_get_ns3__XmlSchemaImport(struct soap*, ns3__XmlSchemaImport *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaImport
#define soap_read_ns3__XmlSchemaImport(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaImport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaImport * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaImport(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaImport * soap_new_ns3__XmlSchemaImport(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaImport(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaImport * soap_new_req_ns3__XmlSchemaImport(struct soap *soap) { ns3__XmlSchemaImport *_p = soap_instantiate_ns3__XmlSchemaImport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaImport * soap_new_set_ns3__XmlSchemaImport(struct soap *soap, std::string *annotation, std::string *namespace_) { ns3__XmlSchemaImport *_p = soap_instantiate_ns3__XmlSchemaImport(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaImport::annotation = annotation; _p->ns3__XmlSchemaImport::namespace_ = namespace_; } return _p; }

inline void soap_delete_ns3__XmlSchemaImport(struct soap *soap, ns3__XmlSchemaImport *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaImport(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaExternal
#define SOAP_TYPE_ns3__XmlSchemaExternal (163)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaExternal(struct soap*, const char*, int, const ns3__XmlSchemaExternal *, const char*);
SOAP_FMAC3 ns3__XmlSchemaExternal * SOAP_FMAC4 soap_in_ns3__XmlSchemaExternal(struct soap*, const char*, ns3__XmlSchemaExternal *, const char*);

#ifndef soap_write_ns3__XmlSchemaExternal
#define soap_write_ns3__XmlSchemaExternal(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaExternal", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaExternal * SOAP_FMAC4 soap_get_ns3__XmlSchemaExternal(struct soap*, ns3__XmlSchemaExternal *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaExternal
#define soap_read_ns3__XmlSchemaExternal(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaExternal(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaExternal * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaExternal(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaExternal * soap_new_ns3__XmlSchemaExternal(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaExternal(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaExternal * soap_new_req_ns3__XmlSchemaExternal(struct soap *soap) { ns3__XmlSchemaExternal *_p = soap_instantiate_ns3__XmlSchemaExternal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaExternal * soap_new_set_ns3__XmlSchemaExternal(struct soap *soap, std::string *schemaLocation, std::string *id, char *__anyAttribute) { ns3__XmlSchemaExternal *_p = soap_instantiate_ns3__XmlSchemaExternal(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaExternal::schemaLocation = schemaLocation; _p->ns3__XmlSchemaExternal::id = id; _p->ns3__XmlSchemaExternal::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__XmlSchemaExternal(struct soap *soap, ns3__XmlSchemaExternal *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaExternal(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaGroup
#define SOAP_TYPE_ns3__XmlSchemaGroup (162)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaGroup(struct soap*, const char*, int, const ns3__XmlSchemaGroup *, const char*);
SOAP_FMAC3 ns3__XmlSchemaGroup * SOAP_FMAC4 soap_in_ns3__XmlSchemaGroup(struct soap*, const char*, ns3__XmlSchemaGroup *, const char*);

#ifndef soap_write_ns3__XmlSchemaGroup
#define soap_write_ns3__XmlSchemaGroup(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaGroup * SOAP_FMAC4 soap_get_ns3__XmlSchemaGroup(struct soap*, ns3__XmlSchemaGroup *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaGroup
#define soap_read_ns3__XmlSchemaGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaGroup * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaGroup(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaGroup * soap_new_ns3__XmlSchemaGroup(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaGroup(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaGroup * soap_new_req_ns3__XmlSchemaGroup(struct soap *soap) { ns3__XmlSchemaGroup *_p = soap_instantiate_ns3__XmlSchemaGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaGroup * soap_new_set_ns3__XmlSchemaGroup(struct soap *soap, std::string *sequence, std::string *choice, std::string *all, std::string *name) { ns3__XmlSchemaGroup *_p = soap_instantiate_ns3__XmlSchemaGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaGroup::sequence = sequence; _p->ns3__XmlSchemaGroup::choice = choice; _p->ns3__XmlSchemaGroup::all = all; _p->ns3__XmlSchemaGroup::name = name; } return _p; }

inline void soap_delete_ns3__XmlSchemaGroup(struct soap *soap, ns3__XmlSchemaGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleTypeList
#define SOAP_TYPE_ns3__XmlSchemaSimpleTypeList (161)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleTypeList(struct soap*, const char*, int, const ns3__XmlSchemaSimpleTypeList *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleTypeList * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleTypeList(struct soap*, const char*, ns3__XmlSchemaSimpleTypeList *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleTypeList
#define soap_write_ns3__XmlSchemaSimpleTypeList(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleTypeList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleTypeList * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleTypeList(struct soap*, ns3__XmlSchemaSimpleTypeList *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleTypeList
#define soap_read_ns3__XmlSchemaSimpleTypeList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleTypeList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleTypeList * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleTypeList(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleTypeList * soap_new_ns3__XmlSchemaSimpleTypeList(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleTypeList(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleTypeList * soap_new_req_ns3__XmlSchemaSimpleTypeList(struct soap *soap) { ns3__XmlSchemaSimpleTypeList *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaSimpleTypeList * soap_new_set_ns3__XmlSchemaSimpleTypeList(struct soap *soap, std::string *simpleType, std::string *itemType) { ns3__XmlSchemaSimpleTypeList *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleTypeList::simpleType = simpleType; _p->ns3__XmlSchemaSimpleTypeList::itemType = itemType; } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleTypeList(struct soap *soap, ns3__XmlSchemaSimpleTypeList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleTypeList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleTypeRestriction
#define SOAP_TYPE_ns3__XmlSchemaSimpleTypeRestriction (160)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleTypeRestriction(struct soap*, const char*, int, const ns3__XmlSchemaSimpleTypeRestriction *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleTypeRestriction * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleTypeRestriction(struct soap*, const char*, ns3__XmlSchemaSimpleTypeRestriction *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleTypeRestriction
#define soap_write_ns3__XmlSchemaSimpleTypeRestriction(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleTypeRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleTypeRestriction * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleTypeRestriction(struct soap*, ns3__XmlSchemaSimpleTypeRestriction *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleTypeRestriction
#define soap_read_ns3__XmlSchemaSimpleTypeRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleTypeRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleTypeRestriction * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleTypeRestriction(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleTypeRestriction * soap_new_ns3__XmlSchemaSimpleTypeRestriction(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleTypeRestriction(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleTypeRestriction * soap_new_req_ns3__XmlSchemaSimpleTypeRestriction(struct soap *soap, int __size_XmlSchemaSimpleTypeRestriction, __ns3__union_XmlSchemaSimpleTypeRestriction *__union_XmlSchemaSimpleTypeRestriction) { ns3__XmlSchemaSimpleTypeRestriction *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleTypeRestriction::__size_XmlSchemaSimpleTypeRestriction = __size_XmlSchemaSimpleTypeRestriction; _p->ns3__XmlSchemaSimpleTypeRestriction::__union_XmlSchemaSimpleTypeRestriction = __union_XmlSchemaSimpleTypeRestriction; } return _p; }

inline ns3__XmlSchemaSimpleTypeRestriction * soap_new_set_ns3__XmlSchemaSimpleTypeRestriction(struct soap *soap, std::string *simpleType, int __size_XmlSchemaSimpleTypeRestriction, __ns3__union_XmlSchemaSimpleTypeRestriction *__union_XmlSchemaSimpleTypeRestriction, std::string *base) { ns3__XmlSchemaSimpleTypeRestriction *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleTypeRestriction::simpleType = simpleType; _p->ns3__XmlSchemaSimpleTypeRestriction::__size_XmlSchemaSimpleTypeRestriction = __size_XmlSchemaSimpleTypeRestriction; _p->ns3__XmlSchemaSimpleTypeRestriction::__union_XmlSchemaSimpleTypeRestriction = __union_XmlSchemaSimpleTypeRestriction; _p->ns3__XmlSchemaSimpleTypeRestriction::base = base; } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleTypeRestriction(struct soap *soap, ns3__XmlSchemaSimpleTypeRestriction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleTypeRestriction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleTypeContent
#define SOAP_TYPE_ns3__XmlSchemaSimpleTypeContent (159)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleTypeContent(struct soap*, const char*, int, const ns3__XmlSchemaSimpleTypeContent *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleTypeContent * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleTypeContent(struct soap*, const char*, ns3__XmlSchemaSimpleTypeContent *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleTypeContent
#define soap_write_ns3__XmlSchemaSimpleTypeContent(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleTypeContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleTypeContent * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleTypeContent(struct soap*, ns3__XmlSchemaSimpleTypeContent *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleTypeContent
#define soap_read_ns3__XmlSchemaSimpleTypeContent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleTypeContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleTypeContent * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleTypeContent(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleTypeContent * soap_new_ns3__XmlSchemaSimpleTypeContent(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleTypeContent(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleTypeContent * soap_new_req_ns3__XmlSchemaSimpleTypeContent(struct soap *soap) { ns3__XmlSchemaSimpleTypeContent *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaSimpleTypeContent * soap_new_set_ns3__XmlSchemaSimpleTypeContent(struct soap *soap) { ns3__XmlSchemaSimpleTypeContent *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleTypeContent(struct soap *soap, ns3__XmlSchemaSimpleTypeContent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleTypeContent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleTypeUnion
#define SOAP_TYPE_ns3__XmlSchemaSimpleTypeUnion (158)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleTypeUnion(struct soap*, const char*, int, const ns3__XmlSchemaSimpleTypeUnion *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleTypeUnion * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleTypeUnion(struct soap*, const char*, ns3__XmlSchemaSimpleTypeUnion *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleTypeUnion
#define soap_write_ns3__XmlSchemaSimpleTypeUnion(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleTypeUnion", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleTypeUnion * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleTypeUnion(struct soap*, ns3__XmlSchemaSimpleTypeUnion *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleTypeUnion
#define soap_read_ns3__XmlSchemaSimpleTypeUnion(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleTypeUnion(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleTypeUnion * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleTypeUnion(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleTypeUnion * soap_new_ns3__XmlSchemaSimpleTypeUnion(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleTypeUnion(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleTypeUnion * soap_new_req_ns3__XmlSchemaSimpleTypeUnion(struct soap *soap) { ns3__XmlSchemaSimpleTypeUnion *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeUnion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaSimpleTypeUnion * soap_new_set_ns3__XmlSchemaSimpleTypeUnion(struct soap *soap, std::vector<std::string >& simpleType, std::string *memberTypes) { ns3__XmlSchemaSimpleTypeUnion *_p = soap_instantiate_ns3__XmlSchemaSimpleTypeUnion(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleTypeUnion::simpleType = simpleType; _p->ns3__XmlSchemaSimpleTypeUnion::memberTypes = memberTypes; } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleTypeUnion(struct soap *soap, ns3__XmlSchemaSimpleTypeUnion *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleTypeUnion(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaMaxExclusiveFacet
#define SOAP_TYPE_ns3__XmlSchemaMaxExclusiveFacet (157)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaMaxExclusiveFacet(struct soap*, const char*, int, const ns3__XmlSchemaMaxExclusiveFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaMaxExclusiveFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaMaxExclusiveFacet(struct soap*, const char*, ns3__XmlSchemaMaxExclusiveFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaMaxExclusiveFacet
#define soap_write_ns3__XmlSchemaMaxExclusiveFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaMaxExclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaMaxExclusiveFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaMaxExclusiveFacet(struct soap*, ns3__XmlSchemaMaxExclusiveFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaMaxExclusiveFacet
#define soap_read_ns3__XmlSchemaMaxExclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaMaxExclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaMaxExclusiveFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaMaxExclusiveFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaMaxExclusiveFacet * soap_new_ns3__XmlSchemaMaxExclusiveFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaMaxExclusiveFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaMaxExclusiveFacet * soap_new_req_ns3__XmlSchemaMaxExclusiveFacet(struct soap *soap) { ns3__XmlSchemaMaxExclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMaxExclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaMaxExclusiveFacet * soap_new_set_ns3__XmlSchemaMaxExclusiveFacet(struct soap *soap) { ns3__XmlSchemaMaxExclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMaxExclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaMaxExclusiveFacet(struct soap *soap, ns3__XmlSchemaMaxExclusiveFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaMaxExclusiveFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaMinInclusiveFacet
#define SOAP_TYPE_ns3__XmlSchemaMinInclusiveFacet (156)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaMinInclusiveFacet(struct soap*, const char*, int, const ns3__XmlSchemaMinInclusiveFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaMinInclusiveFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaMinInclusiveFacet(struct soap*, const char*, ns3__XmlSchemaMinInclusiveFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaMinInclusiveFacet
#define soap_write_ns3__XmlSchemaMinInclusiveFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaMinInclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaMinInclusiveFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaMinInclusiveFacet(struct soap*, ns3__XmlSchemaMinInclusiveFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaMinInclusiveFacet
#define soap_read_ns3__XmlSchemaMinInclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaMinInclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaMinInclusiveFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaMinInclusiveFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaMinInclusiveFacet * soap_new_ns3__XmlSchemaMinInclusiveFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaMinInclusiveFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaMinInclusiveFacet * soap_new_req_ns3__XmlSchemaMinInclusiveFacet(struct soap *soap) { ns3__XmlSchemaMinInclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMinInclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaMinInclusiveFacet * soap_new_set_ns3__XmlSchemaMinInclusiveFacet(struct soap *soap) { ns3__XmlSchemaMinInclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMinInclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaMinInclusiveFacet(struct soap *soap, ns3__XmlSchemaMinInclusiveFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaMinInclusiveFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaMaxInclusiveFacet
#define SOAP_TYPE_ns3__XmlSchemaMaxInclusiveFacet (155)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaMaxInclusiveFacet(struct soap*, const char*, int, const ns3__XmlSchemaMaxInclusiveFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaMaxInclusiveFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaMaxInclusiveFacet(struct soap*, const char*, ns3__XmlSchemaMaxInclusiveFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaMaxInclusiveFacet
#define soap_write_ns3__XmlSchemaMaxInclusiveFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaMaxInclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaMaxInclusiveFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaMaxInclusiveFacet(struct soap*, ns3__XmlSchemaMaxInclusiveFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaMaxInclusiveFacet
#define soap_read_ns3__XmlSchemaMaxInclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaMaxInclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaMaxInclusiveFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaMaxInclusiveFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaMaxInclusiveFacet * soap_new_ns3__XmlSchemaMaxInclusiveFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaMaxInclusiveFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaMaxInclusiveFacet * soap_new_req_ns3__XmlSchemaMaxInclusiveFacet(struct soap *soap) { ns3__XmlSchemaMaxInclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMaxInclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaMaxInclusiveFacet * soap_new_set_ns3__XmlSchemaMaxInclusiveFacet(struct soap *soap) { ns3__XmlSchemaMaxInclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMaxInclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaMaxInclusiveFacet(struct soap *soap, ns3__XmlSchemaMaxInclusiveFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaMaxInclusiveFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaMinLengthFacet
#define SOAP_TYPE_ns3__XmlSchemaMinLengthFacet (154)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaMinLengthFacet(struct soap*, const char*, int, const ns3__XmlSchemaMinLengthFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaMinLengthFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaMinLengthFacet(struct soap*, const char*, ns3__XmlSchemaMinLengthFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaMinLengthFacet
#define soap_write_ns3__XmlSchemaMinLengthFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaMinLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaMinLengthFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaMinLengthFacet(struct soap*, ns3__XmlSchemaMinLengthFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaMinLengthFacet
#define soap_read_ns3__XmlSchemaMinLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaMinLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaMinLengthFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaMinLengthFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaMinLengthFacet * soap_new_ns3__XmlSchemaMinLengthFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaMinLengthFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaMinLengthFacet * soap_new_req_ns3__XmlSchemaMinLengthFacet(struct soap *soap) { ns3__XmlSchemaMinLengthFacet *_p = soap_instantiate_ns3__XmlSchemaMinLengthFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaMinLengthFacet * soap_new_set_ns3__XmlSchemaMinLengthFacet(struct soap *soap) { ns3__XmlSchemaMinLengthFacet *_p = soap_instantiate_ns3__XmlSchemaMinLengthFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaMinLengthFacet(struct soap *soap, ns3__XmlSchemaMinLengthFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaMinLengthFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaMaxLengthFacet
#define SOAP_TYPE_ns3__XmlSchemaMaxLengthFacet (153)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaMaxLengthFacet(struct soap*, const char*, int, const ns3__XmlSchemaMaxLengthFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaMaxLengthFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaMaxLengthFacet(struct soap*, const char*, ns3__XmlSchemaMaxLengthFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaMaxLengthFacet
#define soap_write_ns3__XmlSchemaMaxLengthFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaMaxLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaMaxLengthFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaMaxLengthFacet(struct soap*, ns3__XmlSchemaMaxLengthFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaMaxLengthFacet
#define soap_read_ns3__XmlSchemaMaxLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaMaxLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaMaxLengthFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaMaxLengthFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaMaxLengthFacet * soap_new_ns3__XmlSchemaMaxLengthFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaMaxLengthFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaMaxLengthFacet * soap_new_req_ns3__XmlSchemaMaxLengthFacet(struct soap *soap) { ns3__XmlSchemaMaxLengthFacet *_p = soap_instantiate_ns3__XmlSchemaMaxLengthFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaMaxLengthFacet * soap_new_set_ns3__XmlSchemaMaxLengthFacet(struct soap *soap) { ns3__XmlSchemaMaxLengthFacet *_p = soap_instantiate_ns3__XmlSchemaMaxLengthFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaMaxLengthFacet(struct soap *soap, ns3__XmlSchemaMaxLengthFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaMaxLengthFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaLengthFacet
#define SOAP_TYPE_ns3__XmlSchemaLengthFacet (152)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaLengthFacet(struct soap*, const char*, int, const ns3__XmlSchemaLengthFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaLengthFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaLengthFacet(struct soap*, const char*, ns3__XmlSchemaLengthFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaLengthFacet
#define soap_write_ns3__XmlSchemaLengthFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaLengthFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaLengthFacet(struct soap*, ns3__XmlSchemaLengthFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaLengthFacet
#define soap_read_ns3__XmlSchemaLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaLengthFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaLengthFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaLengthFacet * soap_new_ns3__XmlSchemaLengthFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaLengthFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaLengthFacet * soap_new_req_ns3__XmlSchemaLengthFacet(struct soap *soap) { ns3__XmlSchemaLengthFacet *_p = soap_instantiate_ns3__XmlSchemaLengthFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaLengthFacet * soap_new_set_ns3__XmlSchemaLengthFacet(struct soap *soap) { ns3__XmlSchemaLengthFacet *_p = soap_instantiate_ns3__XmlSchemaLengthFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaLengthFacet(struct soap *soap, ns3__XmlSchemaLengthFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaLengthFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaTotalDigitsFacet
#define SOAP_TYPE_ns3__XmlSchemaTotalDigitsFacet (151)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaTotalDigitsFacet(struct soap*, const char*, int, const ns3__XmlSchemaTotalDigitsFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaTotalDigitsFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaTotalDigitsFacet(struct soap*, const char*, ns3__XmlSchemaTotalDigitsFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaTotalDigitsFacet
#define soap_write_ns3__XmlSchemaTotalDigitsFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaTotalDigitsFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaTotalDigitsFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaTotalDigitsFacet(struct soap*, ns3__XmlSchemaTotalDigitsFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaTotalDigitsFacet
#define soap_read_ns3__XmlSchemaTotalDigitsFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaTotalDigitsFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaTotalDigitsFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaTotalDigitsFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaTotalDigitsFacet * soap_new_ns3__XmlSchemaTotalDigitsFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaTotalDigitsFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaTotalDigitsFacet * soap_new_req_ns3__XmlSchemaTotalDigitsFacet(struct soap *soap) { ns3__XmlSchemaTotalDigitsFacet *_p = soap_instantiate_ns3__XmlSchemaTotalDigitsFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaTotalDigitsFacet * soap_new_set_ns3__XmlSchemaTotalDigitsFacet(struct soap *soap) { ns3__XmlSchemaTotalDigitsFacet *_p = soap_instantiate_ns3__XmlSchemaTotalDigitsFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaTotalDigitsFacet(struct soap *soap, ns3__XmlSchemaTotalDigitsFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaTotalDigitsFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaFractionDigitsFacet
#define SOAP_TYPE_ns3__XmlSchemaFractionDigitsFacet (150)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaFractionDigitsFacet(struct soap*, const char*, int, const ns3__XmlSchemaFractionDigitsFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaFractionDigitsFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaFractionDigitsFacet(struct soap*, const char*, ns3__XmlSchemaFractionDigitsFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaFractionDigitsFacet
#define soap_write_ns3__XmlSchemaFractionDigitsFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaFractionDigitsFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaFractionDigitsFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaFractionDigitsFacet(struct soap*, ns3__XmlSchemaFractionDigitsFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaFractionDigitsFacet
#define soap_read_ns3__XmlSchemaFractionDigitsFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaFractionDigitsFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaFractionDigitsFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaFractionDigitsFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaFractionDigitsFacet * soap_new_ns3__XmlSchemaFractionDigitsFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaFractionDigitsFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaFractionDigitsFacet * soap_new_req_ns3__XmlSchemaFractionDigitsFacet(struct soap *soap) { ns3__XmlSchemaFractionDigitsFacet *_p = soap_instantiate_ns3__XmlSchemaFractionDigitsFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaFractionDigitsFacet * soap_new_set_ns3__XmlSchemaFractionDigitsFacet(struct soap *soap) { ns3__XmlSchemaFractionDigitsFacet *_p = soap_instantiate_ns3__XmlSchemaFractionDigitsFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaFractionDigitsFacet(struct soap *soap, ns3__XmlSchemaFractionDigitsFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaFractionDigitsFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaNumericFacet
#define SOAP_TYPE_ns3__XmlSchemaNumericFacet (149)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaNumericFacet(struct soap*, const char*, int, const ns3__XmlSchemaNumericFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaNumericFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaNumericFacet(struct soap*, const char*, ns3__XmlSchemaNumericFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaNumericFacet
#define soap_write_ns3__XmlSchemaNumericFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaNumericFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaNumericFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaNumericFacet(struct soap*, ns3__XmlSchemaNumericFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaNumericFacet
#define soap_read_ns3__XmlSchemaNumericFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaNumericFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaNumericFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaNumericFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaNumericFacet * soap_new_ns3__XmlSchemaNumericFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaNumericFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaNumericFacet * soap_new_req_ns3__XmlSchemaNumericFacet(struct soap *soap) { ns3__XmlSchemaNumericFacet *_p = soap_instantiate_ns3__XmlSchemaNumericFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaNumericFacet * soap_new_set_ns3__XmlSchemaNumericFacet(struct soap *soap) { ns3__XmlSchemaNumericFacet *_p = soap_instantiate_ns3__XmlSchemaNumericFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaNumericFacet(struct soap *soap, ns3__XmlSchemaNumericFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaNumericFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaPatternFacet
#define SOAP_TYPE_ns3__XmlSchemaPatternFacet (148)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaPatternFacet(struct soap*, const char*, int, const ns3__XmlSchemaPatternFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaPatternFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaPatternFacet(struct soap*, const char*, ns3__XmlSchemaPatternFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaPatternFacet
#define soap_write_ns3__XmlSchemaPatternFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaPatternFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaPatternFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaPatternFacet(struct soap*, ns3__XmlSchemaPatternFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaPatternFacet
#define soap_read_ns3__XmlSchemaPatternFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaPatternFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaPatternFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaPatternFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaPatternFacet * soap_new_ns3__XmlSchemaPatternFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaPatternFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaPatternFacet * soap_new_req_ns3__XmlSchemaPatternFacet(struct soap *soap) { ns3__XmlSchemaPatternFacet *_p = soap_instantiate_ns3__XmlSchemaPatternFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaPatternFacet * soap_new_set_ns3__XmlSchemaPatternFacet(struct soap *soap) { ns3__XmlSchemaPatternFacet *_p = soap_instantiate_ns3__XmlSchemaPatternFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaPatternFacet(struct soap *soap, ns3__XmlSchemaPatternFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaPatternFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaEnumerationFacet
#define SOAP_TYPE_ns3__XmlSchemaEnumerationFacet (147)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaEnumerationFacet(struct soap*, const char*, int, const ns3__XmlSchemaEnumerationFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaEnumerationFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaEnumerationFacet(struct soap*, const char*, ns3__XmlSchemaEnumerationFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaEnumerationFacet
#define soap_write_ns3__XmlSchemaEnumerationFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaEnumerationFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaEnumerationFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaEnumerationFacet(struct soap*, ns3__XmlSchemaEnumerationFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaEnumerationFacet
#define soap_read_ns3__XmlSchemaEnumerationFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaEnumerationFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaEnumerationFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaEnumerationFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaEnumerationFacet * soap_new_ns3__XmlSchemaEnumerationFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaEnumerationFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaEnumerationFacet * soap_new_req_ns3__XmlSchemaEnumerationFacet(struct soap *soap) { ns3__XmlSchemaEnumerationFacet *_p = soap_instantiate_ns3__XmlSchemaEnumerationFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaEnumerationFacet * soap_new_set_ns3__XmlSchemaEnumerationFacet(struct soap *soap) { ns3__XmlSchemaEnumerationFacet *_p = soap_instantiate_ns3__XmlSchemaEnumerationFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaEnumerationFacet(struct soap *soap, ns3__XmlSchemaEnumerationFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaEnumerationFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaWhiteSpaceFacet
#define SOAP_TYPE_ns3__XmlSchemaWhiteSpaceFacet (146)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaWhiteSpaceFacet(struct soap*, const char*, int, const ns3__XmlSchemaWhiteSpaceFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaWhiteSpaceFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaWhiteSpaceFacet(struct soap*, const char*, ns3__XmlSchemaWhiteSpaceFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaWhiteSpaceFacet
#define soap_write_ns3__XmlSchemaWhiteSpaceFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaWhiteSpaceFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaWhiteSpaceFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaWhiteSpaceFacet(struct soap*, ns3__XmlSchemaWhiteSpaceFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaWhiteSpaceFacet
#define soap_read_ns3__XmlSchemaWhiteSpaceFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaWhiteSpaceFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaWhiteSpaceFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaWhiteSpaceFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaWhiteSpaceFacet * soap_new_ns3__XmlSchemaWhiteSpaceFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaWhiteSpaceFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaWhiteSpaceFacet * soap_new_req_ns3__XmlSchemaWhiteSpaceFacet(struct soap *soap) { ns3__XmlSchemaWhiteSpaceFacet *_p = soap_instantiate_ns3__XmlSchemaWhiteSpaceFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaWhiteSpaceFacet * soap_new_set_ns3__XmlSchemaWhiteSpaceFacet(struct soap *soap) { ns3__XmlSchemaWhiteSpaceFacet *_p = soap_instantiate_ns3__XmlSchemaWhiteSpaceFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaWhiteSpaceFacet(struct soap *soap, ns3__XmlSchemaWhiteSpaceFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaWhiteSpaceFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaFacet
#define SOAP_TYPE_ns3__XmlSchemaFacet (145)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaFacet(struct soap*, const char*, int, const ns3__XmlSchemaFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaFacet(struct soap*, const char*, ns3__XmlSchemaFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaFacet
#define soap_write_ns3__XmlSchemaFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaFacet(struct soap*, ns3__XmlSchemaFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaFacet
#define soap_read_ns3__XmlSchemaFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaFacet * soap_new_ns3__XmlSchemaFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaFacet * soap_new_req_ns3__XmlSchemaFacet(struct soap *soap) { ns3__XmlSchemaFacet *_p = soap_instantiate_ns3__XmlSchemaFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaFacet * soap_new_set_ns3__XmlSchemaFacet(struct soap *soap, std::string *value, bool fixed) { ns3__XmlSchemaFacet *_p = soap_instantiate_ns3__XmlSchemaFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaFacet::value = value; _p->ns3__XmlSchemaFacet::fixed = fixed; } return _p; }

inline void soap_delete_ns3__XmlSchemaFacet(struct soap *soap, ns3__XmlSchemaFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaMinExclusiveFacet
#define SOAP_TYPE_ns3__XmlSchemaMinExclusiveFacet (144)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaMinExclusiveFacet(struct soap*, const char*, int, const ns3__XmlSchemaMinExclusiveFacet *, const char*);
SOAP_FMAC3 ns3__XmlSchemaMinExclusiveFacet * SOAP_FMAC4 soap_in_ns3__XmlSchemaMinExclusiveFacet(struct soap*, const char*, ns3__XmlSchemaMinExclusiveFacet *, const char*);

#ifndef soap_write_ns3__XmlSchemaMinExclusiveFacet
#define soap_write_ns3__XmlSchemaMinExclusiveFacet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaMinExclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaMinExclusiveFacet * SOAP_FMAC4 soap_get_ns3__XmlSchemaMinExclusiveFacet(struct soap*, ns3__XmlSchemaMinExclusiveFacet *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaMinExclusiveFacet
#define soap_read_ns3__XmlSchemaMinExclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaMinExclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaMinExclusiveFacet * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaMinExclusiveFacet(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaMinExclusiveFacet * soap_new_ns3__XmlSchemaMinExclusiveFacet(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaMinExclusiveFacet(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaMinExclusiveFacet * soap_new_req_ns3__XmlSchemaMinExclusiveFacet(struct soap *soap) { ns3__XmlSchemaMinExclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMinExclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaMinExclusiveFacet * soap_new_set_ns3__XmlSchemaMinExclusiveFacet(struct soap *soap) { ns3__XmlSchemaMinExclusiveFacet *_p = soap_instantiate_ns3__XmlSchemaMinExclusiveFacet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaMinExclusiveFacet(struct soap *soap, ns3__XmlSchemaMinExclusiveFacet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaMinExclusiveFacet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleContentRestriction
#define SOAP_TYPE_ns3__XmlSchemaSimpleContentRestriction (143)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleContentRestriction(struct soap*, const char*, int, const ns3__XmlSchemaSimpleContentRestriction *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleContentRestriction * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleContentRestriction(struct soap*, const char*, ns3__XmlSchemaSimpleContentRestriction *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleContentRestriction
#define soap_write_ns3__XmlSchemaSimpleContentRestriction(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleContentRestriction * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleContentRestriction(struct soap*, ns3__XmlSchemaSimpleContentRestriction *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleContentRestriction
#define soap_read_ns3__XmlSchemaSimpleContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleContentRestriction * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleContentRestriction(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleContentRestriction * soap_new_ns3__XmlSchemaSimpleContentRestriction(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleContentRestriction(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleContentRestriction * soap_new_req_ns3__XmlSchemaSimpleContentRestriction(struct soap *soap, int __size_XmlSchemaSimpleContentRestriction, __ns3__union_XmlSchemaSimpleContentRestriction *__union_XmlSchemaSimpleContentRestriction, int __size_XmlSchemaSimpleContentRestriction_, __ns3__union_XmlSchemaSimpleContentRestriction_ *__union_XmlSchemaSimpleContentRestriction_) { ns3__XmlSchemaSimpleContentRestriction *_p = soap_instantiate_ns3__XmlSchemaSimpleContentRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleContentRestriction::__size_XmlSchemaSimpleContentRestriction = __size_XmlSchemaSimpleContentRestriction; _p->ns3__XmlSchemaSimpleContentRestriction::__union_XmlSchemaSimpleContentRestriction = __union_XmlSchemaSimpleContentRestriction; _p->ns3__XmlSchemaSimpleContentRestriction::__size_XmlSchemaSimpleContentRestriction_ = __size_XmlSchemaSimpleContentRestriction_; _p->ns3__XmlSchemaSimpleContentRestriction::__union_XmlSchemaSimpleContentRestriction_ = __union_XmlSchemaSimpleContentRestriction_; } return _p; }

inline ns3__XmlSchemaSimpleContentRestriction * soap_new_set_ns3__XmlSchemaSimpleContentRestriction(struct soap *soap, std::string *simpleType, int __size_XmlSchemaSimpleContentRestriction, __ns3__union_XmlSchemaSimpleContentRestriction *__union_XmlSchemaSimpleContentRestriction, int __size_XmlSchemaSimpleContentRestriction_, __ns3__union_XmlSchemaSimpleContentRestriction_ *__union_XmlSchemaSimpleContentRestriction_, std::string *anyAttribute, std::string *base) { ns3__XmlSchemaSimpleContentRestriction *_p = soap_instantiate_ns3__XmlSchemaSimpleContentRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleContentRestriction::simpleType = simpleType; _p->ns3__XmlSchemaSimpleContentRestriction::__size_XmlSchemaSimpleContentRestriction = __size_XmlSchemaSimpleContentRestriction; _p->ns3__XmlSchemaSimpleContentRestriction::__union_XmlSchemaSimpleContentRestriction = __union_XmlSchemaSimpleContentRestriction; _p->ns3__XmlSchemaSimpleContentRestriction::__size_XmlSchemaSimpleContentRestriction_ = __size_XmlSchemaSimpleContentRestriction_; _p->ns3__XmlSchemaSimpleContentRestriction::__union_XmlSchemaSimpleContentRestriction_ = __union_XmlSchemaSimpleContentRestriction_; _p->ns3__XmlSchemaSimpleContentRestriction::anyAttribute = anyAttribute; _p->ns3__XmlSchemaSimpleContentRestriction::base = base; } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleContentRestriction(struct soap *soap, ns3__XmlSchemaSimpleContentRestriction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleContentRestriction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleContentExtension
#define SOAP_TYPE_ns3__XmlSchemaSimpleContentExtension (142)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleContentExtension(struct soap*, const char*, int, const ns3__XmlSchemaSimpleContentExtension *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleContentExtension * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleContentExtension(struct soap*, const char*, ns3__XmlSchemaSimpleContentExtension *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleContentExtension
#define soap_write_ns3__XmlSchemaSimpleContentExtension(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleContentExtension * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleContentExtension(struct soap*, ns3__XmlSchemaSimpleContentExtension *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleContentExtension
#define soap_read_ns3__XmlSchemaSimpleContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleContentExtension * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleContentExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleContentExtension * soap_new_ns3__XmlSchemaSimpleContentExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleContentExtension(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleContentExtension * soap_new_req_ns3__XmlSchemaSimpleContentExtension(struct soap *soap, int __size_XmlSchemaSimpleContentExtension, __ns3__union_XmlSchemaSimpleContentExtension *__union_XmlSchemaSimpleContentExtension) { ns3__XmlSchemaSimpleContentExtension *_p = soap_instantiate_ns3__XmlSchemaSimpleContentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleContentExtension::__size_XmlSchemaSimpleContentExtension = __size_XmlSchemaSimpleContentExtension; _p->ns3__XmlSchemaSimpleContentExtension::__union_XmlSchemaSimpleContentExtension = __union_XmlSchemaSimpleContentExtension; } return _p; }

inline ns3__XmlSchemaSimpleContentExtension * soap_new_set_ns3__XmlSchemaSimpleContentExtension(struct soap *soap, int __size_XmlSchemaSimpleContentExtension, __ns3__union_XmlSchemaSimpleContentExtension *__union_XmlSchemaSimpleContentExtension, std::string *anyAttribute, std::string *base) { ns3__XmlSchemaSimpleContentExtension *_p = soap_instantiate_ns3__XmlSchemaSimpleContentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleContentExtension::__size_XmlSchemaSimpleContentExtension = __size_XmlSchemaSimpleContentExtension; _p->ns3__XmlSchemaSimpleContentExtension::__union_XmlSchemaSimpleContentExtension = __union_XmlSchemaSimpleContentExtension; _p->ns3__XmlSchemaSimpleContentExtension::anyAttribute = anyAttribute; _p->ns3__XmlSchemaSimpleContentExtension::base = base; } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleContentExtension(struct soap *soap, ns3__XmlSchemaSimpleContentExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleContentExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAnyAttribute
#define SOAP_TYPE_ns3__XmlSchemaAnyAttribute (141)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAnyAttribute(struct soap*, const char*, int, const ns3__XmlSchemaAnyAttribute *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAnyAttribute * SOAP_FMAC4 soap_in_ns3__XmlSchemaAnyAttribute(struct soap*, const char*, ns3__XmlSchemaAnyAttribute *, const char*);

#ifndef soap_write_ns3__XmlSchemaAnyAttribute
#define soap_write_ns3__XmlSchemaAnyAttribute(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAnyAttribute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAnyAttribute * SOAP_FMAC4 soap_get_ns3__XmlSchemaAnyAttribute(struct soap*, ns3__XmlSchemaAnyAttribute *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAnyAttribute
#define soap_read_ns3__XmlSchemaAnyAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAnyAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAnyAttribute * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAnyAttribute(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAnyAttribute * soap_new_ns3__XmlSchemaAnyAttribute(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAnyAttribute(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAnyAttribute * soap_new_req_ns3__XmlSchemaAnyAttribute(struct soap *soap) { ns3__XmlSchemaAnyAttribute *_p = soap_instantiate_ns3__XmlSchemaAnyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaAnyAttribute * soap_new_set_ns3__XmlSchemaAnyAttribute(struct soap *soap, std::string *namespace_, std::string *processContents) { ns3__XmlSchemaAnyAttribute *_p = soap_instantiate_ns3__XmlSchemaAnyAttribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAnyAttribute::namespace_ = namespace_; _p->ns3__XmlSchemaAnyAttribute::processContents = processContents; } return _p; }

inline void soap_delete_ns3__XmlSchemaAnyAttribute(struct soap *soap, ns3__XmlSchemaAnyAttribute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAnyAttribute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAll
#define SOAP_TYPE_ns3__XmlSchemaAll (140)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAll(struct soap*, const char*, int, const ns3__XmlSchemaAll *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAll * SOAP_FMAC4 soap_in_ns3__XmlSchemaAll(struct soap*, const char*, ns3__XmlSchemaAll *, const char*);

#ifndef soap_write_ns3__XmlSchemaAll
#define soap_write_ns3__XmlSchemaAll(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAll", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAll * SOAP_FMAC4 soap_get_ns3__XmlSchemaAll(struct soap*, ns3__XmlSchemaAll *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAll
#define soap_read_ns3__XmlSchemaAll(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAll(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAll * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAll(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAll * soap_new_ns3__XmlSchemaAll(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAll(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAll * soap_new_req_ns3__XmlSchemaAll(struct soap *soap) { ns3__XmlSchemaAll *_p = soap_instantiate_ns3__XmlSchemaAll(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaAll * soap_new_set_ns3__XmlSchemaAll(struct soap *soap, std::vector<std::string >& element) { ns3__XmlSchemaAll *_p = soap_instantiate_ns3__XmlSchemaAll(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAll::element = element; } return _p; }

inline void soap_delete_ns3__XmlSchemaAll(struct soap *soap, ns3__XmlSchemaAll *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAll(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSequence
#define SOAP_TYPE_ns3__XmlSchemaSequence (139)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSequence(struct soap*, const char*, int, const ns3__XmlSchemaSequence *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSequence * SOAP_FMAC4 soap_in_ns3__XmlSchemaSequence(struct soap*, const char*, ns3__XmlSchemaSequence *, const char*);

#ifndef soap_write_ns3__XmlSchemaSequence
#define soap_write_ns3__XmlSchemaSequence(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSequence", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSequence * SOAP_FMAC4 soap_get_ns3__XmlSchemaSequence(struct soap*, ns3__XmlSchemaSequence *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSequence
#define soap_read_ns3__XmlSchemaSequence(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSequence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSequence * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSequence(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSequence * soap_new_ns3__XmlSchemaSequence(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSequence(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSequence * soap_new_req_ns3__XmlSchemaSequence(struct soap *soap, int __size_XmlSchemaSequence, __ns3__union_XmlSchemaSequence *__union_XmlSchemaSequence) { ns3__XmlSchemaSequence *_p = soap_instantiate_ns3__XmlSchemaSequence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSequence::__size_XmlSchemaSequence = __size_XmlSchemaSequence; _p->ns3__XmlSchemaSequence::__union_XmlSchemaSequence = __union_XmlSchemaSequence; } return _p; }

inline ns3__XmlSchemaSequence * soap_new_set_ns3__XmlSchemaSequence(struct soap *soap, int __size_XmlSchemaSequence, __ns3__union_XmlSchemaSequence *__union_XmlSchemaSequence) { ns3__XmlSchemaSequence *_p = soap_instantiate_ns3__XmlSchemaSequence(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSequence::__size_XmlSchemaSequence = __size_XmlSchemaSequence; _p->ns3__XmlSchemaSequence::__union_XmlSchemaSequence = __union_XmlSchemaSequence; } return _p; }

inline void soap_delete_ns3__XmlSchemaSequence(struct soap *soap, ns3__XmlSchemaSequence *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSequence(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaChoice
#define SOAP_TYPE_ns3__XmlSchemaChoice (138)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaChoice(struct soap*, const char*, int, const ns3__XmlSchemaChoice *, const char*);
SOAP_FMAC3 ns3__XmlSchemaChoice * SOAP_FMAC4 soap_in_ns3__XmlSchemaChoice(struct soap*, const char*, ns3__XmlSchemaChoice *, const char*);

#ifndef soap_write_ns3__XmlSchemaChoice
#define soap_write_ns3__XmlSchemaChoice(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaChoice", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaChoice * SOAP_FMAC4 soap_get_ns3__XmlSchemaChoice(struct soap*, ns3__XmlSchemaChoice *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaChoice
#define soap_read_ns3__XmlSchemaChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaChoice(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaChoice * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaChoice(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaChoice * soap_new_ns3__XmlSchemaChoice(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaChoice(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaChoice * soap_new_req_ns3__XmlSchemaChoice(struct soap *soap, int __size_XmlSchemaChoice, __ns3__union_XmlSchemaChoice *__union_XmlSchemaChoice) { ns3__XmlSchemaChoice *_p = soap_instantiate_ns3__XmlSchemaChoice(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaChoice::__size_XmlSchemaChoice = __size_XmlSchemaChoice; _p->ns3__XmlSchemaChoice::__union_XmlSchemaChoice = __union_XmlSchemaChoice; } return _p; }

inline ns3__XmlSchemaChoice * soap_new_set_ns3__XmlSchemaChoice(struct soap *soap, int __size_XmlSchemaChoice, __ns3__union_XmlSchemaChoice *__union_XmlSchemaChoice) { ns3__XmlSchemaChoice *_p = soap_instantiate_ns3__XmlSchemaChoice(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaChoice::__size_XmlSchemaChoice = __size_XmlSchemaChoice; _p->ns3__XmlSchemaChoice::__union_XmlSchemaChoice = __union_XmlSchemaChoice; } return _p; }

inline void soap_delete_ns3__XmlSchemaChoice(struct soap *soap, ns3__XmlSchemaChoice *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaChoice(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaGroupBase
#define SOAP_TYPE_ns3__XmlSchemaGroupBase (137)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaGroupBase(struct soap*, const char*, int, const ns3__XmlSchemaGroupBase *, const char*);
SOAP_FMAC3 ns3__XmlSchemaGroupBase * SOAP_FMAC4 soap_in_ns3__XmlSchemaGroupBase(struct soap*, const char*, ns3__XmlSchemaGroupBase *, const char*);

#ifndef soap_write_ns3__XmlSchemaGroupBase
#define soap_write_ns3__XmlSchemaGroupBase(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaGroupBase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaGroupBase * SOAP_FMAC4 soap_get_ns3__XmlSchemaGroupBase(struct soap*, ns3__XmlSchemaGroupBase *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaGroupBase
#define soap_read_ns3__XmlSchemaGroupBase(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaGroupBase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaGroupBase * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaGroupBase(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaGroupBase * soap_new_ns3__XmlSchemaGroupBase(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaGroupBase(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaGroupBase * soap_new_req_ns3__XmlSchemaGroupBase(struct soap *soap) { ns3__XmlSchemaGroupBase *_p = soap_instantiate_ns3__XmlSchemaGroupBase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaGroupBase * soap_new_set_ns3__XmlSchemaGroupBase(struct soap *soap) { ns3__XmlSchemaGroupBase *_p = soap_instantiate_ns3__XmlSchemaGroupBase(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaGroupBase(struct soap *soap, ns3__XmlSchemaGroupBase *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaGroupBase(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAny
#define SOAP_TYPE_ns3__XmlSchemaAny (136)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAny(struct soap*, const char*, int, const ns3__XmlSchemaAny *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAny * SOAP_FMAC4 soap_in_ns3__XmlSchemaAny(struct soap*, const char*, ns3__XmlSchemaAny *, const char*);

#ifndef soap_write_ns3__XmlSchemaAny
#define soap_write_ns3__XmlSchemaAny(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAny", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAny * SOAP_FMAC4 soap_get_ns3__XmlSchemaAny(struct soap*, ns3__XmlSchemaAny *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAny
#define soap_read_ns3__XmlSchemaAny(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAny(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAny * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAny(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAny * soap_new_ns3__XmlSchemaAny(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAny(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAny * soap_new_req_ns3__XmlSchemaAny(struct soap *soap) { ns3__XmlSchemaAny *_p = soap_instantiate_ns3__XmlSchemaAny(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaAny * soap_new_set_ns3__XmlSchemaAny(struct soap *soap, std::string *namespace_, std::string *processContents) { ns3__XmlSchemaAny *_p = soap_instantiate_ns3__XmlSchemaAny(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAny::namespace_ = namespace_; _p->ns3__XmlSchemaAny::processContents = processContents; } return _p; }

inline void soap_delete_ns3__XmlSchemaAny(struct soap *soap, ns3__XmlSchemaAny *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAny(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaKey
#define SOAP_TYPE_ns3__XmlSchemaKey (135)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaKey(struct soap*, const char*, int, const ns3__XmlSchemaKey *, const char*);
SOAP_FMAC3 ns3__XmlSchemaKey * SOAP_FMAC4 soap_in_ns3__XmlSchemaKey(struct soap*, const char*, ns3__XmlSchemaKey *, const char*);

#ifndef soap_write_ns3__XmlSchemaKey
#define soap_write_ns3__XmlSchemaKey(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaKey", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaKey * SOAP_FMAC4 soap_get_ns3__XmlSchemaKey(struct soap*, ns3__XmlSchemaKey *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaKey
#define soap_read_ns3__XmlSchemaKey(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaKey(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaKey * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaKey(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaKey * soap_new_ns3__XmlSchemaKey(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaKey(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaKey * soap_new_req_ns3__XmlSchemaKey(struct soap *soap) { ns3__XmlSchemaKey *_p = soap_instantiate_ns3__XmlSchemaKey(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaKey * soap_new_set_ns3__XmlSchemaKey(struct soap *soap) { ns3__XmlSchemaKey *_p = soap_instantiate_ns3__XmlSchemaKey(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaKey(struct soap *soap, ns3__XmlSchemaKey *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaKey(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaKeyref
#define SOAP_TYPE_ns3__XmlSchemaKeyref (134)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaKeyref(struct soap*, const char*, int, const ns3__XmlSchemaKeyref *, const char*);
SOAP_FMAC3 ns3__XmlSchemaKeyref * SOAP_FMAC4 soap_in_ns3__XmlSchemaKeyref(struct soap*, const char*, ns3__XmlSchemaKeyref *, const char*);

#ifndef soap_write_ns3__XmlSchemaKeyref
#define soap_write_ns3__XmlSchemaKeyref(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaKeyref", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaKeyref * SOAP_FMAC4 soap_get_ns3__XmlSchemaKeyref(struct soap*, ns3__XmlSchemaKeyref *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaKeyref
#define soap_read_ns3__XmlSchemaKeyref(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaKeyref(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaKeyref * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaKeyref(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaKeyref * soap_new_ns3__XmlSchemaKeyref(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaKeyref(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaKeyref * soap_new_req_ns3__XmlSchemaKeyref(struct soap *soap) { ns3__XmlSchemaKeyref *_p = soap_instantiate_ns3__XmlSchemaKeyref(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaKeyref * soap_new_set_ns3__XmlSchemaKeyref(struct soap *soap, std::string *refer) { ns3__XmlSchemaKeyref *_p = soap_instantiate_ns3__XmlSchemaKeyref(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaKeyref::refer = refer; } return _p; }

inline void soap_delete_ns3__XmlSchemaKeyref(struct soap *soap, ns3__XmlSchemaKeyref *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaKeyref(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaXPath
#define SOAP_TYPE_ns3__XmlSchemaXPath (133)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaXPath(struct soap*, const char*, int, const ns3__XmlSchemaXPath *, const char*);
SOAP_FMAC3 ns3__XmlSchemaXPath * SOAP_FMAC4 soap_in_ns3__XmlSchemaXPath(struct soap*, const char*, ns3__XmlSchemaXPath *, const char*);

#ifndef soap_write_ns3__XmlSchemaXPath
#define soap_write_ns3__XmlSchemaXPath(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaXPath", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaXPath * SOAP_FMAC4 soap_get_ns3__XmlSchemaXPath(struct soap*, ns3__XmlSchemaXPath *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaXPath
#define soap_read_ns3__XmlSchemaXPath(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaXPath(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaXPath * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaXPath(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaXPath * soap_new_ns3__XmlSchemaXPath(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaXPath(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaXPath * soap_new_req_ns3__XmlSchemaXPath(struct soap *soap) { ns3__XmlSchemaXPath *_p = soap_instantiate_ns3__XmlSchemaXPath(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaXPath * soap_new_set_ns3__XmlSchemaXPath(struct soap *soap, std::string& xpath) { ns3__XmlSchemaXPath *_p = soap_instantiate_ns3__XmlSchemaXPath(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaXPath::xpath = xpath; } return _p; }

inline void soap_delete_ns3__XmlSchemaXPath(struct soap *soap, ns3__XmlSchemaXPath *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaXPath(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaIdentityConstraint
#define SOAP_TYPE_ns3__XmlSchemaIdentityConstraint (132)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaIdentityConstraint(struct soap*, const char*, int, const ns3__XmlSchemaIdentityConstraint *, const char*);
SOAP_FMAC3 ns3__XmlSchemaIdentityConstraint * SOAP_FMAC4 soap_in_ns3__XmlSchemaIdentityConstraint(struct soap*, const char*, ns3__XmlSchemaIdentityConstraint *, const char*);

#ifndef soap_write_ns3__XmlSchemaIdentityConstraint
#define soap_write_ns3__XmlSchemaIdentityConstraint(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaIdentityConstraint", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaIdentityConstraint * SOAP_FMAC4 soap_get_ns3__XmlSchemaIdentityConstraint(struct soap*, ns3__XmlSchemaIdentityConstraint *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaIdentityConstraint
#define soap_read_ns3__XmlSchemaIdentityConstraint(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaIdentityConstraint(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaIdentityConstraint * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaIdentityConstraint(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaIdentityConstraint * soap_new_ns3__XmlSchemaIdentityConstraint(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaIdentityConstraint(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaIdentityConstraint * soap_new_req_ns3__XmlSchemaIdentityConstraint(struct soap *soap) { ns3__XmlSchemaIdentityConstraint *_p = soap_instantiate_ns3__XmlSchemaIdentityConstraint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaIdentityConstraint * soap_new_set_ns3__XmlSchemaIdentityConstraint(struct soap *soap, std::string *selector, std::vector<std::string >& field, std::string *name) { ns3__XmlSchemaIdentityConstraint *_p = soap_instantiate_ns3__XmlSchemaIdentityConstraint(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaIdentityConstraint::selector = selector; _p->ns3__XmlSchemaIdentityConstraint::field = field; _p->ns3__XmlSchemaIdentityConstraint::name = name; } return _p; }

inline void soap_delete_ns3__XmlSchemaIdentityConstraint(struct soap *soap, ns3__XmlSchemaIdentityConstraint *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaIdentityConstraint(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaUnique
#define SOAP_TYPE_ns3__XmlSchemaUnique (131)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaUnique(struct soap*, const char*, int, const ns3__XmlSchemaUnique *, const char*);
SOAP_FMAC3 ns3__XmlSchemaUnique * SOAP_FMAC4 soap_in_ns3__XmlSchemaUnique(struct soap*, const char*, ns3__XmlSchemaUnique *, const char*);

#ifndef soap_write_ns3__XmlSchemaUnique
#define soap_write_ns3__XmlSchemaUnique(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaUnique", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaUnique * SOAP_FMAC4 soap_get_ns3__XmlSchemaUnique(struct soap*, ns3__XmlSchemaUnique *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaUnique
#define soap_read_ns3__XmlSchemaUnique(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaUnique(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaUnique * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaUnique(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaUnique * soap_new_ns3__XmlSchemaUnique(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaUnique(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaUnique * soap_new_req_ns3__XmlSchemaUnique(struct soap *soap) { ns3__XmlSchemaUnique *_p = soap_instantiate_ns3__XmlSchemaUnique(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaUnique * soap_new_set_ns3__XmlSchemaUnique(struct soap *soap) { ns3__XmlSchemaUnique *_p = soap_instantiate_ns3__XmlSchemaUnique(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaUnique(struct soap *soap, ns3__XmlSchemaUnique *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaUnique(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaElement
#define SOAP_TYPE_ns3__XmlSchemaElement (130)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaElement(struct soap*, const char*, int, const ns3__XmlSchemaElement *, const char*);
SOAP_FMAC3 ns3__XmlSchemaElement * SOAP_FMAC4 soap_in_ns3__XmlSchemaElement(struct soap*, const char*, ns3__XmlSchemaElement *, const char*);

#ifndef soap_write_ns3__XmlSchemaElement
#define soap_write_ns3__XmlSchemaElement(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaElement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaElement * SOAP_FMAC4 soap_get_ns3__XmlSchemaElement(struct soap*, ns3__XmlSchemaElement *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaElement
#define soap_read_ns3__XmlSchemaElement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaElement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaElement * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaElement(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaElement * soap_new_ns3__XmlSchemaElement(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaElement(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaElement * soap_new_req_ns3__XmlSchemaElement(struct soap *soap, int __size_XmlSchemaElement_, __ns3__union_XmlSchemaElement_ *__union_XmlSchemaElement_) { ns3__XmlSchemaElement *_p = soap_instantiate_ns3__XmlSchemaElement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaElement::__size_XmlSchemaElement_ = __size_XmlSchemaElement_; _p->ns3__XmlSchemaElement::__union_XmlSchemaElement_ = __union_XmlSchemaElement_; } return _p; }

inline ns3__XmlSchemaElement * soap_new_set_ns3__XmlSchemaElement(struct soap *soap, std::string *simpleType, std::string *complexType, int __size_XmlSchemaElement_, __ns3__union_XmlSchemaElement_ *__union_XmlSchemaElement_, bool abstract, std::string *block, std::string *default_, std::string *final, std::string *fixed, std::string *form, std::string& name, bool nillable, std::string *ref, std::string *substitutionGroup, std::string *type) { ns3__XmlSchemaElement *_p = soap_instantiate_ns3__XmlSchemaElement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaElement::simpleType = simpleType; _p->ns3__XmlSchemaElement::complexType = complexType; _p->ns3__XmlSchemaElement::__size_XmlSchemaElement_ = __size_XmlSchemaElement_; _p->ns3__XmlSchemaElement::__union_XmlSchemaElement_ = __union_XmlSchemaElement_; _p->ns3__XmlSchemaElement::abstract = abstract; _p->ns3__XmlSchemaElement::block = block; _p->ns3__XmlSchemaElement::default_ = default_; _p->ns3__XmlSchemaElement::final = final; _p->ns3__XmlSchemaElement::fixed = fixed; _p->ns3__XmlSchemaElement::form = form; _p->ns3__XmlSchemaElement::name = name; _p->ns3__XmlSchemaElement::nillable = nillable; _p->ns3__XmlSchemaElement::ref = ref; _p->ns3__XmlSchemaElement::substitutionGroup = substitutionGroup; _p->ns3__XmlSchemaElement::type = type; } return _p; }

inline void soap_delete_ns3__XmlSchemaElement(struct soap *soap, ns3__XmlSchemaElement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaElement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaParticle
#define SOAP_TYPE_ns3__XmlSchemaParticle (129)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaParticle(struct soap*, const char*, int, const ns3__XmlSchemaParticle *, const char*);
SOAP_FMAC3 ns3__XmlSchemaParticle * SOAP_FMAC4 soap_in_ns3__XmlSchemaParticle(struct soap*, const char*, ns3__XmlSchemaParticle *, const char*);

#ifndef soap_write_ns3__XmlSchemaParticle
#define soap_write_ns3__XmlSchemaParticle(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaParticle", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaParticle * SOAP_FMAC4 soap_get_ns3__XmlSchemaParticle(struct soap*, ns3__XmlSchemaParticle *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaParticle
#define soap_read_ns3__XmlSchemaParticle(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaParticle(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaParticle * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaParticle(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaParticle * soap_new_ns3__XmlSchemaParticle(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaParticle(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaParticle * soap_new_req_ns3__XmlSchemaParticle(struct soap *soap) { ns3__XmlSchemaParticle *_p = soap_instantiate_ns3__XmlSchemaParticle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaParticle * soap_new_set_ns3__XmlSchemaParticle(struct soap *soap, std::string *minOccurs, std::string *maxOccurs) { ns3__XmlSchemaParticle *_p = soap_instantiate_ns3__XmlSchemaParticle(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaParticle::minOccurs = minOccurs; _p->ns3__XmlSchemaParticle::maxOccurs = maxOccurs; } return _p; }

inline void soap_delete_ns3__XmlSchemaParticle(struct soap *soap, ns3__XmlSchemaParticle *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaParticle(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaGroupRef
#define SOAP_TYPE_ns3__XmlSchemaGroupRef (128)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaGroupRef(struct soap*, const char*, int, const ns3__XmlSchemaGroupRef *, const char*);
SOAP_FMAC3 ns3__XmlSchemaGroupRef * SOAP_FMAC4 soap_in_ns3__XmlSchemaGroupRef(struct soap*, const char*, ns3__XmlSchemaGroupRef *, const char*);

#ifndef soap_write_ns3__XmlSchemaGroupRef
#define soap_write_ns3__XmlSchemaGroupRef(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaGroupRef", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaGroupRef * SOAP_FMAC4 soap_get_ns3__XmlSchemaGroupRef(struct soap*, ns3__XmlSchemaGroupRef *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaGroupRef
#define soap_read_ns3__XmlSchemaGroupRef(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaGroupRef(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaGroupRef * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaGroupRef(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaGroupRef * soap_new_ns3__XmlSchemaGroupRef(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaGroupRef(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaGroupRef * soap_new_req_ns3__XmlSchemaGroupRef(struct soap *soap) { ns3__XmlSchemaGroupRef *_p = soap_instantiate_ns3__XmlSchemaGroupRef(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaGroupRef * soap_new_set_ns3__XmlSchemaGroupRef(struct soap *soap, std::string *ref) { ns3__XmlSchemaGroupRef *_p = soap_instantiate_ns3__XmlSchemaGroupRef(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaGroupRef::ref = ref; } return _p; }

inline void soap_delete_ns3__XmlSchemaGroupRef(struct soap *soap, ns3__XmlSchemaGroupRef *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaGroupRef(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaComplexContentExtension
#define SOAP_TYPE_ns3__XmlSchemaComplexContentExtension (127)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaComplexContentExtension(struct soap*, const char*, int, const ns3__XmlSchemaComplexContentExtension *, const char*);
SOAP_FMAC3 ns3__XmlSchemaComplexContentExtension * SOAP_FMAC4 soap_in_ns3__XmlSchemaComplexContentExtension(struct soap*, const char*, ns3__XmlSchemaComplexContentExtension *, const char*);

#ifndef soap_write_ns3__XmlSchemaComplexContentExtension
#define soap_write_ns3__XmlSchemaComplexContentExtension(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaComplexContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaComplexContentExtension * SOAP_FMAC4 soap_get_ns3__XmlSchemaComplexContentExtension(struct soap*, ns3__XmlSchemaComplexContentExtension *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaComplexContentExtension
#define soap_read_ns3__XmlSchemaComplexContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaComplexContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaComplexContentExtension * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaComplexContentExtension(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaComplexContentExtension * soap_new_ns3__XmlSchemaComplexContentExtension(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaComplexContentExtension(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaComplexContentExtension * soap_new_req_ns3__XmlSchemaComplexContentExtension(struct soap *soap, int __size_XmlSchemaComplexContentExtension_, __ns3__union_XmlSchemaComplexContentExtension_ *__union_XmlSchemaComplexContentExtension_) { ns3__XmlSchemaComplexContentExtension *_p = soap_instantiate_ns3__XmlSchemaComplexContentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexContentExtension::__size_XmlSchemaComplexContentExtension_ = __size_XmlSchemaComplexContentExtension_; _p->ns3__XmlSchemaComplexContentExtension::__union_XmlSchemaComplexContentExtension_ = __union_XmlSchemaComplexContentExtension_; } return _p; }

inline ns3__XmlSchemaComplexContentExtension * soap_new_set_ns3__XmlSchemaComplexContentExtension(struct soap *soap, std::string *group, std::string *all, std::string *sequence, std::string *choice, int __size_XmlSchemaComplexContentExtension_, __ns3__union_XmlSchemaComplexContentExtension_ *__union_XmlSchemaComplexContentExtension_, std::string *anyAttribute, std::string *base) { ns3__XmlSchemaComplexContentExtension *_p = soap_instantiate_ns3__XmlSchemaComplexContentExtension(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexContentExtension::group = group; _p->ns3__XmlSchemaComplexContentExtension::all = all; _p->ns3__XmlSchemaComplexContentExtension::sequence = sequence; _p->ns3__XmlSchemaComplexContentExtension::choice = choice; _p->ns3__XmlSchemaComplexContentExtension::__size_XmlSchemaComplexContentExtension_ = __size_XmlSchemaComplexContentExtension_; _p->ns3__XmlSchemaComplexContentExtension::__union_XmlSchemaComplexContentExtension_ = __union_XmlSchemaComplexContentExtension_; _p->ns3__XmlSchemaComplexContentExtension::anyAttribute = anyAttribute; _p->ns3__XmlSchemaComplexContentExtension::base = base; } return _p; }

inline void soap_delete_ns3__XmlSchemaComplexContentExtension(struct soap *soap, ns3__XmlSchemaComplexContentExtension *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaComplexContentExtension(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaContent
#define SOAP_TYPE_ns3__XmlSchemaContent (126)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaContent(struct soap*, const char*, int, const ns3__XmlSchemaContent *, const char*);
SOAP_FMAC3 ns3__XmlSchemaContent * SOAP_FMAC4 soap_in_ns3__XmlSchemaContent(struct soap*, const char*, ns3__XmlSchemaContent *, const char*);

#ifndef soap_write_ns3__XmlSchemaContent
#define soap_write_ns3__XmlSchemaContent(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaContent * SOAP_FMAC4 soap_get_ns3__XmlSchemaContent(struct soap*, ns3__XmlSchemaContent *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaContent
#define soap_read_ns3__XmlSchemaContent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaContent * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaContent(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaContent * soap_new_ns3__XmlSchemaContent(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaContent(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaContent * soap_new_req_ns3__XmlSchemaContent(struct soap *soap) { ns3__XmlSchemaContent *_p = soap_instantiate_ns3__XmlSchemaContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaContent * soap_new_set_ns3__XmlSchemaContent(struct soap *soap) { ns3__XmlSchemaContent *_p = soap_instantiate_ns3__XmlSchemaContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaContent(struct soap *soap, ns3__XmlSchemaContent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaContent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaComplexContentRestriction
#define SOAP_TYPE_ns3__XmlSchemaComplexContentRestriction (125)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaComplexContentRestriction(struct soap*, const char*, int, const ns3__XmlSchemaComplexContentRestriction *, const char*);
SOAP_FMAC3 ns3__XmlSchemaComplexContentRestriction * SOAP_FMAC4 soap_in_ns3__XmlSchemaComplexContentRestriction(struct soap*, const char*, ns3__XmlSchemaComplexContentRestriction *, const char*);

#ifndef soap_write_ns3__XmlSchemaComplexContentRestriction
#define soap_write_ns3__XmlSchemaComplexContentRestriction(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaComplexContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaComplexContentRestriction * SOAP_FMAC4 soap_get_ns3__XmlSchemaComplexContentRestriction(struct soap*, ns3__XmlSchemaComplexContentRestriction *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaComplexContentRestriction
#define soap_read_ns3__XmlSchemaComplexContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaComplexContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaComplexContentRestriction * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaComplexContentRestriction(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaComplexContentRestriction * soap_new_ns3__XmlSchemaComplexContentRestriction(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaComplexContentRestriction(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaComplexContentRestriction * soap_new_req_ns3__XmlSchemaComplexContentRestriction(struct soap *soap, int __size_XmlSchemaComplexContentRestriction_, __ns3__union_XmlSchemaComplexContentRestriction_ *__union_XmlSchemaComplexContentRestriction_) { ns3__XmlSchemaComplexContentRestriction *_p = soap_instantiate_ns3__XmlSchemaComplexContentRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexContentRestriction::__size_XmlSchemaComplexContentRestriction_ = __size_XmlSchemaComplexContentRestriction_; _p->ns3__XmlSchemaComplexContentRestriction::__union_XmlSchemaComplexContentRestriction_ = __union_XmlSchemaComplexContentRestriction_; } return _p; }

inline ns3__XmlSchemaComplexContentRestriction * soap_new_set_ns3__XmlSchemaComplexContentRestriction(struct soap *soap, std::string *all, std::string *group, std::string *choice, std::string *sequence, int __size_XmlSchemaComplexContentRestriction_, __ns3__union_XmlSchemaComplexContentRestriction_ *__union_XmlSchemaComplexContentRestriction_, std::string *anyAttribute, std::string *base) { ns3__XmlSchemaComplexContentRestriction *_p = soap_instantiate_ns3__XmlSchemaComplexContentRestriction(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexContentRestriction::all = all; _p->ns3__XmlSchemaComplexContentRestriction::group = group; _p->ns3__XmlSchemaComplexContentRestriction::choice = choice; _p->ns3__XmlSchemaComplexContentRestriction::sequence = sequence; _p->ns3__XmlSchemaComplexContentRestriction::__size_XmlSchemaComplexContentRestriction_ = __size_XmlSchemaComplexContentRestriction_; _p->ns3__XmlSchemaComplexContentRestriction::__union_XmlSchemaComplexContentRestriction_ = __union_XmlSchemaComplexContentRestriction_; _p->ns3__XmlSchemaComplexContentRestriction::anyAttribute = anyAttribute; _p->ns3__XmlSchemaComplexContentRestriction::base = base; } return _p; }

inline void soap_delete_ns3__XmlSchemaComplexContentRestriction(struct soap *soap, ns3__XmlSchemaComplexContentRestriction *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaComplexContentRestriction(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaComplexContent
#define SOAP_TYPE_ns3__XmlSchemaComplexContent (124)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaComplexContent(struct soap*, const char*, int, const ns3__XmlSchemaComplexContent *, const char*);
SOAP_FMAC3 ns3__XmlSchemaComplexContent * SOAP_FMAC4 soap_in_ns3__XmlSchemaComplexContent(struct soap*, const char*, ns3__XmlSchemaComplexContent *, const char*);

#ifndef soap_write_ns3__XmlSchemaComplexContent
#define soap_write_ns3__XmlSchemaComplexContent(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaComplexContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaComplexContent * SOAP_FMAC4 soap_get_ns3__XmlSchemaComplexContent(struct soap*, ns3__XmlSchemaComplexContent *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaComplexContent
#define soap_read_ns3__XmlSchemaComplexContent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaComplexContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaComplexContent * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaComplexContent(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaComplexContent * soap_new_ns3__XmlSchemaComplexContent(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaComplexContent(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaComplexContent * soap_new_req_ns3__XmlSchemaComplexContent(struct soap *soap, bool mixed) { ns3__XmlSchemaComplexContent *_p = soap_instantiate_ns3__XmlSchemaComplexContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexContent::mixed = mixed; } return _p; }

inline ns3__XmlSchemaComplexContent * soap_new_set_ns3__XmlSchemaComplexContent(struct soap *soap, std::string *restriction, std::string *extension, bool mixed) { ns3__XmlSchemaComplexContent *_p = soap_instantiate_ns3__XmlSchemaComplexContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexContent::restriction = restriction; _p->ns3__XmlSchemaComplexContent::extension = extension; _p->ns3__XmlSchemaComplexContent::mixed = mixed; } return _p; }

inline void soap_delete_ns3__XmlSchemaComplexContent(struct soap *soap, ns3__XmlSchemaComplexContent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaComplexContent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaContentModel
#define SOAP_TYPE_ns3__XmlSchemaContentModel (123)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaContentModel(struct soap*, const char*, int, const ns3__XmlSchemaContentModel *, const char*);
SOAP_FMAC3 ns3__XmlSchemaContentModel * SOAP_FMAC4 soap_in_ns3__XmlSchemaContentModel(struct soap*, const char*, ns3__XmlSchemaContentModel *, const char*);

#ifndef soap_write_ns3__XmlSchemaContentModel
#define soap_write_ns3__XmlSchemaContentModel(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaContentModel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaContentModel * SOAP_FMAC4 soap_get_ns3__XmlSchemaContentModel(struct soap*, ns3__XmlSchemaContentModel *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaContentModel
#define soap_read_ns3__XmlSchemaContentModel(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaContentModel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaContentModel * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaContentModel(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaContentModel * soap_new_ns3__XmlSchemaContentModel(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaContentModel(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaContentModel * soap_new_req_ns3__XmlSchemaContentModel(struct soap *soap) { ns3__XmlSchemaContentModel *_p = soap_instantiate_ns3__XmlSchemaContentModel(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaContentModel * soap_new_set_ns3__XmlSchemaContentModel(struct soap *soap) { ns3__XmlSchemaContentModel *_p = soap_instantiate_ns3__XmlSchemaContentModel(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaContentModel(struct soap *soap, ns3__XmlSchemaContentModel *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaContentModel(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleContent
#define SOAP_TYPE_ns3__XmlSchemaSimpleContent (122)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleContent(struct soap*, const char*, int, const ns3__XmlSchemaSimpleContent *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleContent * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleContent(struct soap*, const char*, ns3__XmlSchemaSimpleContent *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleContent
#define soap_write_ns3__XmlSchemaSimpleContent(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleContent * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleContent(struct soap*, ns3__XmlSchemaSimpleContent *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleContent
#define soap_read_ns3__XmlSchemaSimpleContent(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleContent * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleContent(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleContent * soap_new_ns3__XmlSchemaSimpleContent(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleContent(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleContent * soap_new_req_ns3__XmlSchemaSimpleContent(struct soap *soap) { ns3__XmlSchemaSimpleContent *_p = soap_instantiate_ns3__XmlSchemaSimpleContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaSimpleContent * soap_new_set_ns3__XmlSchemaSimpleContent(struct soap *soap, std::string *restriction, std::string *extension) { ns3__XmlSchemaSimpleContent *_p = soap_instantiate_ns3__XmlSchemaSimpleContent(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleContent::restriction = restriction; _p->ns3__XmlSchemaSimpleContent::extension = extension; } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleContent(struct soap *soap, ns3__XmlSchemaSimpleContent *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleContent(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaComplexType
#define SOAP_TYPE_ns3__XmlSchemaComplexType (121)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaComplexType(struct soap*, const char*, int, const ns3__XmlSchemaComplexType *, const char*);
SOAP_FMAC3 ns3__XmlSchemaComplexType * SOAP_FMAC4 soap_in_ns3__XmlSchemaComplexType(struct soap*, const char*, ns3__XmlSchemaComplexType *, const char*);

#ifndef soap_write_ns3__XmlSchemaComplexType
#define soap_write_ns3__XmlSchemaComplexType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaComplexType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaComplexType * SOAP_FMAC4 soap_get_ns3__XmlSchemaComplexType(struct soap*, ns3__XmlSchemaComplexType *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaComplexType
#define soap_read_ns3__XmlSchemaComplexType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaComplexType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaComplexType * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaComplexType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaComplexType * soap_new_ns3__XmlSchemaComplexType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaComplexType(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaComplexType * soap_new_req_ns3__XmlSchemaComplexType(struct soap *soap, int __size_XmlSchemaComplexType__, __ns3__union_XmlSchemaComplexType__ *__union_XmlSchemaComplexType__) { ns3__XmlSchemaComplexType *_p = soap_instantiate_ns3__XmlSchemaComplexType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexType::__size_XmlSchemaComplexType__ = __size_XmlSchemaComplexType__; _p->ns3__XmlSchemaComplexType::__union_XmlSchemaComplexType__ = __union_XmlSchemaComplexType__; } return _p; }

inline ns3__XmlSchemaComplexType * soap_new_set_ns3__XmlSchemaComplexType(struct soap *soap, std::string *simpleContent, std::string *complexContent, std::string *group, std::string *sequence, std::string *choice, std::string *all, int __size_XmlSchemaComplexType__, __ns3__union_XmlSchemaComplexType__ *__union_XmlSchemaComplexType__, std::string *anyAttribute, bool abstract, std::string *block, bool mixed) { ns3__XmlSchemaComplexType *_p = soap_instantiate_ns3__XmlSchemaComplexType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaComplexType::simpleContent = simpleContent; _p->ns3__XmlSchemaComplexType::complexContent = complexContent; _p->ns3__XmlSchemaComplexType::group = group; _p->ns3__XmlSchemaComplexType::sequence = sequence; _p->ns3__XmlSchemaComplexType::choice = choice; _p->ns3__XmlSchemaComplexType::all = all; _p->ns3__XmlSchemaComplexType::__size_XmlSchemaComplexType__ = __size_XmlSchemaComplexType__; _p->ns3__XmlSchemaComplexType::__union_XmlSchemaComplexType__ = __union_XmlSchemaComplexType__; _p->ns3__XmlSchemaComplexType::anyAttribute = anyAttribute; _p->ns3__XmlSchemaComplexType::abstract = abstract; _p->ns3__XmlSchemaComplexType::block = block; _p->ns3__XmlSchemaComplexType::mixed = mixed; } return _p; }

inline void soap_delete_ns3__XmlSchemaComplexType(struct soap *soap, ns3__XmlSchemaComplexType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaComplexType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaType
#define SOAP_TYPE_ns3__XmlSchemaType (120)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaType(struct soap*, const char*, int, const ns3__XmlSchemaType *, const char*);
SOAP_FMAC3 ns3__XmlSchemaType * SOAP_FMAC4 soap_in_ns3__XmlSchemaType(struct soap*, const char*, ns3__XmlSchemaType *, const char*);

#ifndef soap_write_ns3__XmlSchemaType
#define soap_write_ns3__XmlSchemaType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaType * SOAP_FMAC4 soap_get_ns3__XmlSchemaType(struct soap*, ns3__XmlSchemaType *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaType
#define soap_read_ns3__XmlSchemaType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaType * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaType * soap_new_ns3__XmlSchemaType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaType(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaType * soap_new_req_ns3__XmlSchemaType(struct soap *soap) { ns3__XmlSchemaType *_p = soap_instantiate_ns3__XmlSchemaType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaType * soap_new_set_ns3__XmlSchemaType(struct soap *soap, std::string *name, std::string *final) { ns3__XmlSchemaType *_p = soap_instantiate_ns3__XmlSchemaType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaType::name = name; _p->ns3__XmlSchemaType::final = final; } return _p; }

inline void soap_delete_ns3__XmlSchemaType(struct soap *soap, ns3__XmlSchemaType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaSimpleType
#define SOAP_TYPE_ns3__XmlSchemaSimpleType (119)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaSimpleType(struct soap*, const char*, int, const ns3__XmlSchemaSimpleType *, const char*);
SOAP_FMAC3 ns3__XmlSchemaSimpleType * SOAP_FMAC4 soap_in_ns3__XmlSchemaSimpleType(struct soap*, const char*, ns3__XmlSchemaSimpleType *, const char*);

#ifndef soap_write_ns3__XmlSchemaSimpleType
#define soap_write_ns3__XmlSchemaSimpleType(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaSimpleType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaSimpleType * SOAP_FMAC4 soap_get_ns3__XmlSchemaSimpleType(struct soap*, ns3__XmlSchemaSimpleType *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaSimpleType
#define soap_read_ns3__XmlSchemaSimpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaSimpleType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaSimpleType * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaSimpleType(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaSimpleType * soap_new_ns3__XmlSchemaSimpleType(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaSimpleType(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaSimpleType * soap_new_req_ns3__XmlSchemaSimpleType(struct soap *soap) { ns3__XmlSchemaSimpleType *_p = soap_instantiate_ns3__XmlSchemaSimpleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaSimpleType * soap_new_set_ns3__XmlSchemaSimpleType(struct soap *soap, std::string *union_, std::string *list, std::string *restriction) { ns3__XmlSchemaSimpleType *_p = soap_instantiate_ns3__XmlSchemaSimpleType(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaSimpleType::union_ = union_; _p->ns3__XmlSchemaSimpleType::list = list; _p->ns3__XmlSchemaSimpleType::restriction = restriction; } return _p; }

inline void soap_delete_ns3__XmlSchemaSimpleType(struct soap *soap, ns3__XmlSchemaSimpleType *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaSimpleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAttribute
#define SOAP_TYPE_ns3__XmlSchemaAttribute (118)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAttribute(struct soap*, const char*, int, const ns3__XmlSchemaAttribute *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAttribute * SOAP_FMAC4 soap_in_ns3__XmlSchemaAttribute(struct soap*, const char*, ns3__XmlSchemaAttribute *, const char*);

#ifndef soap_write_ns3__XmlSchemaAttribute
#define soap_write_ns3__XmlSchemaAttribute(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAttribute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAttribute * SOAP_FMAC4 soap_get_ns3__XmlSchemaAttribute(struct soap*, ns3__XmlSchemaAttribute *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAttribute
#define soap_read_ns3__XmlSchemaAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAttribute * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAttribute(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAttribute * soap_new_ns3__XmlSchemaAttribute(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAttribute(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAttribute * soap_new_req_ns3__XmlSchemaAttribute(struct soap *soap) { ns3__XmlSchemaAttribute *_p = soap_instantiate_ns3__XmlSchemaAttribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaAttribute * soap_new_set_ns3__XmlSchemaAttribute(struct soap *soap, std::string *simpleType, std::string *default_, std::string *fixed, std::string *form, std::string *name, std::string *ref, std::string *type, std::string *use) { ns3__XmlSchemaAttribute *_p = soap_instantiate_ns3__XmlSchemaAttribute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAttribute::simpleType = simpleType; _p->ns3__XmlSchemaAttribute::default_ = default_; _p->ns3__XmlSchemaAttribute::fixed = fixed; _p->ns3__XmlSchemaAttribute::form = form; _p->ns3__XmlSchemaAttribute::name = name; _p->ns3__XmlSchemaAttribute::ref = ref; _p->ns3__XmlSchemaAttribute::type = type; _p->ns3__XmlSchemaAttribute::use = use; } return _p; }

inline void soap_delete_ns3__XmlSchemaAttribute(struct soap *soap, ns3__XmlSchemaAttribute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAttribute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAttributeGroupRef
#define SOAP_TYPE_ns3__XmlSchemaAttributeGroupRef (117)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAttributeGroupRef(struct soap*, const char*, int, const ns3__XmlSchemaAttributeGroupRef *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAttributeGroupRef * SOAP_FMAC4 soap_in_ns3__XmlSchemaAttributeGroupRef(struct soap*, const char*, ns3__XmlSchemaAttributeGroupRef *, const char*);

#ifndef soap_write_ns3__XmlSchemaAttributeGroupRef
#define soap_write_ns3__XmlSchemaAttributeGroupRef(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAttributeGroupRef", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAttributeGroupRef * SOAP_FMAC4 soap_get_ns3__XmlSchemaAttributeGroupRef(struct soap*, ns3__XmlSchemaAttributeGroupRef *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAttributeGroupRef
#define soap_read_ns3__XmlSchemaAttributeGroupRef(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAttributeGroupRef(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAttributeGroupRef * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAttributeGroupRef(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAttributeGroupRef * soap_new_ns3__XmlSchemaAttributeGroupRef(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAttributeGroupRef(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAttributeGroupRef * soap_new_req_ns3__XmlSchemaAttributeGroupRef(struct soap *soap) { ns3__XmlSchemaAttributeGroupRef *_p = soap_instantiate_ns3__XmlSchemaAttributeGroupRef(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaAttributeGroupRef * soap_new_set_ns3__XmlSchemaAttributeGroupRef(struct soap *soap, std::string *ref) { ns3__XmlSchemaAttributeGroupRef *_p = soap_instantiate_ns3__XmlSchemaAttributeGroupRef(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAttributeGroupRef::ref = ref; } return _p; }

inline void soap_delete_ns3__XmlSchemaAttributeGroupRef(struct soap *soap, ns3__XmlSchemaAttributeGroupRef *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAttributeGroupRef(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAttributeGroup
#define SOAP_TYPE_ns3__XmlSchemaAttributeGroup (116)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAttributeGroup(struct soap*, const char*, int, const ns3__XmlSchemaAttributeGroup *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAttributeGroup * SOAP_FMAC4 soap_in_ns3__XmlSchemaAttributeGroup(struct soap*, const char*, ns3__XmlSchemaAttributeGroup *, const char*);

#ifndef soap_write_ns3__XmlSchemaAttributeGroup
#define soap_write_ns3__XmlSchemaAttributeGroup(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAttributeGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAttributeGroup * SOAP_FMAC4 soap_get_ns3__XmlSchemaAttributeGroup(struct soap*, ns3__XmlSchemaAttributeGroup *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAttributeGroup
#define soap_read_ns3__XmlSchemaAttributeGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAttributeGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAttributeGroup * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAttributeGroup(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAttributeGroup * soap_new_ns3__XmlSchemaAttributeGroup(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAttributeGroup(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAttributeGroup * soap_new_req_ns3__XmlSchemaAttributeGroup(struct soap *soap, int __size_XmlSchemaAttributeGroup, __ns3__union_XmlSchemaAttributeGroup *__union_XmlSchemaAttributeGroup) { ns3__XmlSchemaAttributeGroup *_p = soap_instantiate_ns3__XmlSchemaAttributeGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAttributeGroup::__size_XmlSchemaAttributeGroup = __size_XmlSchemaAttributeGroup; _p->ns3__XmlSchemaAttributeGroup::__union_XmlSchemaAttributeGroup = __union_XmlSchemaAttributeGroup; } return _p; }

inline ns3__XmlSchemaAttributeGroup * soap_new_set_ns3__XmlSchemaAttributeGroup(struct soap *soap, int __size_XmlSchemaAttributeGroup, __ns3__union_XmlSchemaAttributeGroup *__union_XmlSchemaAttributeGroup, std::string *anyAttribute, std::string *name) { ns3__XmlSchemaAttributeGroup *_p = soap_instantiate_ns3__XmlSchemaAttributeGroup(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAttributeGroup::__size_XmlSchemaAttributeGroup = __size_XmlSchemaAttributeGroup; _p->ns3__XmlSchemaAttributeGroup::__union_XmlSchemaAttributeGroup = __union_XmlSchemaAttributeGroup; _p->ns3__XmlSchemaAttributeGroup::anyAttribute = anyAttribute; _p->ns3__XmlSchemaAttributeGroup::name = name; } return _p; }

inline void soap_delete_ns3__XmlSchemaAttributeGroup(struct soap *soap, ns3__XmlSchemaAttributeGroup *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAttributeGroup(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaNotation
#define SOAP_TYPE_ns3__XmlSchemaNotation (115)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaNotation(struct soap*, const char*, int, const ns3__XmlSchemaNotation *, const char*);
SOAP_FMAC3 ns3__XmlSchemaNotation * SOAP_FMAC4 soap_in_ns3__XmlSchemaNotation(struct soap*, const char*, ns3__XmlSchemaNotation *, const char*);

#ifndef soap_write_ns3__XmlSchemaNotation
#define soap_write_ns3__XmlSchemaNotation(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaNotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaNotation * SOAP_FMAC4 soap_get_ns3__XmlSchemaNotation(struct soap*, ns3__XmlSchemaNotation *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaNotation
#define soap_read_ns3__XmlSchemaNotation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaNotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaNotation * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaNotation(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaNotation * soap_new_ns3__XmlSchemaNotation(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaNotation(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaNotation * soap_new_req_ns3__XmlSchemaNotation(struct soap *soap) { ns3__XmlSchemaNotation *_p = soap_instantiate_ns3__XmlSchemaNotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaNotation * soap_new_set_ns3__XmlSchemaNotation(struct soap *soap, std::string *name, std::string *public_, std::string *system) { ns3__XmlSchemaNotation *_p = soap_instantiate_ns3__XmlSchemaNotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaNotation::name = name; _p->ns3__XmlSchemaNotation::public_ = public_; _p->ns3__XmlSchemaNotation::system = system; } return _p; }

inline void soap_delete_ns3__XmlSchemaNotation(struct soap *soap, ns3__XmlSchemaNotation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaNotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAppInfo
#define SOAP_TYPE_ns3__XmlSchemaAppInfo (114)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAppInfo(struct soap*, const char*, int, const ns3__XmlSchemaAppInfo *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAppInfo * SOAP_FMAC4 soap_in_ns3__XmlSchemaAppInfo(struct soap*, const char*, ns3__XmlSchemaAppInfo *, const char*);

#ifndef soap_write_ns3__XmlSchemaAppInfo
#define soap_write_ns3__XmlSchemaAppInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAppInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAppInfo * SOAP_FMAC4 soap_get_ns3__XmlSchemaAppInfo(struct soap*, ns3__XmlSchemaAppInfo *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAppInfo
#define soap_read_ns3__XmlSchemaAppInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAppInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAppInfo * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAppInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAppInfo * soap_new_ns3__XmlSchemaAppInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAppInfo(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAppInfo * soap_new_req_ns3__XmlSchemaAppInfo(struct soap *soap) { ns3__XmlSchemaAppInfo *_p = soap_instantiate_ns3__XmlSchemaAppInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaAppInfo * soap_new_set_ns3__XmlSchemaAppInfo(struct soap *soap, std::vector<char * >& __any, std::string *source, char *__mixed) { ns3__XmlSchemaAppInfo *_p = soap_instantiate_ns3__XmlSchemaAppInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAppInfo::__any = __any; _p->ns3__XmlSchemaAppInfo::source = source; _p->ns3__XmlSchemaAppInfo::__mixed = __mixed; } return _p; }

inline void soap_delete_ns3__XmlSchemaAppInfo(struct soap *soap, ns3__XmlSchemaAppInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAppInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaDocumentation
#define SOAP_TYPE_ns3__XmlSchemaDocumentation (113)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaDocumentation(struct soap*, const char*, int, const ns3__XmlSchemaDocumentation *, const char*);
SOAP_FMAC3 ns3__XmlSchemaDocumentation * SOAP_FMAC4 soap_in_ns3__XmlSchemaDocumentation(struct soap*, const char*, ns3__XmlSchemaDocumentation *, const char*);

#ifndef soap_write_ns3__XmlSchemaDocumentation
#define soap_write_ns3__XmlSchemaDocumentation(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaDocumentation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaDocumentation * SOAP_FMAC4 soap_get_ns3__XmlSchemaDocumentation(struct soap*, ns3__XmlSchemaDocumentation *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaDocumentation
#define soap_read_ns3__XmlSchemaDocumentation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaDocumentation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaDocumentation * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaDocumentation(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaDocumentation * soap_new_ns3__XmlSchemaDocumentation(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaDocumentation(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaDocumentation * soap_new_req_ns3__XmlSchemaDocumentation(struct soap *soap) { ns3__XmlSchemaDocumentation *_p = soap_instantiate_ns3__XmlSchemaDocumentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaDocumentation * soap_new_set_ns3__XmlSchemaDocumentation(struct soap *soap, std::vector<char * >& __any, std::string *source, std::string *xml__lang, char *__mixed) { ns3__XmlSchemaDocumentation *_p = soap_instantiate_ns3__XmlSchemaDocumentation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaDocumentation::__any = __any; _p->ns3__XmlSchemaDocumentation::source = source; _p->ns3__XmlSchemaDocumentation::xml__lang = xml__lang; _p->ns3__XmlSchemaDocumentation::__mixed = __mixed; } return _p; }

inline void soap_delete_ns3__XmlSchemaDocumentation(struct soap *soap, ns3__XmlSchemaDocumentation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaDocumentation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAnnotation
#define SOAP_TYPE_ns3__XmlSchemaAnnotation (112)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAnnotation(struct soap*, const char*, int, const ns3__XmlSchemaAnnotation *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAnnotation * SOAP_FMAC4 soap_in_ns3__XmlSchemaAnnotation(struct soap*, const char*, ns3__XmlSchemaAnnotation *, const char*);

#ifndef soap_write_ns3__XmlSchemaAnnotation
#define soap_write_ns3__XmlSchemaAnnotation(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAnnotation * SOAP_FMAC4 soap_get_ns3__XmlSchemaAnnotation(struct soap*, ns3__XmlSchemaAnnotation *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAnnotation
#define soap_read_ns3__XmlSchemaAnnotation(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAnnotation * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAnnotation(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAnnotation * soap_new_ns3__XmlSchemaAnnotation(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAnnotation(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAnnotation * soap_new_req_ns3__XmlSchemaAnnotation(struct soap *soap, int __size_XmlSchemaAnnotation, __ns3__union_XmlSchemaAnnotation *__union_XmlSchemaAnnotation) { ns3__XmlSchemaAnnotation *_p = soap_instantiate_ns3__XmlSchemaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAnnotation::__size_XmlSchemaAnnotation = __size_XmlSchemaAnnotation; _p->ns3__XmlSchemaAnnotation::__union_XmlSchemaAnnotation = __union_XmlSchemaAnnotation; } return _p; }

inline ns3__XmlSchemaAnnotation * soap_new_set_ns3__XmlSchemaAnnotation(struct soap *soap, int __size_XmlSchemaAnnotation, __ns3__union_XmlSchemaAnnotation *__union_XmlSchemaAnnotation, std::string *id, char *__anyAttribute) { ns3__XmlSchemaAnnotation *_p = soap_instantiate_ns3__XmlSchemaAnnotation(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAnnotation::__size_XmlSchemaAnnotation = __size_XmlSchemaAnnotation; _p->ns3__XmlSchemaAnnotation::__union_XmlSchemaAnnotation = __union_XmlSchemaAnnotation; _p->ns3__XmlSchemaAnnotation::id = id; _p->ns3__XmlSchemaAnnotation::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__XmlSchemaAnnotation(struct soap *soap, ns3__XmlSchemaAnnotation *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAnnotation(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaAnnotated
#define SOAP_TYPE_ns3__XmlSchemaAnnotated (111)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaAnnotated(struct soap*, const char*, int, const ns3__XmlSchemaAnnotated *, const char*);
SOAP_FMAC3 ns3__XmlSchemaAnnotated * SOAP_FMAC4 soap_in_ns3__XmlSchemaAnnotated(struct soap*, const char*, ns3__XmlSchemaAnnotated *, const char*);

#ifndef soap_write_ns3__XmlSchemaAnnotated
#define soap_write_ns3__XmlSchemaAnnotated(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaAnnotated", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaAnnotated * SOAP_FMAC4 soap_get_ns3__XmlSchemaAnnotated(struct soap*, ns3__XmlSchemaAnnotated *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaAnnotated
#define soap_read_ns3__XmlSchemaAnnotated(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaAnnotated(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaAnnotated * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaAnnotated(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaAnnotated * soap_new_ns3__XmlSchemaAnnotated(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaAnnotated(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaAnnotated * soap_new_req_ns3__XmlSchemaAnnotated(struct soap *soap) { ns3__XmlSchemaAnnotated *_p = soap_instantiate_ns3__XmlSchemaAnnotated(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaAnnotated * soap_new_set_ns3__XmlSchemaAnnotated(struct soap *soap, std::string *annotation, std::string *id, char *__anyAttribute) { ns3__XmlSchemaAnnotated *_p = soap_instantiate_ns3__XmlSchemaAnnotated(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchemaAnnotated::annotation = annotation; _p->ns3__XmlSchemaAnnotated::id = id; _p->ns3__XmlSchemaAnnotated::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__XmlSchemaAnnotated(struct soap *soap, ns3__XmlSchemaAnnotated *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaAnnotated(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchemaObject
#define SOAP_TYPE_ns3__XmlSchemaObject (110)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchemaObject(struct soap*, const char*, int, const ns3__XmlSchemaObject *, const char*);
SOAP_FMAC3 ns3__XmlSchemaObject * SOAP_FMAC4 soap_in_ns3__XmlSchemaObject(struct soap*, const char*, ns3__XmlSchemaObject *, const char*);

#ifndef soap_write_ns3__XmlSchemaObject
#define soap_write_ns3__XmlSchemaObject(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchemaObject", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchemaObject * SOAP_FMAC4 soap_get_ns3__XmlSchemaObject(struct soap*, ns3__XmlSchemaObject *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchemaObject
#define soap_read_ns3__XmlSchemaObject(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchemaObject(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchemaObject * SOAP_FMAC2 soap_instantiate_ns3__XmlSchemaObject(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchemaObject * soap_new_ns3__XmlSchemaObject(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchemaObject(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchemaObject * soap_new_req_ns3__XmlSchemaObject(struct soap *soap) { ns3__XmlSchemaObject *_p = soap_instantiate_ns3__XmlSchemaObject(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns3__XmlSchemaObject * soap_new_set_ns3__XmlSchemaObject(struct soap *soap) { ns3__XmlSchemaObject *_p = soap_instantiate_ns3__XmlSchemaObject(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline void soap_delete_ns3__XmlSchemaObject(struct soap *soap, ns3__XmlSchemaObject *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchemaObject(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns3__XmlSchema
#define SOAP_TYPE_ns3__XmlSchema (109)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns3__XmlSchema(struct soap*, const char*, int, const ns3__XmlSchema *, const char*);
SOAP_FMAC3 ns3__XmlSchema * SOAP_FMAC4 soap_in_ns3__XmlSchema(struct soap*, const char*, ns3__XmlSchema *, const char*);

#ifndef soap_write_ns3__XmlSchema
#define soap_write_ns3__XmlSchema(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns3:XmlSchema", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns3__XmlSchema * SOAP_FMAC4 soap_get_ns3__XmlSchema(struct soap*, ns3__XmlSchema *, const char*, const char*);

#ifndef soap_read_ns3__XmlSchema
#define soap_read_ns3__XmlSchema(soap, data) ( soap_begin_recv(soap) || !soap_get_ns3__XmlSchema(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns3__XmlSchema * SOAP_FMAC2 soap_instantiate_ns3__XmlSchema(struct soap*, int, const char*, const char*, size_t*);

inline ns3__XmlSchema * soap_new_ns3__XmlSchema(struct soap *soap, int n = -1) { return soap_instantiate_ns3__XmlSchema(soap, n, NULL, NULL, NULL); }

inline ns3__XmlSchema * soap_new_req_ns3__XmlSchema(struct soap *soap, int __size_XmlSchema, __ns3__union_XmlSchema *__union_XmlSchema, int __size_XmlSchema_, __ns3__union_XmlSchema_ *__union_XmlSchema_) { ns3__XmlSchema *_p = soap_instantiate_ns3__XmlSchema(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchema::__size_XmlSchema = __size_XmlSchema; _p->ns3__XmlSchema::__union_XmlSchema = __union_XmlSchema; _p->ns3__XmlSchema::__size_XmlSchema_ = __size_XmlSchema_; _p->ns3__XmlSchema::__union_XmlSchema_ = __union_XmlSchema_; } return _p; }

inline ns3__XmlSchema * soap_new_set_ns3__XmlSchema(struct soap *soap, int __size_XmlSchema, __ns3__union_XmlSchema *__union_XmlSchema, int __size_XmlSchema_, __ns3__union_XmlSchema_ *__union_XmlSchema_, std::string *attributeFormDefault, std::string *blockDefault, std::string *finalDefault, std::string *elementFormDefault, std::string *targetNamespace, std::string *version, std::string *id, char *__anyAttribute) { ns3__XmlSchema *_p = soap_instantiate_ns3__XmlSchema(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns3__XmlSchema::__size_XmlSchema = __size_XmlSchema; _p->ns3__XmlSchema::__union_XmlSchema = __union_XmlSchema; _p->ns3__XmlSchema::__size_XmlSchema_ = __size_XmlSchema_; _p->ns3__XmlSchema::__union_XmlSchema_ = __union_XmlSchema_; _p->ns3__XmlSchema::attributeFormDefault = attributeFormDefault; _p->ns3__XmlSchema::blockDefault = blockDefault; _p->ns3__XmlSchema::finalDefault = finalDefault; _p->ns3__XmlSchema::elementFormDefault = elementFormDefault; _p->ns3__XmlSchema::targetNamespace = targetNamespace; _p->ns3__XmlSchema::version = version; _p->ns3__XmlSchema::id = id; _p->ns3__XmlSchema::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns3__XmlSchema(struct soap *soap, ns3__XmlSchema *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns3__XmlSchema(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CellInfo
#define SOAP_TYPE_ns2__CellInfo (108)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CellInfo(struct soap*, const char*, int, const ns2__CellInfo *, const char*);
SOAP_FMAC3 ns2__CellInfo * SOAP_FMAC4 soap_in_ns2__CellInfo(struct soap*, const char*, ns2__CellInfo *, const char*);

#ifndef soap_write_ns2__CellInfo
#define soap_write_ns2__CellInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:CellInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CellInfo * SOAP_FMAC4 soap_get_ns2__CellInfo(struct soap*, ns2__CellInfo *, const char*, const char*);

#ifndef soap_read_ns2__CellInfo
#define soap_read_ns2__CellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CellInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__CellInfo * SOAP_FMAC2 soap_instantiate_ns2__CellInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CellInfo * soap_new_ns2__CellInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CellInfo(soap, n, NULL, NULL, NULL); }

inline ns2__CellInfo * soap_new_req_ns2__CellInfo(struct soap *soap) { ns2__CellInfo *_p = soap_instantiate_ns2__CellInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CellInfo * soap_new_set_ns2__CellInfo(struct soap *soap, std::vector<char * >& __any) { ns2__CellInfo *_p = soap_instantiate_ns2__CellInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CellInfo::__any = __any; } return _p; }

inline void soap_delete_ns2__CellInfo(struct soap *soap, ns2__CellInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CellInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__HierarchyInfo
#define SOAP_TYPE_ns2__HierarchyInfo (107)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__HierarchyInfo(struct soap*, const char*, int, const ns2__HierarchyInfo *, const char*);
SOAP_FMAC3 ns2__HierarchyInfo * SOAP_FMAC4 soap_in_ns2__HierarchyInfo(struct soap*, const char*, ns2__HierarchyInfo *, const char*);

#ifndef soap_write_ns2__HierarchyInfo
#define soap_write_ns2__HierarchyInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:HierarchyInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__HierarchyInfo * SOAP_FMAC4 soap_get_ns2__HierarchyInfo(struct soap*, ns2__HierarchyInfo *, const char*, const char*);

#ifndef soap_read_ns2__HierarchyInfo
#define soap_read_ns2__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__HierarchyInfo * SOAP_FMAC2 soap_instantiate_ns2__HierarchyInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__HierarchyInfo * soap_new_ns2__HierarchyInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__HierarchyInfo(soap, n, NULL, NULL, NULL); }

inline ns2__HierarchyInfo * soap_new_req_ns2__HierarchyInfo(struct soap *soap) { ns2__HierarchyInfo *_p = soap_instantiate_ns2__HierarchyInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__HierarchyInfo * soap_new_set_ns2__HierarchyInfo(struct soap *soap, std::vector<char * >& __any, std::string *name) { ns2__HierarchyInfo *_p = soap_instantiate_ns2__HierarchyInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__HierarchyInfo::__any = __any; _p->ns2__HierarchyInfo::name = name; } return _p; }

inline void soap_delete_ns2__HierarchyInfo(struct soap *soap, ns2__HierarchyInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__HierarchyInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AxisInfo
#define SOAP_TYPE_ns2__AxisInfo (106)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AxisInfo(struct soap*, const char*, int, const ns2__AxisInfo *, const char*);
SOAP_FMAC3 ns2__AxisInfo * SOAP_FMAC4 soap_in_ns2__AxisInfo(struct soap*, const char*, ns2__AxisInfo *, const char*);

#ifndef soap_write_ns2__AxisInfo
#define soap_write_ns2__AxisInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:AxisInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__AxisInfo * SOAP_FMAC4 soap_get_ns2__AxisInfo(struct soap*, ns2__AxisInfo *, const char*, const char*);

#ifndef soap_read_ns2__AxisInfo
#define soap_read_ns2__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__AxisInfo * SOAP_FMAC2 soap_instantiate_ns2__AxisInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AxisInfo * soap_new_ns2__AxisInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AxisInfo(soap, n, NULL, NULL, NULL); }

inline ns2__AxisInfo * soap_new_req_ns2__AxisInfo(struct soap *soap) { ns2__AxisInfo *_p = soap_instantiate_ns2__AxisInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AxisInfo * soap_new_set_ns2__AxisInfo(struct soap *soap, std::vector<ns2__HierarchyInfo * >& HierarchyInfo, std::string *name) { ns2__AxisInfo *_p = soap_instantiate_ns2__AxisInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AxisInfo::HierarchyInfo = HierarchyInfo; _p->ns2__AxisInfo::name = name; } return _p; }

inline void soap_delete_ns2__AxisInfo(struct soap *soap, ns2__AxisInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AxisInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__AxesInfo
#define SOAP_TYPE_ns2__AxesInfo (105)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__AxesInfo(struct soap*, const char*, int, const ns2__AxesInfo *, const char*);
SOAP_FMAC3 ns2__AxesInfo * SOAP_FMAC4 soap_in_ns2__AxesInfo(struct soap*, const char*, ns2__AxesInfo *, const char*);

#ifndef soap_write_ns2__AxesInfo
#define soap_write_ns2__AxesInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:AxesInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__AxesInfo * SOAP_FMAC4 soap_get_ns2__AxesInfo(struct soap*, ns2__AxesInfo *, const char*, const char*);

#ifndef soap_read_ns2__AxesInfo
#define soap_read_ns2__AxesInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__AxesInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__AxesInfo * SOAP_FMAC2 soap_instantiate_ns2__AxesInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__AxesInfo * soap_new_ns2__AxesInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__AxesInfo(soap, n, NULL, NULL, NULL); }

inline ns2__AxesInfo * soap_new_req_ns2__AxesInfo(struct soap *soap) { ns2__AxesInfo *_p = soap_instantiate_ns2__AxesInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__AxesInfo * soap_new_set_ns2__AxesInfo(struct soap *soap, std::vector<ns2__AxisInfo * >& AxisInfo) { ns2__AxesInfo *_p = soap_instantiate_ns2__AxesInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__AxesInfo::AxisInfo = AxisInfo; } return _p; }

inline void soap_delete_ns2__AxesInfo(struct soap *soap, ns2__AxesInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__AxesInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Cube
#define SOAP_TYPE_ns2__Cube (104)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Cube(struct soap*, const char*, int, const ns2__Cube *, const char*);
SOAP_FMAC3 ns2__Cube * SOAP_FMAC4 soap_in_ns2__Cube(struct soap*, const char*, ns2__Cube *, const char*);

#ifndef soap_write_ns2__Cube
#define soap_write_ns2__Cube(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Cube", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Cube * SOAP_FMAC4 soap_get_ns2__Cube(struct soap*, ns2__Cube *, const char*, const char*);

#ifndef soap_read_ns2__Cube
#define soap_read_ns2__Cube(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Cube(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Cube * SOAP_FMAC2 soap_instantiate_ns2__Cube(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Cube * soap_new_ns2__Cube(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Cube(soap, n, NULL, NULL, NULL); }

inline ns2__Cube * soap_new_req_ns2__Cube(struct soap *soap) { ns2__Cube *_p = soap_instantiate_ns2__Cube(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Cube * soap_new_set_ns2__Cube(struct soap *soap, std::string *CubeName) { ns2__Cube *_p = soap_instantiate_ns2__Cube(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Cube::CubeName = CubeName; } return _p; }

inline void soap_delete_ns2__Cube(struct soap *soap, ns2__Cube *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Cube(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CubeInfo
#define SOAP_TYPE_ns2__CubeInfo (103)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CubeInfo(struct soap*, const char*, int, const ns2__CubeInfo *, const char*);
SOAP_FMAC3 ns2__CubeInfo * SOAP_FMAC4 soap_in_ns2__CubeInfo(struct soap*, const char*, ns2__CubeInfo *, const char*);

#ifndef soap_write_ns2__CubeInfo
#define soap_write_ns2__CubeInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:CubeInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CubeInfo * SOAP_FMAC4 soap_get_ns2__CubeInfo(struct soap*, ns2__CubeInfo *, const char*, const char*);

#ifndef soap_read_ns2__CubeInfo
#define soap_read_ns2__CubeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CubeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__CubeInfo * SOAP_FMAC2 soap_instantiate_ns2__CubeInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CubeInfo * soap_new_ns2__CubeInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CubeInfo(soap, n, NULL, NULL, NULL); }

inline ns2__CubeInfo * soap_new_req_ns2__CubeInfo(struct soap *soap) { ns2__CubeInfo *_p = soap_instantiate_ns2__CubeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CubeInfo * soap_new_set_ns2__CubeInfo(struct soap *soap, std::vector<ns2__Cube * >& Cube) { ns2__CubeInfo *_p = soap_instantiate_ns2__CubeInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CubeInfo::Cube = Cube; } return _p; }

inline void soap_delete_ns2__CubeInfo(struct soap *soap, ns2__CubeInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CubeInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__OlapInfo
#define SOAP_TYPE_ns2__OlapInfo (102)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__OlapInfo(struct soap*, const char*, int, const ns2__OlapInfo *, const char*);
SOAP_FMAC3 ns2__OlapInfo * SOAP_FMAC4 soap_in_ns2__OlapInfo(struct soap*, const char*, ns2__OlapInfo *, const char*);

#ifndef soap_write_ns2__OlapInfo
#define soap_write_ns2__OlapInfo(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:OlapInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__OlapInfo * SOAP_FMAC4 soap_get_ns2__OlapInfo(struct soap*, ns2__OlapInfo *, const char*, const char*);

#ifndef soap_read_ns2__OlapInfo
#define soap_read_ns2__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__OlapInfo * SOAP_FMAC2 soap_instantiate_ns2__OlapInfo(struct soap*, int, const char*, const char*, size_t*);

inline ns2__OlapInfo * soap_new_ns2__OlapInfo(struct soap *soap, int n = -1) { return soap_instantiate_ns2__OlapInfo(soap, n, NULL, NULL, NULL); }

inline ns2__OlapInfo * soap_new_req_ns2__OlapInfo(struct soap *soap) { ns2__OlapInfo *_p = soap_instantiate_ns2__OlapInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__OlapInfo * soap_new_set_ns2__OlapInfo(struct soap *soap, ns2__CubeInfo *CubeInfo, ns2__AxesInfo *AxesInfo, ns2__CellInfo *CellInfo) { ns2__OlapInfo *_p = soap_instantiate_ns2__OlapInfo(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__OlapInfo::CubeInfo = CubeInfo; _p->ns2__OlapInfo::AxesInfo = AxesInfo; _p->ns2__OlapInfo::CellInfo = CellInfo; } return _p; }

inline void soap_delete_ns2__OlapInfo(struct soap *soap, ns2__OlapInfo *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__OlapInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Row
#define SOAP_TYPE_ns2__Row (101)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Row(struct soap*, const char*, int, const ns2__Row *, const char*);
SOAP_FMAC3 ns2__Row * SOAP_FMAC4 soap_in_ns2__Row(struct soap*, const char*, ns2__Row *, const char*);

#ifndef soap_write_ns2__Row
#define soap_write_ns2__Row(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Row", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Row * SOAP_FMAC4 soap_get_ns2__Row(struct soap*, ns2__Row *, const char*, const char*);

#ifndef soap_read_ns2__Row
#define soap_read_ns2__Row(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Row(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Row * SOAP_FMAC2 soap_instantiate_ns2__Row(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Row * soap_new_ns2__Row(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Row(soap, n, NULL, NULL, NULL); }

inline ns2__Row * soap_new_req_ns2__Row(struct soap *soap) { ns2__Row *_p = soap_instantiate_ns2__Row(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Row * soap_new_set_ns2__Row(struct soap *soap, std::vector<char * >& __any) { ns2__Row *_p = soap_instantiate_ns2__Row(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Row::__any = __any; } return _p; }

inline void soap_delete_ns2__Row(struct soap *soap, ns2__Row *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Row(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Members
#define SOAP_TYPE_ns2__Members (100)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Members(struct soap*, const char*, int, const ns2__Members *, const char*);
SOAP_FMAC3 ns2__Members * SOAP_FMAC4 soap_in_ns2__Members(struct soap*, const char*, ns2__Members *, const char*);

#ifndef soap_write_ns2__Members
#define soap_write_ns2__Members(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Members", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Members * SOAP_FMAC4 soap_get_ns2__Members(struct soap*, ns2__Members *, const char*, const char*);

#ifndef soap_read_ns2__Members
#define soap_read_ns2__Members(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Members(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Members * SOAP_FMAC2 soap_instantiate_ns2__Members(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Members * soap_new_ns2__Members(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Members(soap, n, NULL, NULL, NULL); }

inline ns2__Members * soap_new_req_ns2__Members(struct soap *soap) { ns2__Members *_p = soap_instantiate_ns2__Members(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Members * soap_new_set_ns2__Members(struct soap *soap, std::vector<ns2__Member * >& Member, std::string *Hierarchy) { ns2__Members *_p = soap_instantiate_ns2__Members(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Members::Member = Member; _p->ns2__Members::Hierarchy = Hierarchy; } return _p; }

inline void soap_delete_ns2__Members(struct soap *soap, ns2__Members *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Members(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CrossProduct
#define SOAP_TYPE_ns2__CrossProduct (99)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CrossProduct(struct soap*, const char*, int, const ns2__CrossProduct *, const char*);
SOAP_FMAC3 ns2__CrossProduct * SOAP_FMAC4 soap_in_ns2__CrossProduct(struct soap*, const char*, ns2__CrossProduct *, const char*);

#ifndef soap_write_ns2__CrossProduct
#define soap_write_ns2__CrossProduct(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:CrossProduct", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CrossProduct * SOAP_FMAC4 soap_get_ns2__CrossProduct(struct soap*, ns2__CrossProduct *, const char*, const char*);

#ifndef soap_read_ns2__CrossProduct
#define soap_read_ns2__CrossProduct(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CrossProduct(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__CrossProduct * SOAP_FMAC2 soap_instantiate_ns2__CrossProduct(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CrossProduct * soap_new_ns2__CrossProduct(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CrossProduct(soap, n, NULL, NULL, NULL); }

inline ns2__CrossProduct * soap_new_req_ns2__CrossProduct(struct soap *soap, int Size) { ns2__CrossProduct *_p = soap_instantiate_ns2__CrossProduct(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CrossProduct::Size = Size; } return _p; }

inline ns2__CrossProduct * soap_new_set_ns2__CrossProduct(struct soap *soap, std::vector<ns2__Members * >& Members, int Size) { ns2__CrossProduct *_p = soap_instantiate_ns2__CrossProduct(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CrossProduct::Members = Members; _p->ns2__CrossProduct::Size = Size; } return _p; }

inline void soap_delete_ns2__CrossProduct(struct soap *soap, ns2__CrossProduct *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CrossProduct(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Member
#define SOAP_TYPE_ns2__Member (98)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Member(struct soap*, const char*, int, const ns2__Member *, const char*);
SOAP_FMAC3 ns2__Member * SOAP_FMAC4 soap_in_ns2__Member(struct soap*, const char*, ns2__Member *, const char*);

#ifndef soap_write_ns2__Member
#define soap_write_ns2__Member(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Member * SOAP_FMAC4 soap_get_ns2__Member(struct soap*, ns2__Member *, const char*, const char*);

#ifndef soap_read_ns2__Member
#define soap_read_ns2__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Member(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Member * SOAP_FMAC2 soap_instantiate_ns2__Member(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Member * soap_new_ns2__Member(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Member(soap, n, NULL, NULL, NULL); }

inline ns2__Member * soap_new_req_ns2__Member(struct soap *soap) { ns2__Member *_p = soap_instantiate_ns2__Member(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Member * soap_new_set_ns2__Member(struct soap *soap, std::string *UName, std::string *Caption, std::string *LName, std::string *LNum, std::string *DisplayInfo, std::vector<char * >& __any, std::string *Hierarchy) { ns2__Member *_p = soap_instantiate_ns2__Member(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Member::UName = UName; _p->ns2__Member::Caption = Caption; _p->ns2__Member::LName = LName; _p->ns2__Member::LNum = LNum; _p->ns2__Member::DisplayInfo = DisplayInfo; _p->ns2__Member::__any = __any; _p->ns2__Member::Hierarchy = Hierarchy; } return _p; }

inline void soap_delete_ns2__Member(struct soap *soap, ns2__Member *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Tuple
#define SOAP_TYPE_ns2__Tuple (97)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Tuple(struct soap*, const char*, int, const ns2__Tuple *, const char*);
SOAP_FMAC3 ns2__Tuple * SOAP_FMAC4 soap_in_ns2__Tuple(struct soap*, const char*, ns2__Tuple *, const char*);

#ifndef soap_write_ns2__Tuple
#define soap_write_ns2__Tuple(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Tuple", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Tuple * SOAP_FMAC4 soap_get_ns2__Tuple(struct soap*, ns2__Tuple *, const char*, const char*);

#ifndef soap_read_ns2__Tuple
#define soap_read_ns2__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Tuple * SOAP_FMAC2 soap_instantiate_ns2__Tuple(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Tuple * soap_new_ns2__Tuple(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Tuple(soap, n, NULL, NULL, NULL); }

inline ns2__Tuple * soap_new_req_ns2__Tuple(struct soap *soap) { ns2__Tuple *_p = soap_instantiate_ns2__Tuple(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Tuple * soap_new_set_ns2__Tuple(struct soap *soap, std::vector<ns2__Member * >& Member) { ns2__Tuple *_p = soap_instantiate_ns2__Tuple(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Tuple::Member = Member; } return _p; }

inline void soap_delete_ns2__Tuple(struct soap *soap, ns2__Tuple *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Tuple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Tuples
#define SOAP_TYPE_ns2__Tuples (96)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Tuples(struct soap*, const char*, int, const ns2__Tuples *, const char*);
SOAP_FMAC3 ns2__Tuples * SOAP_FMAC4 soap_in_ns2__Tuples(struct soap*, const char*, ns2__Tuples *, const char*);

#ifndef soap_write_ns2__Tuples
#define soap_write_ns2__Tuples(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Tuples", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Tuples * SOAP_FMAC4 soap_get_ns2__Tuples(struct soap*, ns2__Tuples *, const char*, const char*);

#ifndef soap_read_ns2__Tuples
#define soap_read_ns2__Tuples(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Tuples(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Tuples * SOAP_FMAC2 soap_instantiate_ns2__Tuples(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Tuples * soap_new_ns2__Tuples(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Tuples(soap, n, NULL, NULL, NULL); }

inline ns2__Tuples * soap_new_req_ns2__Tuples(struct soap *soap) { ns2__Tuples *_p = soap_instantiate_ns2__Tuples(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Tuples * soap_new_set_ns2__Tuples(struct soap *soap, std::vector<ns2__Tuple * >& Tuple) { ns2__Tuples *_p = soap_instantiate_ns2__Tuples(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Tuples::Tuple = Tuple; } return _p; }

inline void soap_delete_ns2__Tuples(struct soap *soap, ns2__Tuples *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Tuples(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Axis
#define SOAP_TYPE_ns2__Axis (95)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Axis(struct soap*, const char*, int, const ns2__Axis *, const char*);
SOAP_FMAC3 ns2__Axis * SOAP_FMAC4 soap_in_ns2__Axis(struct soap*, const char*, ns2__Axis *, const char*);

#ifndef soap_write_ns2__Axis
#define soap_write_ns2__Axis(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Axis * SOAP_FMAC4 soap_get_ns2__Axis(struct soap*, ns2__Axis *, const char*, const char*);

#ifndef soap_read_ns2__Axis
#define soap_read_ns2__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Axis * SOAP_FMAC2 soap_instantiate_ns2__Axis(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Axis * soap_new_ns2__Axis(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Axis(soap, n, NULL, NULL, NULL); }

inline ns2__Axis * soap_new_req_ns2__Axis(struct soap *soap, int __size_Axis, __ns2__union_Axis *__union_Axis) { ns2__Axis *_p = soap_instantiate_ns2__Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Axis::__size_Axis = __size_Axis; _p->ns2__Axis::__union_Axis = __union_Axis; } return _p; }

inline ns2__Axis * soap_new_set_ns2__Axis(struct soap *soap, int __size_Axis, __ns2__union_Axis *__union_Axis, std::string *name) { ns2__Axis *_p = soap_instantiate_ns2__Axis(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Axis::__size_Axis = __size_Axis; _p->ns2__Axis::__union_Axis = __union_Axis; _p->ns2__Axis::name = name; } return _p; }

inline void soap_delete_ns2__Axis(struct soap *soap, ns2__Axis *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Axes
#define SOAP_TYPE_ns2__Axes (94)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Axes(struct soap*, const char*, int, const ns2__Axes *, const char*);
SOAP_FMAC3 ns2__Axes * SOAP_FMAC4 soap_in_ns2__Axes(struct soap*, const char*, ns2__Axes *, const char*);

#ifndef soap_write_ns2__Axes
#define soap_write_ns2__Axes(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Axes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Axes * SOAP_FMAC4 soap_get_ns2__Axes(struct soap*, ns2__Axes *, const char*, const char*);

#ifndef soap_read_ns2__Axes
#define soap_read_ns2__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Axes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Axes * SOAP_FMAC2 soap_instantiate_ns2__Axes(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Axes * soap_new_ns2__Axes(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Axes(soap, n, NULL, NULL, NULL); }

inline ns2__Axes * soap_new_req_ns2__Axes(struct soap *soap) { ns2__Axes *_p = soap_instantiate_ns2__Axes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__Axes * soap_new_set_ns2__Axes(struct soap *soap, std::vector<ns2__Axis * >& Axis) { ns2__Axes *_p = soap_instantiate_ns2__Axes(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Axes::Axis = Axis; } return _p; }

inline void soap_delete_ns2__Axes(struct soap *soap, ns2__Axes *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Axes(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__Cell
#define SOAP_TYPE_ns2__Cell (93)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__Cell(struct soap*, const char*, int, const ns2__Cell *, const char*);
SOAP_FMAC3 ns2__Cell * SOAP_FMAC4 soap_in_ns2__Cell(struct soap*, const char*, ns2__Cell *, const char*);

#ifndef soap_write_ns2__Cell
#define soap_write_ns2__Cell(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:Cell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Cell * SOAP_FMAC4 soap_get_ns2__Cell(struct soap*, ns2__Cell *, const char*, const char*);

#ifndef soap_read_ns2__Cell
#define soap_read_ns2__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__Cell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__Cell * SOAP_FMAC2 soap_instantiate_ns2__Cell(struct soap*, int, const char*, const char*, size_t*);

inline ns2__Cell * soap_new_ns2__Cell(struct soap *soap, int n = -1) { return soap_instantiate_ns2__Cell(soap, n, NULL, NULL, NULL); }

inline ns2__Cell * soap_new_req_ns2__Cell(struct soap *soap, int CellOrdinal) { ns2__Cell *_p = soap_instantiate_ns2__Cell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Cell::CellOrdinal = CellOrdinal; } return _p; }

inline ns2__Cell * soap_new_set_ns2__Cell(struct soap *soap, double *Value, std::vector<char * >& __any, int CellOrdinal) { ns2__Cell *_p = soap_instantiate_ns2__Cell(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__Cell::Value = Value; _p->ns2__Cell::__any = __any; _p->ns2__Cell::CellOrdinal = CellOrdinal; } return _p; }

inline void soap_delete_ns2__Cell(struct soap *soap, ns2__Cell *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__Cell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__CellData
#define SOAP_TYPE_ns2__CellData (92)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__CellData(struct soap*, const char*, int, const ns2__CellData *, const char*);
SOAP_FMAC3 ns2__CellData * SOAP_FMAC4 soap_in_ns2__CellData(struct soap*, const char*, ns2__CellData *, const char*);

#ifndef soap_write_ns2__CellData
#define soap_write_ns2__CellData(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:CellData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CellData * SOAP_FMAC4 soap_get_ns2__CellData(struct soap*, ns2__CellData *, const char*, const char*);

#ifndef soap_read_ns2__CellData
#define soap_read_ns2__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__CellData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__CellData * SOAP_FMAC2 soap_instantiate_ns2__CellData(struct soap*, int, const char*, const char*, size_t*);

inline ns2__CellData * soap_new_ns2__CellData(struct soap *soap, int n = -1) { return soap_instantiate_ns2__CellData(soap, n, NULL, NULL, NULL); }

inline ns2__CellData * soap_new_req_ns2__CellData(struct soap *soap) { ns2__CellData *_p = soap_instantiate_ns2__CellData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns2__CellData * soap_new_set_ns2__CellData(struct soap *soap, std::vector<ns2__Cell * >& Cell) { ns2__CellData *_p = soap_instantiate_ns2__CellData(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__CellData::Cell = Cell; } return _p; }

inline void soap_delete_ns2__CellData(struct soap *soap, ns2__CellData *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__CellData(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns2__ResultXmlRoot
#define SOAP_TYPE_ns2__ResultXmlRoot (91)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__ResultXmlRoot(struct soap*, const char*, int, const ns2__ResultXmlRoot *, const char*);
SOAP_FMAC3 ns2__ResultXmlRoot * SOAP_FMAC4 soap_in_ns2__ResultXmlRoot(struct soap*, const char*, ns2__ResultXmlRoot *, const char*);

#ifndef soap_write_ns2__ResultXmlRoot
#define soap_write_ns2__ResultXmlRoot(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns2:ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__ResultXmlRoot * SOAP_FMAC4 soap_get_ns2__ResultXmlRoot(struct soap*, ns2__ResultXmlRoot *, const char*, const char*);

#ifndef soap_read_ns2__ResultXmlRoot
#define soap_read_ns2__ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_ns2__ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns2__ResultXmlRoot * SOAP_FMAC2 soap_instantiate_ns2__ResultXmlRoot(struct soap*, int, const char*, const char*, size_t*);

inline ns2__ResultXmlRoot * soap_new_ns2__ResultXmlRoot(struct soap *soap, int n = -1) { return soap_instantiate_ns2__ResultXmlRoot(soap, n, NULL, NULL, NULL); }

inline ns2__ResultXmlRoot * soap_new_req_ns2__ResultXmlRoot(struct soap *soap, int __size_ResultXmlRoot, __ns2__union_ResultXmlRoot *__union_ResultXmlRoot) { ns2__ResultXmlRoot *_p = soap_instantiate_ns2__ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ResultXmlRoot::__size_ResultXmlRoot = __size_ResultXmlRoot; _p->ns2__ResultXmlRoot::__union_ResultXmlRoot = __union_ResultXmlRoot; } return _p; }

inline ns2__ResultXmlRoot * soap_new_set_ns2__ResultXmlRoot(struct soap *soap, char *xsd__schema, int __size_ResultXmlRoot, __ns2__union_ResultXmlRoot *__union_ResultXmlRoot) { ns2__ResultXmlRoot *_p = soap_instantiate_ns2__ResultXmlRoot(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns2__ResultXmlRoot::xsd__schema = xsd__schema; _p->ns2__ResultXmlRoot::__size_ResultXmlRoot = __size_ResultXmlRoot; _p->ns2__ResultXmlRoot::__union_ResultXmlRoot = __union_ResultXmlRoot; } return _p; }

inline void soap_delete_ns2__ResultXmlRoot(struct soap *soap, ns2__ResultXmlRoot *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns2__ResultXmlRoot(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__DiscoverResponse
#define SOAP_TYPE__ns1__DiscoverResponse (90)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DiscoverResponse(struct soap*, const char*, int, const _ns1__DiscoverResponse *, const char*);
SOAP_FMAC3 _ns1__DiscoverResponse * SOAP_FMAC4 soap_in__ns1__DiscoverResponse(struct soap*, const char*, _ns1__DiscoverResponse *, const char*);

#ifndef soap_write__ns1__DiscoverResponse
#define soap_write__ns1__DiscoverResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:DiscoverResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__DiscoverResponse * SOAP_FMAC4 soap_get__ns1__DiscoverResponse(struct soap*, _ns1__DiscoverResponse *, const char*, const char*);

#ifndef soap_read__ns1__DiscoverResponse
#define soap_read__ns1__DiscoverResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__DiscoverResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _ns1__DiscoverResponse * SOAP_FMAC2 soap_instantiate__ns1__DiscoverResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DiscoverResponse * soap_new__ns1__DiscoverResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__DiscoverResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__DiscoverResponse * soap_new_req__ns1__DiscoverResponse(struct soap *soap, ns1__ResultSet *return_) { _ns1__DiscoverResponse *_p = soap_instantiate__ns1__DiscoverResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DiscoverResponse::return_ = return_; } return _p; }

inline _ns1__DiscoverResponse * soap_new_set__ns1__DiscoverResponse(struct soap *soap, ns1__ResultSet *return_, char *__anyAttribute) { _ns1__DiscoverResponse *_p = soap_instantiate__ns1__DiscoverResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__DiscoverResponse::return_ = return_; _p->_ns1__DiscoverResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns1__DiscoverResponse(struct soap *soap, _ns1__DiscoverResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__DiscoverResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__Discover
#define SOAP_TYPE__ns1__Discover (89)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Discover(struct soap*, const char*, int, const _ns1__Discover *, const char*);
SOAP_FMAC3 _ns1__Discover * SOAP_FMAC4 soap_in__ns1__Discover(struct soap*, const char*, _ns1__Discover *, const char*);

#ifndef soap_write__ns1__Discover
#define soap_write__ns1__Discover(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Discover", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__Discover * SOAP_FMAC4 soap_get__ns1__Discover(struct soap*, _ns1__Discover *, const char*, const char*);

#ifndef soap_read__ns1__Discover
#define soap_read__ns1__Discover(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__Discover(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _ns1__Discover * SOAP_FMAC2 soap_instantiate__ns1__Discover(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Discover * soap_new__ns1__Discover(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Discover(soap, n, NULL, NULL, NULL); }

inline _ns1__Discover * soap_new_req__ns1__Discover(struct soap *soap, ns1__Restrictions *Restrictions, ns1__Properties *Properties) { _ns1__Discover *_p = soap_instantiate__ns1__Discover(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__Discover::Restrictions = Restrictions; _p->_ns1__Discover::Properties = Properties; } return _p; }

inline _ns1__Discover * soap_new_set__ns1__Discover(struct soap *soap, std::string *RequestType, ns1__Restrictions *Restrictions, ns1__Properties *Properties, char *__anyAttribute) { _ns1__Discover *_p = soap_instantiate__ns1__Discover(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__Discover::RequestType = RequestType; _p->_ns1__Discover::Restrictions = Restrictions; _p->_ns1__Discover::Properties = Properties; _p->_ns1__Discover::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns1__Discover(struct soap *soap, _ns1__Discover *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Discover(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__ExecuteResponse
#define SOAP_TYPE__ns1__ExecuteResponse (88)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__ExecuteResponse(struct soap*, const char*, int, const _ns1__ExecuteResponse *, const char*);
SOAP_FMAC3 _ns1__ExecuteResponse * SOAP_FMAC4 soap_in__ns1__ExecuteResponse(struct soap*, const char*, _ns1__ExecuteResponse *, const char*);

#ifndef soap_write__ns1__ExecuteResponse
#define soap_write__ns1__ExecuteResponse(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:ExecuteResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__ExecuteResponse * SOAP_FMAC4 soap_get__ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse *, const char*, const char*);

#ifndef soap_read__ns1__ExecuteResponse
#define soap_read__ns1__ExecuteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__ExecuteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _ns1__ExecuteResponse * SOAP_FMAC2 soap_instantiate__ns1__ExecuteResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__ExecuteResponse * soap_new__ns1__ExecuteResponse(struct soap *soap, int n = -1) { return soap_instantiate__ns1__ExecuteResponse(soap, n, NULL, NULL, NULL); }

inline _ns1__ExecuteResponse * soap_new_req__ns1__ExecuteResponse(struct soap *soap, ns1__ResultSet *return_) { _ns1__ExecuteResponse *_p = soap_instantiate__ns1__ExecuteResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__ExecuteResponse::return_ = return_; } return _p; }

inline _ns1__ExecuteResponse * soap_new_set__ns1__ExecuteResponse(struct soap *soap, ns1__ResultSet *return_, char *__anyAttribute) { _ns1__ExecuteResponse *_p = soap_instantiate__ns1__ExecuteResponse(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__ExecuteResponse::return_ = return_; _p->_ns1__ExecuteResponse::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns1__ExecuteResponse(struct soap *soap, _ns1__ExecuteResponse *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__ExecuteResponse(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__Execute
#define SOAP_TYPE__ns1__Execute (87)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Execute(struct soap*, const char*, int, const _ns1__Execute *, const char*);
SOAP_FMAC3 _ns1__Execute * SOAP_FMAC4 soap_in__ns1__Execute(struct soap*, const char*, _ns1__Execute *, const char*);

#ifndef soap_write__ns1__Execute
#define soap_write__ns1__Execute(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Execute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__Execute * SOAP_FMAC4 soap_get__ns1__Execute(struct soap*, _ns1__Execute *, const char*, const char*);

#ifndef soap_read__ns1__Execute
#define soap_read__ns1__Execute(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__Execute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 _ns1__Execute * SOAP_FMAC2 soap_instantiate__ns1__Execute(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Execute * soap_new__ns1__Execute(struct soap *soap, int n = -1) { return soap_instantiate__ns1__Execute(soap, n, NULL, NULL, NULL); }

inline _ns1__Execute * soap_new_req__ns1__Execute(struct soap *soap, ns1__CommandStatement *Command, ns1__Properties *Properties) { _ns1__Execute *_p = soap_instantiate__ns1__Execute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__Execute::Command = Command; _p->_ns1__Execute::Properties = Properties; } return _p; }

inline _ns1__Execute * soap_new_set__ns1__Execute(struct soap *soap, ns1__CommandStatement *Command, ns1__Properties *Properties, ns1__Parameters *Parameters, char *__anyAttribute) { _ns1__Execute *_p = soap_instantiate__ns1__Execute(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__Execute::Command = Command; _p->_ns1__Execute::Properties = Properties; _p->_ns1__Execute::Parameters = Parameters; _p->_ns1__Execute::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete__ns1__Execute(struct soap *soap, _ns1__Execute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__Execute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__RestrictionList
#define SOAP_TYPE_ns1__RestrictionList (86)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__RestrictionList(struct soap*, const char*, int, const ns1__RestrictionList *, const char*);
SOAP_FMAC3 ns1__RestrictionList * SOAP_FMAC4 soap_in_ns1__RestrictionList(struct soap*, const char*, ns1__RestrictionList *, const char*);

#ifndef soap_write_ns1__RestrictionList
#define soap_write_ns1__RestrictionList(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:RestrictionList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__RestrictionList * SOAP_FMAC4 soap_get_ns1__RestrictionList(struct soap*, ns1__RestrictionList *, const char*, const char*);

#ifndef soap_read_ns1__RestrictionList
#define soap_read_ns1__RestrictionList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__RestrictionList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__RestrictionList * SOAP_FMAC2 soap_instantiate_ns1__RestrictionList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__RestrictionList * soap_new_ns1__RestrictionList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__RestrictionList(soap, n, NULL, NULL, NULL); }

inline ns1__RestrictionList * soap_new_req_ns1__RestrictionList(struct soap *soap) { ns1__RestrictionList *_p = soap_instantiate_ns1__RestrictionList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__RestrictionList * soap_new_set_ns1__RestrictionList(struct soap *soap, std::vector<char * >& __any) { ns1__RestrictionList *_p = soap_instantiate_ns1__RestrictionList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__RestrictionList::__any = __any; } return _p; }

inline void soap_delete_ns1__RestrictionList(struct soap *soap, ns1__RestrictionList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__RestrictionList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Restrictions
#define SOAP_TYPE_ns1__Restrictions (85)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Restrictions(struct soap*, const char*, int, const ns1__Restrictions *, const char*);
SOAP_FMAC3 ns1__Restrictions * SOAP_FMAC4 soap_in_ns1__Restrictions(struct soap*, const char*, ns1__Restrictions *, const char*);

#ifndef soap_write_ns1__Restrictions
#define soap_write_ns1__Restrictions(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Restrictions", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Restrictions * SOAP_FMAC4 soap_get_ns1__Restrictions(struct soap*, ns1__Restrictions *, const char*, const char*);

#ifndef soap_read_ns1__Restrictions
#define soap_read_ns1__Restrictions(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Restrictions(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__Restrictions * SOAP_FMAC2 soap_instantiate_ns1__Restrictions(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Restrictions * soap_new_ns1__Restrictions(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Restrictions(soap, n, NULL, NULL, NULL); }

inline ns1__Restrictions * soap_new_req_ns1__Restrictions(struct soap *soap) { ns1__Restrictions *_p = soap_instantiate_ns1__Restrictions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__Restrictions * soap_new_set_ns1__Restrictions(struct soap *soap, ns1__RestrictionList *RestrictionList) { ns1__Restrictions *_p = soap_instantiate_ns1__Restrictions(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Restrictions::RestrictionList = RestrictionList; } return _p; }

inline void soap_delete_ns1__Restrictions(struct soap *soap, ns1__Restrictions *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Restrictions(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__EndSession
#define SOAP_TYPE_ns1__EndSession (84)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__EndSession(struct soap*, const char*, int, const ns1__EndSession *, const char*);
SOAP_FMAC3 ns1__EndSession * SOAP_FMAC4 soap_in_ns1__EndSession(struct soap*, const char*, ns1__EndSession *, const char*);

#ifndef soap_write_ns1__EndSession
#define soap_write_ns1__EndSession(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:EndSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__EndSession * SOAP_FMAC4 soap_get_ns1__EndSession(struct soap*, ns1__EndSession *, const char*, const char*);

#ifndef soap_read_ns1__EndSession
#define soap_read_ns1__EndSession(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__EndSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__EndSession * SOAP_FMAC2 soap_instantiate_ns1__EndSession(struct soap*, int, const char*, const char*, size_t*);

inline ns1__EndSession * soap_new_ns1__EndSession(struct soap *soap, int n = -1) { return soap_instantiate_ns1__EndSession(soap, n, NULL, NULL, NULL); }

inline ns1__EndSession * soap_new_req_ns1__EndSession(struct soap *soap) { ns1__EndSession *_p = soap_instantiate_ns1__EndSession(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__EndSession * soap_new_set_ns1__EndSession(struct soap *soap, std::string *SessionId, char *__anyAttribute) { ns1__EndSession *_p = soap_instantiate_ns1__EndSession(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__EndSession::SessionId = SessionId; _p->ns1__EndSession::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns1__EndSession(struct soap *soap, ns1__EndSession *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__EndSession(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Session
#define SOAP_TYPE_ns1__Session (83)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Session(struct soap*, const char*, int, const ns1__Session *, const char*);
SOAP_FMAC3 ns1__Session * SOAP_FMAC4 soap_in_ns1__Session(struct soap*, const char*, ns1__Session *, const char*);

#ifndef soap_write_ns1__Session
#define soap_write_ns1__Session(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Session", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Session * SOAP_FMAC4 soap_get_ns1__Session(struct soap*, ns1__Session *, const char*, const char*);

#ifndef soap_read_ns1__Session
#define soap_read_ns1__Session(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Session(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__Session * SOAP_FMAC2 soap_instantiate_ns1__Session(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Session * soap_new_ns1__Session(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Session(soap, n, NULL, NULL, NULL); }

inline ns1__Session * soap_new_req_ns1__Session(struct soap *soap) { ns1__Session *_p = soap_instantiate_ns1__Session(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__Session * soap_new_set_ns1__Session(struct soap *soap, std::string *SessionId, char *__anyAttribute) { ns1__Session *_p = soap_instantiate_ns1__Session(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Session::SessionId = SessionId; _p->ns1__Session::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns1__Session(struct soap *soap, ns1__Session *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Session(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__BeginSession
#define SOAP_TYPE_ns1__BeginSession (82)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__BeginSession(struct soap*, const char*, int, const ns1__BeginSession *, const char*);
SOAP_FMAC3 ns1__BeginSession * SOAP_FMAC4 soap_in_ns1__BeginSession(struct soap*, const char*, ns1__BeginSession *, const char*);

#ifndef soap_write_ns1__BeginSession
#define soap_write_ns1__BeginSession(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:BeginSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__BeginSession * SOAP_FMAC4 soap_get_ns1__BeginSession(struct soap*, ns1__BeginSession *, const char*, const char*);

#ifndef soap_read_ns1__BeginSession
#define soap_read_ns1__BeginSession(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__BeginSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__BeginSession * SOAP_FMAC2 soap_instantiate_ns1__BeginSession(struct soap*, int, const char*, const char*, size_t*);

inline ns1__BeginSession * soap_new_ns1__BeginSession(struct soap *soap, int n = -1) { return soap_instantiate_ns1__BeginSession(soap, n, NULL, NULL, NULL); }

inline ns1__BeginSession * soap_new_req_ns1__BeginSession(struct soap *soap) { ns1__BeginSession *_p = soap_instantiate_ns1__BeginSession(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__BeginSession * soap_new_set_ns1__BeginSession(struct soap *soap, char *__anyAttribute) { ns1__BeginSession *_p = soap_instantiate_ns1__BeginSession(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__BeginSession::__anyAttribute = __anyAttribute; } return _p; }

inline void soap_delete_ns1__BeginSession(struct soap *soap, ns1__BeginSession *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__BeginSession(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__ResultSet
#define SOAP_TYPE_ns1__ResultSet (81)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__ResultSet(struct soap*, const char*, int, const ns1__ResultSet *, const char*);
SOAP_FMAC3 ns1__ResultSet * SOAP_FMAC4 soap_in_ns1__ResultSet(struct soap*, const char*, ns1__ResultSet *, const char*);

#ifndef soap_write_ns1__ResultSet
#define soap_write_ns1__ResultSet(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:ResultSet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__ResultSet * SOAP_FMAC4 soap_get_ns1__ResultSet(struct soap*, ns1__ResultSet *, const char*, const char*);

#ifndef soap_read_ns1__ResultSet
#define soap_read_ns1__ResultSet(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__ResultSet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__ResultSet * SOAP_FMAC2 soap_instantiate_ns1__ResultSet(struct soap*, int, const char*, const char*, size_t*);

inline ns1__ResultSet * soap_new_ns1__ResultSet(struct soap *soap, int n = -1) { return soap_instantiate_ns1__ResultSet(soap, n, NULL, NULL, NULL); }

inline ns1__ResultSet * soap_new_req_ns1__ResultSet(struct soap *soap) { ns1__ResultSet *_p = soap_instantiate_ns1__ResultSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__ResultSet * soap_new_set_ns1__ResultSet(struct soap *soap, ns2__ResultXmlRoot *ns2__root, ns4__ResultXmlRoot *ns4__root, ns5__ResultXmlRoot *ns5__root) { ns1__ResultSet *_p = soap_instantiate_ns1__ResultSet(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__ResultSet::ns2__root = ns2__root; _p->ns1__ResultSet::ns4__root = ns4__root; _p->ns1__ResultSet::ns5__root = ns5__root; } return _p; }

inline void soap_delete_ns1__ResultSet(struct soap *soap, ns1__ResultSet *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__ResultSet(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Parameters
#define SOAP_TYPE_ns1__Parameters (80)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Parameters(struct soap*, const char*, int, const ns1__Parameters *, const char*);
SOAP_FMAC3 ns1__Parameters * SOAP_FMAC4 soap_in_ns1__Parameters(struct soap*, const char*, ns1__Parameters *, const char*);

#ifndef soap_write_ns1__Parameters
#define soap_write_ns1__Parameters(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Parameters", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Parameters * SOAP_FMAC4 soap_get_ns1__Parameters(struct soap*, ns1__Parameters *, const char*, const char*);

#ifndef soap_read_ns1__Parameters
#define soap_read_ns1__Parameters(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Parameters(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__Parameters * SOAP_FMAC2 soap_instantiate_ns1__Parameters(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Parameters * soap_new_ns1__Parameters(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Parameters(soap, n, NULL, NULL, NULL); }

inline ns1__Parameters * soap_new_req_ns1__Parameters(struct soap *soap) { ns1__Parameters *_p = soap_instantiate_ns1__Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__Parameters * soap_new_set_ns1__Parameters(struct soap *soap, char *__any) { ns1__Parameters *_p = soap_instantiate_ns1__Parameters(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Parameters::__any = __any; } return _p; }

inline void soap_delete_ns1__Parameters(struct soap *soap, ns1__Parameters *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Parameters(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__PropertyList
#define SOAP_TYPE_ns1__PropertyList (79)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__PropertyList(struct soap*, const char*, int, const ns1__PropertyList *, const char*);
SOAP_FMAC3 ns1__PropertyList * SOAP_FMAC4 soap_in_ns1__PropertyList(struct soap*, const char*, ns1__PropertyList *, const char*);

#ifndef soap_write_ns1__PropertyList
#define soap_write_ns1__PropertyList(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:PropertyList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__PropertyList * SOAP_FMAC4 soap_get_ns1__PropertyList(struct soap*, ns1__PropertyList *, const char*, const char*);

#ifndef soap_read_ns1__PropertyList
#define soap_read_ns1__PropertyList(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__PropertyList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__PropertyList * SOAP_FMAC2 soap_instantiate_ns1__PropertyList(struct soap*, int, const char*, const char*, size_t*);

inline ns1__PropertyList * soap_new_ns1__PropertyList(struct soap *soap, int n = -1) { return soap_instantiate_ns1__PropertyList(soap, n, NULL, NULL, NULL); }

inline ns1__PropertyList * soap_new_req_ns1__PropertyList(struct soap *soap) { ns1__PropertyList *_p = soap_instantiate_ns1__PropertyList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__PropertyList * soap_new_set_ns1__PropertyList(struct soap *soap, std::vector<char * >& __any) { ns1__PropertyList *_p = soap_instantiate_ns1__PropertyList(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__PropertyList::__any = __any; } return _p; }

inline void soap_delete_ns1__PropertyList(struct soap *soap, ns1__PropertyList *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__PropertyList(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__Properties
#define SOAP_TYPE_ns1__Properties (78)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__Properties(struct soap*, const char*, int, const ns1__Properties *, const char*);
SOAP_FMAC3 ns1__Properties * SOAP_FMAC4 soap_in_ns1__Properties(struct soap*, const char*, ns1__Properties *, const char*);

#ifndef soap_write_ns1__Properties
#define soap_write_ns1__Properties(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:Properties", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Properties * SOAP_FMAC4 soap_get_ns1__Properties(struct soap*, ns1__Properties *, const char*, const char*);

#ifndef soap_read_ns1__Properties
#define soap_read_ns1__Properties(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__Properties(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__Properties * SOAP_FMAC2 soap_instantiate_ns1__Properties(struct soap*, int, const char*, const char*, size_t*);

inline ns1__Properties * soap_new_ns1__Properties(struct soap *soap, int n = -1) { return soap_instantiate_ns1__Properties(soap, n, NULL, NULL, NULL); }

inline ns1__Properties * soap_new_req_ns1__Properties(struct soap *soap) { ns1__Properties *_p = soap_instantiate_ns1__Properties(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__Properties * soap_new_set_ns1__Properties(struct soap *soap, ns1__PropertyList *PropertyList) { ns1__Properties *_p = soap_instantiate_ns1__Properties(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__Properties::PropertyList = PropertyList; } return _p; }

inline void soap_delete_ns1__Properties(struct soap *soap, ns1__Properties *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__Properties(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_ns1__CommandStatement
#define SOAP_TYPE_ns1__CommandStatement (77)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__CommandStatement(struct soap*, const char*, int, const ns1__CommandStatement *, const char*);
SOAP_FMAC3 ns1__CommandStatement * SOAP_FMAC4 soap_in_ns1__CommandStatement(struct soap*, const char*, ns1__CommandStatement *, const char*);

#ifndef soap_write_ns1__CommandStatement
#define soap_write_ns1__CommandStatement(soap, data) ( (data)->soap_serialize(soap), soap_begin_send(soap) || (data)->soap_put(soap, "ns1:CommandStatement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CommandStatement * SOAP_FMAC4 soap_get_ns1__CommandStatement(struct soap*, ns1__CommandStatement *, const char*, const char*);

#ifndef soap_read_ns1__CommandStatement
#define soap_read_ns1__CommandStatement(soap, data) ( soap_begin_recv(soap) || !soap_get_ns1__CommandStatement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 ns1__CommandStatement * SOAP_FMAC2 soap_instantiate_ns1__CommandStatement(struct soap*, int, const char*, const char*, size_t*);

inline ns1__CommandStatement * soap_new_ns1__CommandStatement(struct soap *soap, int n = -1) { return soap_instantiate_ns1__CommandStatement(soap, n, NULL, NULL, NULL); }

inline ns1__CommandStatement * soap_new_req_ns1__CommandStatement(struct soap *soap) { ns1__CommandStatement *_p = soap_instantiate_ns1__CommandStatement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); } return _p; }

inline ns1__CommandStatement * soap_new_set_ns1__CommandStatement(struct soap *soap, std::string *Statement) { ns1__CommandStatement *_p = soap_instantiate_ns1__CommandStatement(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->ns1__CommandStatement::Statement = Statement; } return _p; }

inline void soap_delete_ns1__CommandStatement(struct soap *soap, ns1__CommandStatement *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns1__CommandStatement(struct soap*, int, int, void*, size_t, const void*, size_t);

/* _xml__lang is a typedef element/attribute synonym for std__string */

#ifndef SOAP_TYPE__xml__lang
#define SOAP_TYPE__xml__lang (76)
#endif

#define soap_default__xml__lang(soap, a) soap_default_std__string(soap, a)


#define soap_serialize__xml__lang soap_serialize_std__string


#define soap_out__xml__lang soap_out_std__string


#define soap_in__xml__lang soap_in_std__string


#define soap_put__xml__lang soap_put_std__string


#define soap_get__xml__lang soap_get_std__string


#define soap_instantiate__xml__lang soap_instantiate_std__string


#define soap_copy__xml__lang soap_copy_std__string

#ifndef SOAP_TYPE_xsd__token
#define SOAP_TYPE_xsd__token (74)
#endif

#define soap_default_xsd__token(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__token(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__token(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__token(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__token(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__token
#define soap_write_xsd__token(soap, data) ( soap_serialize_xsd__token(soap, data), soap_begin_send(soap) || soap_put_xsd__token(soap, data, "xsd:token", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__token(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__token
#define soap_read_xsd__token(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__token(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__token soap_instantiate_std__string


#define soap_copy_xsd__token soap_copy_std__string

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (73)
#endif

#define soap_default_xsd__anyURI(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__anyURI(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__anyURI
#define soap_write_xsd__anyURI(soap, data) ( soap_serialize_xsd__anyURI(soap, data), soap_begin_send(soap) || soap_put_xsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__anyURI
#define soap_read_xsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__anyURI soap_instantiate_std__string


#define soap_copy_xsd__anyURI soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaXPath
#define SOAP_TYPE_xsd__XmlSchemaXPath (72)
#endif

#define soap_default_xsd__XmlSchemaXPath(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaXPath(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaXPath(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaXPath(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaXPath(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaXPath
#define soap_write_xsd__XmlSchemaXPath(soap, data) ( soap_serialize_xsd__XmlSchemaXPath(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaXPath(soap, data, "xsd:XmlSchemaXPath", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaXPath(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaXPath
#define soap_read_xsd__XmlSchemaXPath(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaXPath(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaXPath soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaXPath soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaWhiteSpaceFacet
#define SOAP_TYPE_xsd__XmlSchemaWhiteSpaceFacet (71)
#endif

#define soap_default_xsd__XmlSchemaWhiteSpaceFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaWhiteSpaceFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaWhiteSpaceFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaWhiteSpaceFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaWhiteSpaceFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaWhiteSpaceFacet
#define soap_write_xsd__XmlSchemaWhiteSpaceFacet(soap, data) ( soap_serialize_xsd__XmlSchemaWhiteSpaceFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaWhiteSpaceFacet(soap, data, "xsd:XmlSchemaWhiteSpaceFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaWhiteSpaceFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaWhiteSpaceFacet
#define soap_read_xsd__XmlSchemaWhiteSpaceFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaWhiteSpaceFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaWhiteSpaceFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaWhiteSpaceFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaUse
#define SOAP_TYPE_xsd__XmlSchemaUse (70)
#endif

#define soap_default_xsd__XmlSchemaUse(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaUse(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaUse(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaUse(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaUse(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaUse
#define soap_write_xsd__XmlSchemaUse(soap, data) ( soap_serialize_xsd__XmlSchemaUse(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaUse(soap, data, "xsd:XmlSchemaUse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaUse(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaUse
#define soap_read_xsd__XmlSchemaUse(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaUse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaUse soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaUse soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaUnique
#define SOAP_TYPE_xsd__XmlSchemaUnique (69)
#endif

#define soap_default_xsd__XmlSchemaUnique(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaUnique(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaUnique(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaUnique(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaUnique(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaUnique
#define soap_write_xsd__XmlSchemaUnique(soap, data) ( soap_serialize_xsd__XmlSchemaUnique(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaUnique(soap, data, "xsd:XmlSchemaUnique", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaUnique(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaUnique
#define soap_read_xsd__XmlSchemaUnique(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaUnique(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaUnique soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaUnique soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaType
#define SOAP_TYPE_xsd__XmlSchemaType (68)
#endif

#define soap_default_xsd__XmlSchemaType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaType
#define soap_write_xsd__XmlSchemaType(soap, data) ( soap_serialize_xsd__XmlSchemaType(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaType(soap, data, "xsd:XmlSchemaType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaType
#define soap_read_xsd__XmlSchemaType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaType soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaType soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaTotalDigitsFacet
#define SOAP_TYPE_xsd__XmlSchemaTotalDigitsFacet (67)
#endif

#define soap_default_xsd__XmlSchemaTotalDigitsFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaTotalDigitsFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaTotalDigitsFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaTotalDigitsFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaTotalDigitsFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaTotalDigitsFacet
#define soap_write_xsd__XmlSchemaTotalDigitsFacet(soap, data) ( soap_serialize_xsd__XmlSchemaTotalDigitsFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaTotalDigitsFacet(soap, data, "xsd:XmlSchemaTotalDigitsFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaTotalDigitsFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaTotalDigitsFacet
#define soap_read_xsd__XmlSchemaTotalDigitsFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaTotalDigitsFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaTotalDigitsFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaTotalDigitsFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleTypeUnion
#define SOAP_TYPE_xsd__XmlSchemaSimpleTypeUnion (66)
#endif

#define soap_default_xsd__XmlSchemaSimpleTypeUnion(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleTypeUnion(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleTypeUnion(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleTypeUnion(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleTypeUnion(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleTypeUnion
#define soap_write_xsd__XmlSchemaSimpleTypeUnion(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleTypeUnion(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleTypeUnion(soap, data, "xsd:XmlSchemaSimpleTypeUnion", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleTypeUnion(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleTypeUnion
#define soap_read_xsd__XmlSchemaSimpleTypeUnion(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleTypeUnion(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleTypeUnion soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleTypeUnion soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleTypeRestriction
#define SOAP_TYPE_xsd__XmlSchemaSimpleTypeRestriction (65)
#endif

#define soap_default_xsd__XmlSchemaSimpleTypeRestriction(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleTypeRestriction(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleTypeRestriction(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleTypeRestriction(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleTypeRestriction(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleTypeRestriction
#define soap_write_xsd__XmlSchemaSimpleTypeRestriction(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleTypeRestriction(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleTypeRestriction(soap, data, "xsd:XmlSchemaSimpleTypeRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleTypeRestriction(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleTypeRestriction
#define soap_read_xsd__XmlSchemaSimpleTypeRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleTypeRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleTypeRestriction soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleTypeRestriction soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleTypeList
#define SOAP_TYPE_xsd__XmlSchemaSimpleTypeList (64)
#endif

#define soap_default_xsd__XmlSchemaSimpleTypeList(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleTypeList(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleTypeList(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleTypeList(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleTypeList(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleTypeList
#define soap_write_xsd__XmlSchemaSimpleTypeList(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleTypeList(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleTypeList(soap, data, "xsd:XmlSchemaSimpleTypeList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleTypeList(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleTypeList
#define soap_read_xsd__XmlSchemaSimpleTypeList(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleTypeList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleTypeList soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleTypeList soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleTypeContent
#define SOAP_TYPE_xsd__XmlSchemaSimpleTypeContent (63)
#endif

#define soap_default_xsd__XmlSchemaSimpleTypeContent(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleTypeContent(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleTypeContent(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleTypeContent(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleTypeContent(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleTypeContent
#define soap_write_xsd__XmlSchemaSimpleTypeContent(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleTypeContent(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleTypeContent(soap, data, "xsd:XmlSchemaSimpleTypeContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleTypeContent(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleTypeContent
#define soap_read_xsd__XmlSchemaSimpleTypeContent(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleTypeContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleTypeContent soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleTypeContent soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleType
#define SOAP_TYPE_xsd__XmlSchemaSimpleType (62)
#endif

#define soap_default_xsd__XmlSchemaSimpleType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleType
#define soap_write_xsd__XmlSchemaSimpleType(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleType(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleType(soap, data, "xsd:XmlSchemaSimpleType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleType
#define soap_read_xsd__XmlSchemaSimpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleType soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleType soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleContentRestriction
#define SOAP_TYPE_xsd__XmlSchemaSimpleContentRestriction (61)
#endif

#define soap_default_xsd__XmlSchemaSimpleContentRestriction(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleContentRestriction(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleContentRestriction(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleContentRestriction(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleContentRestriction(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleContentRestriction
#define soap_write_xsd__XmlSchemaSimpleContentRestriction(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleContentRestriction(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleContentRestriction(soap, data, "xsd:XmlSchemaSimpleContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleContentRestriction(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleContentRestriction
#define soap_read_xsd__XmlSchemaSimpleContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleContentRestriction soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleContentRestriction soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleContentExtension
#define SOAP_TYPE_xsd__XmlSchemaSimpleContentExtension (60)
#endif

#define soap_default_xsd__XmlSchemaSimpleContentExtension(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleContentExtension(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleContentExtension(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleContentExtension(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleContentExtension(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleContentExtension
#define soap_write_xsd__XmlSchemaSimpleContentExtension(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleContentExtension(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleContentExtension(soap, data, "xsd:XmlSchemaSimpleContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleContentExtension(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleContentExtension
#define soap_read_xsd__XmlSchemaSimpleContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleContentExtension soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleContentExtension soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSimpleContent
#define SOAP_TYPE_xsd__XmlSchemaSimpleContent (59)
#endif

#define soap_default_xsd__XmlSchemaSimpleContent(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSimpleContent(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSimpleContent(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSimpleContent(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSimpleContent(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSimpleContent
#define soap_write_xsd__XmlSchemaSimpleContent(soap, data) ( soap_serialize_xsd__XmlSchemaSimpleContent(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSimpleContent(soap, data, "xsd:XmlSchemaSimpleContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSimpleContent(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSimpleContent
#define soap_read_xsd__XmlSchemaSimpleContent(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSimpleContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSimpleContent soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSimpleContent soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaSequence
#define SOAP_TYPE_xsd__XmlSchemaSequence (58)
#endif

#define soap_default_xsd__XmlSchemaSequence(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaSequence(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaSequence(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaSequence(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaSequence(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaSequence
#define soap_write_xsd__XmlSchemaSequence(soap, data) ( soap_serialize_xsd__XmlSchemaSequence(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaSequence(soap, data, "xsd:XmlSchemaSequence", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaSequence(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaSequence
#define soap_read_xsd__XmlSchemaSequence(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaSequence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaSequence soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaSequence soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaRedefine
#define SOAP_TYPE_xsd__XmlSchemaRedefine (57)
#endif

#define soap_default_xsd__XmlSchemaRedefine(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaRedefine(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaRedefine(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaRedefine(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaRedefine(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaRedefine
#define soap_write_xsd__XmlSchemaRedefine(soap, data) ( soap_serialize_xsd__XmlSchemaRedefine(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaRedefine(soap, data, "xsd:XmlSchemaRedefine", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaRedefine(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaRedefine
#define soap_read_xsd__XmlSchemaRedefine(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaRedefine(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaRedefine soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaRedefine soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaPatternFacet
#define SOAP_TYPE_xsd__XmlSchemaPatternFacet (56)
#endif

#define soap_default_xsd__XmlSchemaPatternFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaPatternFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaPatternFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaPatternFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaPatternFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaPatternFacet
#define soap_write_xsd__XmlSchemaPatternFacet(soap, data) ( soap_serialize_xsd__XmlSchemaPatternFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaPatternFacet(soap, data, "xsd:XmlSchemaPatternFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaPatternFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaPatternFacet
#define soap_read_xsd__XmlSchemaPatternFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaPatternFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaPatternFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaPatternFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaParticle
#define SOAP_TYPE_xsd__XmlSchemaParticle (55)
#endif

#define soap_default_xsd__XmlSchemaParticle(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaParticle(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaParticle(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaParticle(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaParticle(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaParticle
#define soap_write_xsd__XmlSchemaParticle(soap, data) ( soap_serialize_xsd__XmlSchemaParticle(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaParticle(soap, data, "xsd:XmlSchemaParticle", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaParticle(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaParticle
#define soap_read_xsd__XmlSchemaParticle(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaParticle(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaParticle soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaParticle soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaObject
#define SOAP_TYPE_xsd__XmlSchemaObject (54)
#endif

#define soap_default_xsd__XmlSchemaObject(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaObject(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaObject(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaObject(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaObject(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaObject
#define soap_write_xsd__XmlSchemaObject(soap, data) ( soap_serialize_xsd__XmlSchemaObject(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaObject(soap, data, "xsd:XmlSchemaObject", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaObject(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaObject
#define soap_read_xsd__XmlSchemaObject(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaObject(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaObject soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaObject soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaNumericFacet
#define SOAP_TYPE_xsd__XmlSchemaNumericFacet (53)
#endif

#define soap_default_xsd__XmlSchemaNumericFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaNumericFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaNumericFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaNumericFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaNumericFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaNumericFacet
#define soap_write_xsd__XmlSchemaNumericFacet(soap, data) ( soap_serialize_xsd__XmlSchemaNumericFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaNumericFacet(soap, data, "xsd:XmlSchemaNumericFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaNumericFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaNumericFacet
#define soap_read_xsd__XmlSchemaNumericFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaNumericFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaNumericFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaNumericFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaNotation
#define SOAP_TYPE_xsd__XmlSchemaNotation (52)
#endif

#define soap_default_xsd__XmlSchemaNotation(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaNotation(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaNotation(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaNotation(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaNotation(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaNotation
#define soap_write_xsd__XmlSchemaNotation(soap, data) ( soap_serialize_xsd__XmlSchemaNotation(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaNotation(soap, data, "xsd:XmlSchemaNotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaNotation(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaNotation
#define soap_read_xsd__XmlSchemaNotation(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaNotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaNotation soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaNotation soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaMinLengthFacet
#define SOAP_TYPE_xsd__XmlSchemaMinLengthFacet (51)
#endif

#define soap_default_xsd__XmlSchemaMinLengthFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaMinLengthFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaMinLengthFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaMinLengthFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaMinLengthFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaMinLengthFacet
#define soap_write_xsd__XmlSchemaMinLengthFacet(soap, data) ( soap_serialize_xsd__XmlSchemaMinLengthFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaMinLengthFacet(soap, data, "xsd:XmlSchemaMinLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaMinLengthFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaMinLengthFacet
#define soap_read_xsd__XmlSchemaMinLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaMinLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaMinLengthFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaMinLengthFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaMinInclusiveFacet
#define SOAP_TYPE_xsd__XmlSchemaMinInclusiveFacet (50)
#endif

#define soap_default_xsd__XmlSchemaMinInclusiveFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaMinInclusiveFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaMinInclusiveFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaMinInclusiveFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaMinInclusiveFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaMinInclusiveFacet
#define soap_write_xsd__XmlSchemaMinInclusiveFacet(soap, data) ( soap_serialize_xsd__XmlSchemaMinInclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaMinInclusiveFacet(soap, data, "xsd:XmlSchemaMinInclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaMinInclusiveFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaMinInclusiveFacet
#define soap_read_xsd__XmlSchemaMinInclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaMinInclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaMinInclusiveFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaMinInclusiveFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaMinExclusiveFacet
#define SOAP_TYPE_xsd__XmlSchemaMinExclusiveFacet (49)
#endif

#define soap_default_xsd__XmlSchemaMinExclusiveFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaMinExclusiveFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaMinExclusiveFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaMinExclusiveFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaMinExclusiveFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaMinExclusiveFacet
#define soap_write_xsd__XmlSchemaMinExclusiveFacet(soap, data) ( soap_serialize_xsd__XmlSchemaMinExclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaMinExclusiveFacet(soap, data, "xsd:XmlSchemaMinExclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaMinExclusiveFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaMinExclusiveFacet
#define soap_read_xsd__XmlSchemaMinExclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaMinExclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaMinExclusiveFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaMinExclusiveFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaMaxLengthFacet
#define SOAP_TYPE_xsd__XmlSchemaMaxLengthFacet (48)
#endif

#define soap_default_xsd__XmlSchemaMaxLengthFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaMaxLengthFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaMaxLengthFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaMaxLengthFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaMaxLengthFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaMaxLengthFacet
#define soap_write_xsd__XmlSchemaMaxLengthFacet(soap, data) ( soap_serialize_xsd__XmlSchemaMaxLengthFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaMaxLengthFacet(soap, data, "xsd:XmlSchemaMaxLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaMaxLengthFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaMaxLengthFacet
#define soap_read_xsd__XmlSchemaMaxLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaMaxLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaMaxLengthFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaMaxLengthFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaMaxInclusiveFacet
#define SOAP_TYPE_xsd__XmlSchemaMaxInclusiveFacet (47)
#endif

#define soap_default_xsd__XmlSchemaMaxInclusiveFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaMaxInclusiveFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaMaxInclusiveFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaMaxInclusiveFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaMaxInclusiveFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaMaxInclusiveFacet
#define soap_write_xsd__XmlSchemaMaxInclusiveFacet(soap, data) ( soap_serialize_xsd__XmlSchemaMaxInclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaMaxInclusiveFacet(soap, data, "xsd:XmlSchemaMaxInclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaMaxInclusiveFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaMaxInclusiveFacet
#define soap_read_xsd__XmlSchemaMaxInclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaMaxInclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaMaxInclusiveFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaMaxInclusiveFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaMaxExclusiveFacet
#define SOAP_TYPE_xsd__XmlSchemaMaxExclusiveFacet (46)
#endif

#define soap_default_xsd__XmlSchemaMaxExclusiveFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaMaxExclusiveFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaMaxExclusiveFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaMaxExclusiveFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaMaxExclusiveFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaMaxExclusiveFacet
#define soap_write_xsd__XmlSchemaMaxExclusiveFacet(soap, data) ( soap_serialize_xsd__XmlSchemaMaxExclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaMaxExclusiveFacet(soap, data, "xsd:XmlSchemaMaxExclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaMaxExclusiveFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaMaxExclusiveFacet
#define soap_read_xsd__XmlSchemaMaxExclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaMaxExclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaMaxExclusiveFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaMaxExclusiveFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaLengthFacet
#define SOAP_TYPE_xsd__XmlSchemaLengthFacet (45)
#endif

#define soap_default_xsd__XmlSchemaLengthFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaLengthFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaLengthFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaLengthFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaLengthFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaLengthFacet
#define soap_write_xsd__XmlSchemaLengthFacet(soap, data) ( soap_serialize_xsd__XmlSchemaLengthFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaLengthFacet(soap, data, "xsd:XmlSchemaLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaLengthFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaLengthFacet
#define soap_read_xsd__XmlSchemaLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaLengthFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaLengthFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaKeyref
#define SOAP_TYPE_xsd__XmlSchemaKeyref (44)
#endif

#define soap_default_xsd__XmlSchemaKeyref(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaKeyref(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaKeyref(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaKeyref(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaKeyref(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaKeyref
#define soap_write_xsd__XmlSchemaKeyref(soap, data) ( soap_serialize_xsd__XmlSchemaKeyref(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaKeyref(soap, data, "xsd:XmlSchemaKeyref", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaKeyref(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaKeyref
#define soap_read_xsd__XmlSchemaKeyref(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaKeyref(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaKeyref soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaKeyref soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaKey
#define SOAP_TYPE_xsd__XmlSchemaKey (43)
#endif

#define soap_default_xsd__XmlSchemaKey(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaKey(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaKey(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaKey(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaKey(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaKey
#define soap_write_xsd__XmlSchemaKey(soap, data) ( soap_serialize_xsd__XmlSchemaKey(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaKey(soap, data, "xsd:XmlSchemaKey", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaKey(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaKey
#define soap_read_xsd__XmlSchemaKey(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaKey(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaKey soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaKey soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaInclude
#define SOAP_TYPE_xsd__XmlSchemaInclude (42)
#endif

#define soap_default_xsd__XmlSchemaInclude(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaInclude(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaInclude(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaInclude(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaInclude(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaInclude
#define soap_write_xsd__XmlSchemaInclude(soap, data) ( soap_serialize_xsd__XmlSchemaInclude(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaInclude(soap, data, "xsd:XmlSchemaInclude", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaInclude(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaInclude
#define soap_read_xsd__XmlSchemaInclude(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaInclude(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaInclude soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaInclude soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaImport
#define SOAP_TYPE_xsd__XmlSchemaImport (41)
#endif

#define soap_default_xsd__XmlSchemaImport(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaImport(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaImport(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaImport(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaImport(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaImport
#define soap_write_xsd__XmlSchemaImport(soap, data) ( soap_serialize_xsd__XmlSchemaImport(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaImport(soap, data, "xsd:XmlSchemaImport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaImport(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaImport
#define soap_read_xsd__XmlSchemaImport(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaImport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaImport soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaImport soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaIdentityConstraint
#define SOAP_TYPE_xsd__XmlSchemaIdentityConstraint (40)
#endif

#define soap_default_xsd__XmlSchemaIdentityConstraint(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaIdentityConstraint(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaIdentityConstraint(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaIdentityConstraint(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaIdentityConstraint(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaIdentityConstraint
#define soap_write_xsd__XmlSchemaIdentityConstraint(soap, data) ( soap_serialize_xsd__XmlSchemaIdentityConstraint(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaIdentityConstraint(soap, data, "xsd:XmlSchemaIdentityConstraint", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaIdentityConstraint(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaIdentityConstraint
#define soap_read_xsd__XmlSchemaIdentityConstraint(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaIdentityConstraint(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaIdentityConstraint soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaIdentityConstraint soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaGroupRef
#define SOAP_TYPE_xsd__XmlSchemaGroupRef (39)
#endif

#define soap_default_xsd__XmlSchemaGroupRef(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaGroupRef(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaGroupRef(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaGroupRef(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaGroupRef(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaGroupRef
#define soap_write_xsd__XmlSchemaGroupRef(soap, data) ( soap_serialize_xsd__XmlSchemaGroupRef(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaGroupRef(soap, data, "xsd:XmlSchemaGroupRef", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaGroupRef(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaGroupRef
#define soap_read_xsd__XmlSchemaGroupRef(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaGroupRef(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaGroupRef soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaGroupRef soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaGroupBase
#define SOAP_TYPE_xsd__XmlSchemaGroupBase (38)
#endif

#define soap_default_xsd__XmlSchemaGroupBase(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaGroupBase(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaGroupBase(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaGroupBase(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaGroupBase(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaGroupBase
#define soap_write_xsd__XmlSchemaGroupBase(soap, data) ( soap_serialize_xsd__XmlSchemaGroupBase(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaGroupBase(soap, data, "xsd:XmlSchemaGroupBase", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaGroupBase(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaGroupBase
#define soap_read_xsd__XmlSchemaGroupBase(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaGroupBase(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaGroupBase soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaGroupBase soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaGroup
#define SOAP_TYPE_xsd__XmlSchemaGroup (37)
#endif

#define soap_default_xsd__XmlSchemaGroup(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaGroup(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaGroup(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaGroup(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaGroup(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaGroup
#define soap_write_xsd__XmlSchemaGroup(soap, data) ( soap_serialize_xsd__XmlSchemaGroup(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaGroup(soap, data, "xsd:XmlSchemaGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaGroup(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaGroup
#define soap_read_xsd__XmlSchemaGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaGroup soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaGroup soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaFractionDigitsFacet
#define SOAP_TYPE_xsd__XmlSchemaFractionDigitsFacet (36)
#endif

#define soap_default_xsd__XmlSchemaFractionDigitsFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaFractionDigitsFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaFractionDigitsFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaFractionDigitsFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaFractionDigitsFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaFractionDigitsFacet
#define soap_write_xsd__XmlSchemaFractionDigitsFacet(soap, data) ( soap_serialize_xsd__XmlSchemaFractionDigitsFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaFractionDigitsFacet(soap, data, "xsd:XmlSchemaFractionDigitsFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaFractionDigitsFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaFractionDigitsFacet
#define soap_read_xsd__XmlSchemaFractionDigitsFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaFractionDigitsFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaFractionDigitsFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaFractionDigitsFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaForm
#define SOAP_TYPE_xsd__XmlSchemaForm (35)
#endif

#define soap_default_xsd__XmlSchemaForm(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaForm(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaForm(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaForm(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaForm(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaForm
#define soap_write_xsd__XmlSchemaForm(soap, data) ( soap_serialize_xsd__XmlSchemaForm(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaForm(soap, data, "xsd:XmlSchemaForm", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaForm(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaForm
#define soap_read_xsd__XmlSchemaForm(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaForm(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaForm soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaForm soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaFacet
#define SOAP_TYPE_xsd__XmlSchemaFacet (34)
#endif

#define soap_default_xsd__XmlSchemaFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaFacet
#define soap_write_xsd__XmlSchemaFacet(soap, data) ( soap_serialize_xsd__XmlSchemaFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaFacet(soap, data, "xsd:XmlSchemaFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaFacet
#define soap_read_xsd__XmlSchemaFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaExternal
#define SOAP_TYPE_xsd__XmlSchemaExternal (33)
#endif

#define soap_default_xsd__XmlSchemaExternal(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaExternal(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaExternal(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaExternal(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaExternal(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaExternal
#define soap_write_xsd__XmlSchemaExternal(soap, data) ( soap_serialize_xsd__XmlSchemaExternal(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaExternal(soap, data, "xsd:XmlSchemaExternal", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaExternal(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaExternal
#define soap_read_xsd__XmlSchemaExternal(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaExternal(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaExternal soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaExternal soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaEnumerationFacet
#define SOAP_TYPE_xsd__XmlSchemaEnumerationFacet (32)
#endif

#define soap_default_xsd__XmlSchemaEnumerationFacet(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaEnumerationFacet(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaEnumerationFacet(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaEnumerationFacet(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaEnumerationFacet(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaEnumerationFacet
#define soap_write_xsd__XmlSchemaEnumerationFacet(soap, data) ( soap_serialize_xsd__XmlSchemaEnumerationFacet(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaEnumerationFacet(soap, data, "xsd:XmlSchemaEnumerationFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaEnumerationFacet(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaEnumerationFacet
#define soap_read_xsd__XmlSchemaEnumerationFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaEnumerationFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaEnumerationFacet soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaEnumerationFacet soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaElement
#define SOAP_TYPE_xsd__XmlSchemaElement (31)
#endif

#define soap_default_xsd__XmlSchemaElement(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaElement(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaElement(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaElement(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaElement(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaElement
#define soap_write_xsd__XmlSchemaElement(soap, data) ( soap_serialize_xsd__XmlSchemaElement(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaElement(soap, data, "xsd:XmlSchemaElement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaElement(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaElement
#define soap_read_xsd__XmlSchemaElement(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaElement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaElement soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaElement soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaDocumentation
#define SOAP_TYPE_xsd__XmlSchemaDocumentation (30)
#endif

#define soap_default_xsd__XmlSchemaDocumentation(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaDocumentation(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaDocumentation(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaDocumentation(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaDocumentation(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaDocumentation
#define soap_write_xsd__XmlSchemaDocumentation(soap, data) ( soap_serialize_xsd__XmlSchemaDocumentation(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaDocumentation(soap, data, "xsd:XmlSchemaDocumentation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaDocumentation(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaDocumentation
#define soap_read_xsd__XmlSchemaDocumentation(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaDocumentation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaDocumentation soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaDocumentation soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaDerivationMethod
#define SOAP_TYPE_xsd__XmlSchemaDerivationMethod (29)
#endif

#define soap_default_xsd__XmlSchemaDerivationMethod(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaDerivationMethod(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaDerivationMethod(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaDerivationMethod(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaDerivationMethod(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaDerivationMethod
#define soap_write_xsd__XmlSchemaDerivationMethod(soap, data) ( soap_serialize_xsd__XmlSchemaDerivationMethod(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaDerivationMethod(soap, data, "xsd:XmlSchemaDerivationMethod", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaDerivationMethod(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaDerivationMethod
#define soap_read_xsd__XmlSchemaDerivationMethod(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaDerivationMethod(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaDerivationMethod soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaDerivationMethod soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaContentProcessing
#define SOAP_TYPE_xsd__XmlSchemaContentProcessing (28)
#endif

#define soap_default_xsd__XmlSchemaContentProcessing(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaContentProcessing(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaContentProcessing(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaContentProcessing(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaContentProcessing(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaContentProcessing
#define soap_write_xsd__XmlSchemaContentProcessing(soap, data) ( soap_serialize_xsd__XmlSchemaContentProcessing(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaContentProcessing(soap, data, "xsd:XmlSchemaContentProcessing", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaContentProcessing(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaContentProcessing
#define soap_read_xsd__XmlSchemaContentProcessing(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaContentProcessing(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaContentProcessing soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaContentProcessing soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaContentModel
#define SOAP_TYPE_xsd__XmlSchemaContentModel (27)
#endif

#define soap_default_xsd__XmlSchemaContentModel(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaContentModel(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaContentModel(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaContentModel(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaContentModel(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaContentModel
#define soap_write_xsd__XmlSchemaContentModel(soap, data) ( soap_serialize_xsd__XmlSchemaContentModel(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaContentModel(soap, data, "xsd:XmlSchemaContentModel", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaContentModel(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaContentModel
#define soap_read_xsd__XmlSchemaContentModel(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaContentModel(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaContentModel soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaContentModel soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaContent
#define SOAP_TYPE_xsd__XmlSchemaContent (26)
#endif

#define soap_default_xsd__XmlSchemaContent(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaContent(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaContent(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaContent(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaContent(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaContent
#define soap_write_xsd__XmlSchemaContent(soap, data) ( soap_serialize_xsd__XmlSchemaContent(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaContent(soap, data, "xsd:XmlSchemaContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaContent(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaContent
#define soap_read_xsd__XmlSchemaContent(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaContent soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaContent soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaComplexType
#define SOAP_TYPE_xsd__XmlSchemaComplexType (25)
#endif

#define soap_default_xsd__XmlSchemaComplexType(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaComplexType(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaComplexType(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaComplexType(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaComplexType(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaComplexType
#define soap_write_xsd__XmlSchemaComplexType(soap, data) ( soap_serialize_xsd__XmlSchemaComplexType(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaComplexType(soap, data, "xsd:XmlSchemaComplexType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaComplexType(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaComplexType
#define soap_read_xsd__XmlSchemaComplexType(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaComplexType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaComplexType soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaComplexType soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaComplexContentRestriction
#define SOAP_TYPE_xsd__XmlSchemaComplexContentRestriction (24)
#endif

#define soap_default_xsd__XmlSchemaComplexContentRestriction(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaComplexContentRestriction(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaComplexContentRestriction(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaComplexContentRestriction(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaComplexContentRestriction(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaComplexContentRestriction
#define soap_write_xsd__XmlSchemaComplexContentRestriction(soap, data) ( soap_serialize_xsd__XmlSchemaComplexContentRestriction(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaComplexContentRestriction(soap, data, "xsd:XmlSchemaComplexContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaComplexContentRestriction(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaComplexContentRestriction
#define soap_read_xsd__XmlSchemaComplexContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaComplexContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaComplexContentRestriction soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaComplexContentRestriction soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaComplexContentExtension
#define SOAP_TYPE_xsd__XmlSchemaComplexContentExtension (23)
#endif

#define soap_default_xsd__XmlSchemaComplexContentExtension(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaComplexContentExtension(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaComplexContentExtension(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaComplexContentExtension(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaComplexContentExtension(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaComplexContentExtension
#define soap_write_xsd__XmlSchemaComplexContentExtension(soap, data) ( soap_serialize_xsd__XmlSchemaComplexContentExtension(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaComplexContentExtension(soap, data, "xsd:XmlSchemaComplexContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaComplexContentExtension(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaComplexContentExtension
#define soap_read_xsd__XmlSchemaComplexContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaComplexContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaComplexContentExtension soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaComplexContentExtension soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaComplexContent
#define SOAP_TYPE_xsd__XmlSchemaComplexContent (22)
#endif

#define soap_default_xsd__XmlSchemaComplexContent(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaComplexContent(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaComplexContent(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaComplexContent(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaComplexContent(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaComplexContent
#define soap_write_xsd__XmlSchemaComplexContent(soap, data) ( soap_serialize_xsd__XmlSchemaComplexContent(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaComplexContent(soap, data, "xsd:XmlSchemaComplexContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaComplexContent(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaComplexContent
#define soap_read_xsd__XmlSchemaComplexContent(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaComplexContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaComplexContent soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaComplexContent soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaChoice
#define SOAP_TYPE_xsd__XmlSchemaChoice (21)
#endif

#define soap_default_xsd__XmlSchemaChoice(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaChoice(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaChoice(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaChoice(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaChoice(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaChoice
#define soap_write_xsd__XmlSchemaChoice(soap, data) ( soap_serialize_xsd__XmlSchemaChoice(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaChoice(soap, data, "xsd:XmlSchemaChoice", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaChoice(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaChoice
#define soap_read_xsd__XmlSchemaChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaChoice(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaChoice soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaChoice soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAttributeGroupRef
#define SOAP_TYPE_xsd__XmlSchemaAttributeGroupRef (20)
#endif

#define soap_default_xsd__XmlSchemaAttributeGroupRef(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAttributeGroupRef(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAttributeGroupRef(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAttributeGroupRef(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAttributeGroupRef(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAttributeGroupRef
#define soap_write_xsd__XmlSchemaAttributeGroupRef(soap, data) ( soap_serialize_xsd__XmlSchemaAttributeGroupRef(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAttributeGroupRef(soap, data, "xsd:XmlSchemaAttributeGroupRef", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAttributeGroupRef(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAttributeGroupRef
#define soap_read_xsd__XmlSchemaAttributeGroupRef(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAttributeGroupRef(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAttributeGroupRef soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAttributeGroupRef soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAttributeGroup
#define SOAP_TYPE_xsd__XmlSchemaAttributeGroup (19)
#endif

#define soap_default_xsd__XmlSchemaAttributeGroup(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAttributeGroup(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAttributeGroup(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAttributeGroup(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAttributeGroup(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAttributeGroup
#define soap_write_xsd__XmlSchemaAttributeGroup(soap, data) ( soap_serialize_xsd__XmlSchemaAttributeGroup(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAttributeGroup(soap, data, "xsd:XmlSchemaAttributeGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAttributeGroup(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAttributeGroup
#define soap_read_xsd__XmlSchemaAttributeGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAttributeGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAttributeGroup soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAttributeGroup soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAttribute
#define SOAP_TYPE_xsd__XmlSchemaAttribute (18)
#endif

#define soap_default_xsd__XmlSchemaAttribute(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAttribute(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAttribute(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAttribute(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAttribute(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAttribute
#define soap_write_xsd__XmlSchemaAttribute(soap, data) ( soap_serialize_xsd__XmlSchemaAttribute(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAttribute(soap, data, "xsd:XmlSchemaAttribute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAttribute(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAttribute
#define soap_read_xsd__XmlSchemaAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAttribute soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAttribute soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAppInfo
#define SOAP_TYPE_xsd__XmlSchemaAppInfo (17)
#endif

#define soap_default_xsd__XmlSchemaAppInfo(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAppInfo(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAppInfo(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAppInfo(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAppInfo(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAppInfo
#define soap_write_xsd__XmlSchemaAppInfo(soap, data) ( soap_serialize_xsd__XmlSchemaAppInfo(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAppInfo(soap, data, "xsd:XmlSchemaAppInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAppInfo(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAppInfo
#define soap_read_xsd__XmlSchemaAppInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAppInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAppInfo soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAppInfo soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAnyAttribute
#define SOAP_TYPE_xsd__XmlSchemaAnyAttribute (16)
#endif

#define soap_default_xsd__XmlSchemaAnyAttribute(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAnyAttribute(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAnyAttribute(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAnyAttribute(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAnyAttribute(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAnyAttribute
#define soap_write_xsd__XmlSchemaAnyAttribute(soap, data) ( soap_serialize_xsd__XmlSchemaAnyAttribute(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAnyAttribute(soap, data, "xsd:XmlSchemaAnyAttribute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAnyAttribute(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAnyAttribute
#define soap_read_xsd__XmlSchemaAnyAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAnyAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAnyAttribute soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAnyAttribute soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAny
#define SOAP_TYPE_xsd__XmlSchemaAny (15)
#endif

#define soap_default_xsd__XmlSchemaAny(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAny(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAny(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAny(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAny(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAny
#define soap_write_xsd__XmlSchemaAny(soap, data) ( soap_serialize_xsd__XmlSchemaAny(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAny(soap, data, "xsd:XmlSchemaAny", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAny(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAny
#define soap_read_xsd__XmlSchemaAny(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAny(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAny soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAny soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAnnotation
#define SOAP_TYPE_xsd__XmlSchemaAnnotation (14)
#endif

#define soap_default_xsd__XmlSchemaAnnotation(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAnnotation(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAnnotation(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAnnotation(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAnnotation(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAnnotation
#define soap_write_xsd__XmlSchemaAnnotation(soap, data) ( soap_serialize_xsd__XmlSchemaAnnotation(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAnnotation(soap, data, "xsd:XmlSchemaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAnnotation(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAnnotation
#define soap_read_xsd__XmlSchemaAnnotation(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAnnotation soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAnnotation soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAnnotated
#define SOAP_TYPE_xsd__XmlSchemaAnnotated (13)
#endif

#define soap_default_xsd__XmlSchemaAnnotated(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAnnotated(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAnnotated(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAnnotated(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAnnotated(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAnnotated
#define soap_write_xsd__XmlSchemaAnnotated(soap, data) ( soap_serialize_xsd__XmlSchemaAnnotated(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAnnotated(soap, data, "xsd:XmlSchemaAnnotated", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAnnotated(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAnnotated
#define soap_read_xsd__XmlSchemaAnnotated(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAnnotated(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAnnotated soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAnnotated soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchemaAll
#define SOAP_TYPE_xsd__XmlSchemaAll (12)
#endif

#define soap_default_xsd__XmlSchemaAll(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchemaAll(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchemaAll(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchemaAll(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchemaAll(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchemaAll
#define soap_write_xsd__XmlSchemaAll(soap, data) ( soap_serialize_xsd__XmlSchemaAll(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchemaAll(soap, data, "xsd:XmlSchemaAll", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchemaAll(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchemaAll
#define soap_read_xsd__XmlSchemaAll(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchemaAll(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchemaAll soap_instantiate_std__string


#define soap_copy_xsd__XmlSchemaAll soap_copy_std__string

#ifndef SOAP_TYPE_xsd__XmlSchema
#define SOAP_TYPE_xsd__XmlSchema (11)
#endif

#define soap_default_xsd__XmlSchema(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__XmlSchema(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__XmlSchema(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__XmlSchema(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__XmlSchema(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__XmlSchema
#define soap_write_xsd__XmlSchema(soap, data) ( soap_serialize_xsd__XmlSchema(soap, data), soap_begin_send(soap) || soap_put_xsd__XmlSchema(soap, data, "xsd:XmlSchema", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__XmlSchema(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__XmlSchema
#define soap_read_xsd__XmlSchema(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__XmlSchema(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__XmlSchema soap_instantiate_std__string


#define soap_copy_xsd__XmlSchema soap_copy_std__string

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (10)
#endif

#define soap_default_xsd__ID(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__ID(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__ID(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__ID
#define soap_write_xsd__ID(soap, data) ( soap_serialize_xsd__ID(soap, data), soap_begin_send(soap) || soap_put_xsd__ID(soap, data, "xsd:ID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__ID(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__ID
#define soap_read_xsd__ID(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__ID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#define soap_instantiate_xsd__ID soap_instantiate_std__string


#define soap_copy_xsd__ID soap_copy_std__string

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (9)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_xsd__QName(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__QName(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__QName(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__QName(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__QName
#define soap_write_xsd__QName(soap, data) ( soap_serialize_xsd__QName(soap, data), soap_begin_send(soap) || soap_put_xsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__QName(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__QName
#define soap_read_xsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_xsd__QName(struct soap *soap, int n = -1) { return soap_instantiate_xsd__QName(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline std::string * soap_new_set_xsd__QName(struct soap *soap) { std::string *_p = soap_instantiate_xsd__QName(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_xsd__QName(soap, _p); } return _p; }

inline void soap_delete_xsd__QName(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_serialize_std__string(soap, data), soap_begin_send(soap) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (422)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_serialize_SOAP_ENV__Fault(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (421)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_serialize_SOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (418)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_serialize_SOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (416)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_serialize_SOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef SOAP_TYPE___ns1__Discover_
#define SOAP_TYPE___ns1__Discover_ (415)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Discover_(struct soap*, struct __ns1__Discover_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Discover_(struct soap*, const struct __ns1__Discover_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Discover_(struct soap*, const char*, int, const struct __ns1__Discover_ *, const char*);
SOAP_FMAC3 struct __ns1__Discover_ * SOAP_FMAC4 soap_in___ns1__Discover_(struct soap*, const char*, struct __ns1__Discover_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Discover_(struct soap*, const struct __ns1__Discover_ *, const char*, const char*);

#ifndef soap_write___ns1__Discover_
#define soap_write___ns1__Discover_(soap, data) ( soap_serialize___ns1__Discover_(soap, data), soap_begin_send(soap) || soap_put___ns1__Discover_(soap, data, "-ns1:Discover", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__Discover_ * SOAP_FMAC4 soap_get___ns1__Discover_(struct soap*, struct __ns1__Discover_ *, const char*, const char*);

#ifndef soap_read___ns1__Discover_
#define soap_read___ns1__Discover_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Discover_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__Discover_ * SOAP_FMAC2 soap_instantiate___ns1__Discover_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Discover_ * soap_new___ns1__Discover_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Discover_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Discover_ * soap_new_req___ns1__Discover_(struct soap *soap) { struct __ns1__Discover_ *_p = soap_instantiate___ns1__Discover_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Discover_(soap, _p); } return _p; }

inline struct __ns1__Discover_ * soap_new_set___ns1__Discover_(struct soap *soap, _ns1__Discover *ns1__Discover) { struct __ns1__Discover_ *_p = soap_instantiate___ns1__Discover_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Discover_(soap, _p); _p->ns1__Discover = ns1__Discover; } return _p; }

inline void soap_delete___ns1__Discover_(struct soap *soap, struct __ns1__Discover_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Discover_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Execute_
#define SOAP_TYPE___ns1__Execute_ (413)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Execute_(struct soap*, struct __ns1__Execute_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Execute_(struct soap*, const struct __ns1__Execute_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Execute_(struct soap*, const char*, int, const struct __ns1__Execute_ *, const char*);
SOAP_FMAC3 struct __ns1__Execute_ * SOAP_FMAC4 soap_in___ns1__Execute_(struct soap*, const char*, struct __ns1__Execute_ *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Execute_(struct soap*, const struct __ns1__Execute_ *, const char*, const char*);

#ifndef soap_write___ns1__Execute_
#define soap_write___ns1__Execute_(soap, data) ( soap_serialize___ns1__Execute_(soap, data), soap_begin_send(soap) || soap_put___ns1__Execute_(soap, data, "-ns1:Execute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__Execute_ * SOAP_FMAC4 soap_get___ns1__Execute_(struct soap*, struct __ns1__Execute_ *, const char*, const char*);

#ifndef soap_read___ns1__Execute_
#define soap_read___ns1__Execute_(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Execute_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__Execute_ * SOAP_FMAC2 soap_instantiate___ns1__Execute_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Execute_ * soap_new___ns1__Execute_(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Execute_(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Execute_ * soap_new_req___ns1__Execute_(struct soap *soap) { struct __ns1__Execute_ *_p = soap_instantiate___ns1__Execute_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Execute_(soap, _p); } return _p; }

inline struct __ns1__Execute_ * soap_new_set___ns1__Execute_(struct soap *soap, _ns1__Execute *ns1__Execute) { struct __ns1__Execute_ *_p = soap_instantiate___ns1__Execute_(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Execute_(soap, _p); _p->ns1__Execute = ns1__Execute; } return _p; }

inline void soap_delete___ns1__Execute_(struct soap *soap, struct __ns1__Execute_ *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Execute_(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Discover
#define SOAP_TYPE___ns1__Discover (411)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Discover(struct soap*, struct __ns1__Discover *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Discover(struct soap*, const struct __ns1__Discover *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Discover(struct soap*, const char*, int, const struct __ns1__Discover *, const char*);
SOAP_FMAC3 struct __ns1__Discover * SOAP_FMAC4 soap_in___ns1__Discover(struct soap*, const char*, struct __ns1__Discover *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Discover(struct soap*, const struct __ns1__Discover *, const char*, const char*);

#ifndef soap_write___ns1__Discover
#define soap_write___ns1__Discover(soap, data) ( soap_serialize___ns1__Discover(soap, data), soap_begin_send(soap) || soap_put___ns1__Discover(soap, data, "-ns1:Discover", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__Discover * SOAP_FMAC4 soap_get___ns1__Discover(struct soap*, struct __ns1__Discover *, const char*, const char*);

#ifndef soap_read___ns1__Discover
#define soap_read___ns1__Discover(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Discover(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__Discover * SOAP_FMAC2 soap_instantiate___ns1__Discover(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Discover * soap_new___ns1__Discover(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Discover(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Discover * soap_new_req___ns1__Discover(struct soap *soap) { struct __ns1__Discover *_p = soap_instantiate___ns1__Discover(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Discover(soap, _p); } return _p; }

inline struct __ns1__Discover * soap_new_set___ns1__Discover(struct soap *soap, _ns1__Discover *ns1__Discover) { struct __ns1__Discover *_p = soap_instantiate___ns1__Discover(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Discover(soap, _p); _p->ns1__Discover = ns1__Discover; } return _p; }

inline void soap_delete___ns1__Discover(struct soap *soap, struct __ns1__Discover *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Discover(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE___ns1__Execute
#define SOAP_TYPE___ns1__Execute (407)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Execute(struct soap*, struct __ns1__Execute *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Execute(struct soap*, const struct __ns1__Execute *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Execute(struct soap*, const char*, int, const struct __ns1__Execute *, const char*);
SOAP_FMAC3 struct __ns1__Execute * SOAP_FMAC4 soap_in___ns1__Execute(struct soap*, const char*, struct __ns1__Execute *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Execute(struct soap*, const struct __ns1__Execute *, const char*, const char*);

#ifndef soap_write___ns1__Execute
#define soap_write___ns1__Execute(soap, data) ( soap_serialize___ns1__Execute(soap, data), soap_begin_send(soap) || soap_put___ns1__Execute(soap, data, "-ns1:Execute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct __ns1__Execute * SOAP_FMAC4 soap_get___ns1__Execute(struct soap*, struct __ns1__Execute *, const char*, const char*);

#ifndef soap_read___ns1__Execute
#define soap_read___ns1__Execute(soap, data) ( soap_begin_recv(soap) || !soap_get___ns1__Execute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct __ns1__Execute * SOAP_FMAC2 soap_instantiate___ns1__Execute(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Execute * soap_new___ns1__Execute(struct soap *soap, int n = -1) { return soap_instantiate___ns1__Execute(soap, n, NULL, NULL, NULL); }

inline struct __ns1__Execute * soap_new_req___ns1__Execute(struct soap *soap) { struct __ns1__Execute *_p = soap_instantiate___ns1__Execute(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Execute(soap, _p); } return _p; }

inline struct __ns1__Execute * soap_new_set___ns1__Execute(struct soap *soap, _ns1__Execute *ns1__Execute) { struct __ns1__Execute *_p = soap_instantiate___ns1__Execute(soap, -1, NULL, NULL, NULL); if (_p) { soap_default___ns1__Execute(soap, _p); _p->ns1__Execute = ns1__Execute; } return _p; }

inline void soap_delete___ns1__Execute(struct soap *soap, struct __ns1__Execute *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Execute(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (399)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_serialize_SOAP_ENV__Header(soap, data), soap_begin_send(soap) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap, ns1__BeginSession *ns1__BeginSession_, ns1__EndSession *ns1__EndSession_, ns1__Session *ns1__Session_, ns6__Security *ns6__Security_) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); _p->ns1__BeginSession_ = ns1__BeginSession_; _p->ns1__EndSession_ = ns1__EndSession_; _p->ns1__Session_ = ns1__Session_; _p->ns6__Security_ = ns6__Security_; } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (424)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_serialize_PointerToSOAP_ENV__Reason(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (423)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_serialize_PointerToSOAP_ENV__Detail(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (417)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_serialize_PointerToSOAP_ENV__Code(soap, data), soap_begin_send(soap) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DiscoverResponse
#define SOAP_TYPE_PointerTo_ns1__DiscoverResponse (409)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DiscoverResponse(struct soap*, _ns1__DiscoverResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DiscoverResponse(struct soap*, const char *, int, _ns1__DiscoverResponse *const*, const char *);
SOAP_FMAC3 _ns1__DiscoverResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__DiscoverResponse(struct soap*, const char*, _ns1__DiscoverResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DiscoverResponse(struct soap*, _ns1__DiscoverResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__DiscoverResponse
#define soap_write_PointerTo_ns1__DiscoverResponse(soap, data) ( soap_serialize_PointerTo_ns1__DiscoverResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTo_ns1__DiscoverResponse(soap, data, "ns1:DiscoverResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__DiscoverResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__DiscoverResponse(struct soap*, _ns1__DiscoverResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__DiscoverResponse
#define soap_read_PointerTo_ns1__DiscoverResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__DiscoverResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__Discover
#define SOAP_TYPE_PointerTo_ns1__Discover (408)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Discover(struct soap*, _ns1__Discover *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Discover(struct soap*, const char *, int, _ns1__Discover *const*, const char *);
SOAP_FMAC3 _ns1__Discover ** SOAP_FMAC4 soap_in_PointerTo_ns1__Discover(struct soap*, const char*, _ns1__Discover **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Discover(struct soap*, _ns1__Discover *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Discover
#define soap_write_PointerTo_ns1__Discover(soap, data) ( soap_serialize_PointerTo_ns1__Discover(soap, data), soap_begin_send(soap) || soap_put_PointerTo_ns1__Discover(soap, data, "ns1:Discover", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__Discover ** SOAP_FMAC4 soap_get_PointerTo_ns1__Discover(struct soap*, _ns1__Discover **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Discover
#define soap_read_PointerTo_ns1__Discover(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__Discover(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__ExecuteResponse
#define SOAP_TYPE_PointerTo_ns1__ExecuteResponse (405)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__ExecuteResponse(struct soap*, const char *, int, _ns1__ExecuteResponse *const*, const char *);
SOAP_FMAC3 _ns1__ExecuteResponse ** SOAP_FMAC4 soap_in_PointerTo_ns1__ExecuteResponse(struct soap*, const char*, _ns1__ExecuteResponse **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__ExecuteResponse
#define soap_write_PointerTo_ns1__ExecuteResponse(soap, data) ( soap_serialize_PointerTo_ns1__ExecuteResponse(soap, data), soap_begin_send(soap) || soap_put_PointerTo_ns1__ExecuteResponse(soap, data, "ns1:ExecuteResponse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__ExecuteResponse ** SOAP_FMAC4 soap_get_PointerTo_ns1__ExecuteResponse(struct soap*, _ns1__ExecuteResponse **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__ExecuteResponse
#define soap_read_PointerTo_ns1__ExecuteResponse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__ExecuteResponse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_ns1__Execute
#define SOAP_TYPE_PointerTo_ns1__Execute (404)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Execute(struct soap*, _ns1__Execute *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Execute(struct soap*, const char *, int, _ns1__Execute *const*, const char *);
SOAP_FMAC3 _ns1__Execute ** SOAP_FMAC4 soap_in_PointerTo_ns1__Execute(struct soap*, const char*, _ns1__Execute **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Execute(struct soap*, _ns1__Execute *const*, const char*, const char*);

#ifndef soap_write_PointerTo_ns1__Execute
#define soap_write_PointerTo_ns1__Execute(soap, data) ( soap_serialize_PointerTo_ns1__Execute(soap, data), soap_begin_send(soap) || soap_put_PointerTo_ns1__Execute(soap, data, "ns1:Execute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 _ns1__Execute ** SOAP_FMAC4 soap_get_PointerTo_ns1__Execute(struct soap*, _ns1__Execute **, const char*, const char*);

#ifndef soap_read_PointerTo_ns1__Execute
#define soap_read_PointerTo_ns1__Execute(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_ns1__Execute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons6__Security
#define SOAP_TYPE_PointerTons6__Security (403)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__Security(struct soap*, ns6__Security *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__Security(struct soap*, const char *, int, ns6__Security *const*, const char *);
SOAP_FMAC3 ns6__Security ** SOAP_FMAC4 soap_in_PointerTons6__Security(struct soap*, const char*, ns6__Security **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__Security(struct soap*, ns6__Security *const*, const char*, const char*);

#ifndef soap_write_PointerTons6__Security
#define soap_write_PointerTons6__Security(soap, data) ( soap_serialize_PointerTons6__Security(soap, data), soap_begin_send(soap) || soap_put_PointerTons6__Security(soap, data, "ns6:Security", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns6__Security ** SOAP_FMAC4 soap_get_PointerTons6__Security(struct soap*, ns6__Security **, const char*, const char*);

#ifndef soap_read_PointerTons6__Security
#define soap_read_PointerTons6__Security(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons6__Security(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Session
#define SOAP_TYPE_PointerTons1__Session (402)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Session(struct soap*, ns1__Session *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Session(struct soap*, const char *, int, ns1__Session *const*, const char *);
SOAP_FMAC3 ns1__Session ** SOAP_FMAC4 soap_in_PointerTons1__Session(struct soap*, const char*, ns1__Session **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Session(struct soap*, ns1__Session *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Session
#define soap_write_PointerTons1__Session(soap, data) ( soap_serialize_PointerTons1__Session(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__Session(soap, data, "ns1:Session", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Session ** SOAP_FMAC4 soap_get_PointerTons1__Session(struct soap*, ns1__Session **, const char*, const char*);

#ifndef soap_read_PointerTons1__Session
#define soap_read_PointerTons1__Session(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Session(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__EndSession
#define SOAP_TYPE_PointerTons1__EndSession (401)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__EndSession(struct soap*, ns1__EndSession *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__EndSession(struct soap*, const char *, int, ns1__EndSession *const*, const char *);
SOAP_FMAC3 ns1__EndSession ** SOAP_FMAC4 soap_in_PointerTons1__EndSession(struct soap*, const char*, ns1__EndSession **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__EndSession(struct soap*, ns1__EndSession *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__EndSession
#define soap_write_PointerTons1__EndSession(soap, data) ( soap_serialize_PointerTons1__EndSession(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__EndSession(soap, data, "ns1:EndSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__EndSession ** SOAP_FMAC4 soap_get_PointerTons1__EndSession(struct soap*, ns1__EndSession **, const char*, const char*);

#ifndef soap_read_PointerTons1__EndSession
#define soap_read_PointerTons1__EndSession(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__EndSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__BeginSession
#define SOAP_TYPE_PointerTons1__BeginSession (400)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__BeginSession(struct soap*, ns1__BeginSession *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__BeginSession(struct soap*, const char *, int, ns1__BeginSession *const*, const char *);
SOAP_FMAC3 ns1__BeginSession ** SOAP_FMAC4 soap_in_PointerTons1__BeginSession(struct soap*, const char*, ns1__BeginSession **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__BeginSession(struct soap*, ns1__BeginSession *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__BeginSession
#define soap_write_PointerTons1__BeginSession(soap, data) ( soap_serialize_PointerTons1__BeginSession(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__BeginSession(soap, data, "ns1:BeginSession", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__BeginSession ** SOAP_FMAC4 soap_get_PointerTons1__BeginSession(struct soap*, ns1__BeginSession **, const char*, const char*);

#ifndef soap_read_PointerTons1__BeginSession
#define soap_read_PointerTons1__BeginSession(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__BeginSession(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaRedefine
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaRedefine (398)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaRedefine(struct soap*, __ns3__union_XmlSchemaRedefine *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaRedefine(struct soap*, const char *, int, __ns3__union_XmlSchemaRedefine *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaRedefine ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaRedefine(struct soap*, const char*, __ns3__union_XmlSchemaRedefine **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaRedefine(struct soap*, __ns3__union_XmlSchemaRedefine *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaRedefine
#define soap_write_PointerTo__ns3__union_XmlSchemaRedefine(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaRedefine(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaRedefine(soap, data, "-ns3:union-XmlSchemaRedefine", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaRedefine ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaRedefine(struct soap*, __ns3__union_XmlSchemaRedefine **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaRedefine
#define soap_read_PointerTo__ns3__union_XmlSchemaRedefine(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaRedefine(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction (396)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, __ns3__union_XmlSchemaSimpleTypeRestriction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, const char *, int, __ns3__union_XmlSchemaSimpleTypeRestriction *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleTypeRestriction ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, const char*, __ns3__union_XmlSchemaSimpleTypeRestriction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, __ns3__union_XmlSchemaSimpleTypeRestriction *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction
#define soap_write_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(soap, data, "-ns3:union-XmlSchemaSimpleTypeRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleTypeRestriction ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(struct soap*, __ns3__union_XmlSchemaSimpleTypeRestriction **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction
#define soap_read_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaSimpleTypeRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_ (393)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction_ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, const char *, int, __ns3__union_XmlSchemaSimpleContentRestriction_ *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction_ ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, const char*, __ns3__union_XmlSchemaSimpleContentRestriction_ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction_ *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_
#define soap_write_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(soap, data, "-ns3:union-XmlSchemaSimpleContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction_ ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction_ **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_
#define soap_read_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction (391)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, const char *, int, __ns3__union_XmlSchemaSimpleContentRestriction *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, const char*, __ns3__union_XmlSchemaSimpleContentRestriction **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction
#define soap_write_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(soap, data, "-ns3:union-XmlSchemaSimpleContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentRestriction ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(struct soap*, __ns3__union_XmlSchemaSimpleContentRestriction **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction
#define soap_read_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaSimpleContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaFractionDigitsFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaFractionDigitsFacet (390)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaFractionDigitsFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaFractionDigitsFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaFractionDigitsFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaFractionDigitsFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaFractionDigitsFacet
#define soap_write_PointerToxsd__XmlSchemaFractionDigitsFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaFractionDigitsFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaFractionDigitsFacet(soap, data, "xsd:XmlSchemaFractionDigitsFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaFractionDigitsFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaFractionDigitsFacet
#define soap_read_PointerToxsd__XmlSchemaFractionDigitsFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaFractionDigitsFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaTotalDigitsFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaTotalDigitsFacet (389)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaTotalDigitsFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaTotalDigitsFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaTotalDigitsFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaTotalDigitsFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaTotalDigitsFacet
#define soap_write_PointerToxsd__XmlSchemaTotalDigitsFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaTotalDigitsFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaTotalDigitsFacet(soap, data, "xsd:XmlSchemaTotalDigitsFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaTotalDigitsFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaTotalDigitsFacet
#define soap_read_PointerToxsd__XmlSchemaTotalDigitsFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaTotalDigitsFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaWhiteSpaceFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaWhiteSpaceFacet (388)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaWhiteSpaceFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaWhiteSpaceFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaWhiteSpaceFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaWhiteSpaceFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaWhiteSpaceFacet
#define soap_write_PointerToxsd__XmlSchemaWhiteSpaceFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaWhiteSpaceFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaWhiteSpaceFacet(soap, data, "xsd:XmlSchemaWhiteSpaceFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaWhiteSpaceFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaWhiteSpaceFacet
#define soap_read_PointerToxsd__XmlSchemaWhiteSpaceFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaWhiteSpaceFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaMinInclusiveFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaMinInclusiveFacet (387)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaMinInclusiveFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaMinInclusiveFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaMinInclusiveFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaMinInclusiveFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaMinInclusiveFacet
#define soap_write_PointerToxsd__XmlSchemaMinInclusiveFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaMinInclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaMinInclusiveFacet(soap, data, "xsd:XmlSchemaMinInclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaMinInclusiveFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaMinInclusiveFacet
#define soap_read_PointerToxsd__XmlSchemaMinInclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaMinInclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaMaxExclusiveFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaMaxExclusiveFacet (386)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaMaxExclusiveFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaMaxExclusiveFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaMaxExclusiveFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaMaxExclusiveFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaMaxExclusiveFacet
#define soap_write_PointerToxsd__XmlSchemaMaxExclusiveFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaMaxExclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaMaxExclusiveFacet(soap, data, "xsd:XmlSchemaMaxExclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaMaxExclusiveFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaMaxExclusiveFacet
#define soap_read_PointerToxsd__XmlSchemaMaxExclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaMaxExclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaPatternFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaPatternFacet (385)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaPatternFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaPatternFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaPatternFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaPatternFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaPatternFacet
#define soap_write_PointerToxsd__XmlSchemaPatternFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaPatternFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaPatternFacet(soap, data, "xsd:XmlSchemaPatternFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaPatternFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaPatternFacet
#define soap_read_PointerToxsd__XmlSchemaPatternFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaPatternFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaMaxLengthFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaMaxLengthFacet (384)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaMaxLengthFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaMaxLengthFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaMaxLengthFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaMaxLengthFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaMaxLengthFacet
#define soap_write_PointerToxsd__XmlSchemaMaxLengthFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaMaxLengthFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaMaxLengthFacet(soap, data, "xsd:XmlSchemaMaxLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaMaxLengthFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaMaxLengthFacet
#define soap_read_PointerToxsd__XmlSchemaMaxLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaMaxLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaMinLengthFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaMinLengthFacet (383)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaMinLengthFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaMinLengthFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaMinLengthFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaMinLengthFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaMinLengthFacet
#define soap_write_PointerToxsd__XmlSchemaMinLengthFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaMinLengthFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaMinLengthFacet(soap, data, "xsd:XmlSchemaMinLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaMinLengthFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaMinLengthFacet
#define soap_read_PointerToxsd__XmlSchemaMinLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaMinLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaLengthFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaLengthFacet (382)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaLengthFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaLengthFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaLengthFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaLengthFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaLengthFacet
#define soap_write_PointerToxsd__XmlSchemaLengthFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaLengthFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaLengthFacet(soap, data, "xsd:XmlSchemaLengthFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaLengthFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaLengthFacet
#define soap_read_PointerToxsd__XmlSchemaLengthFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaLengthFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaMaxInclusiveFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaMaxInclusiveFacet (381)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaMaxInclusiveFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaMaxInclusiveFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaMaxInclusiveFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaMaxInclusiveFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaMaxInclusiveFacet
#define soap_write_PointerToxsd__XmlSchemaMaxInclusiveFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaMaxInclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaMaxInclusiveFacet(soap, data, "xsd:XmlSchemaMaxInclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaMaxInclusiveFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaMaxInclusiveFacet
#define soap_read_PointerToxsd__XmlSchemaMaxInclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaMaxInclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaEnumerationFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaEnumerationFacet (380)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaEnumerationFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaEnumerationFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaEnumerationFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaEnumerationFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaEnumerationFacet
#define soap_write_PointerToxsd__XmlSchemaEnumerationFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaEnumerationFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaEnumerationFacet(soap, data, "xsd:XmlSchemaEnumerationFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaEnumerationFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaEnumerationFacet
#define soap_read_PointerToxsd__XmlSchemaEnumerationFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaEnumerationFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaMinExclusiveFacet
#define SOAP_TYPE_PointerToxsd__XmlSchemaMinExclusiveFacet (379)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaMinExclusiveFacet(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaMinExclusiveFacet(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaMinExclusiveFacet(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaMinExclusiveFacet(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaMinExclusiveFacet
#define soap_write_PointerToxsd__XmlSchemaMinExclusiveFacet(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaMinExclusiveFacet(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaMinExclusiveFacet(soap, data, "xsd:XmlSchemaMinExclusiveFacet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaMinExclusiveFacet(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaMinExclusiveFacet
#define soap_read_PointerToxsd__XmlSchemaMinExclusiveFacet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaMinExclusiveFacet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleContentExtension
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSimpleContentExtension (377)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(struct soap*, __ns3__union_XmlSchemaSimpleContentExtension *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(struct soap*, const char *, int, __ns3__union_XmlSchemaSimpleContentExtension *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentExtension ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(struct soap*, const char*, __ns3__union_XmlSchemaSimpleContentExtension **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(struct soap*, __ns3__union_XmlSchemaSimpleContentExtension *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaSimpleContentExtension
#define soap_write_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(soap, data, "-ns3:union-XmlSchemaSimpleContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSimpleContentExtension ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(struct soap*, __ns3__union_XmlSchemaSimpleContentExtension **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaSimpleContentExtension
#define soap_read_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaSimpleContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSequence
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaSequence (374)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaSequence(struct soap*, __ns3__union_XmlSchemaSequence *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaSequence(struct soap*, const char *, int, __ns3__union_XmlSchemaSequence *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaSequence ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaSequence(struct soap*, const char*, __ns3__union_XmlSchemaSequence **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaSequence(struct soap*, __ns3__union_XmlSchemaSequence *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaSequence
#define soap_write_PointerTo__ns3__union_XmlSchemaSequence(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaSequence(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaSequence(soap, data, "-ns3:union-XmlSchemaSequence", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaSequence ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaSequence(struct soap*, __ns3__union_XmlSchemaSequence **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaSequence
#define soap_read_PointerTo__ns3__union_XmlSchemaSequence(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaSequence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaChoice
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaChoice (372)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaChoice(struct soap*, __ns3__union_XmlSchemaChoice *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaChoice(struct soap*, const char *, int, __ns3__union_XmlSchemaChoice *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaChoice ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaChoice(struct soap*, const char*, __ns3__union_XmlSchemaChoice **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaChoice(struct soap*, __ns3__union_XmlSchemaChoice *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaChoice
#define soap_write_PointerTo__ns3__union_XmlSchemaChoice(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaChoice(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaChoice(soap, data, "-ns3:union-XmlSchemaChoice", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaChoice ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaChoice(struct soap*, __ns3__union_XmlSchemaChoice **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaChoice
#define soap_read_PointerTo__ns3__union_XmlSchemaChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaChoice(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAny
#define SOAP_TYPE_PointerToxsd__XmlSchemaAny (371)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAny(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAny(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAny(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAny(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAny
#define soap_write_PointerToxsd__XmlSchemaAny(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAny(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAny(soap, data, "xsd:XmlSchemaAny", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAny(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAny
#define soap_read_PointerToxsd__XmlSchemaAny(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAny(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaContentProcessing
#define SOAP_TYPE_PointerToxsd__XmlSchemaContentProcessing (369)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaContentProcessing(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaContentProcessing(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaContentProcessing(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaContentProcessing(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaContentProcessing
#define soap_write_PointerToxsd__XmlSchemaContentProcessing(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaContentProcessing(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaContentProcessing(soap, data, "xsd:XmlSchemaContentProcessing", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaContentProcessing(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaContentProcessing
#define soap_read_PointerToxsd__XmlSchemaContentProcessing(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaContentProcessing(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaXPath
#define SOAP_TYPE_PointerToxsd__XmlSchemaXPath (367)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaXPath(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaXPath(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaXPath(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaXPath(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaXPath
#define soap_write_PointerToxsd__XmlSchemaXPath(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaXPath(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaXPath(soap, data, "xsd:XmlSchemaXPath", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaXPath(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaXPath
#define soap_read_PointerToxsd__XmlSchemaXPath(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaXPath(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaElement_
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaElement_ (366)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaElement_(struct soap*, __ns3__union_XmlSchemaElement_ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaElement_(struct soap*, const char *, int, __ns3__union_XmlSchemaElement_ *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaElement_ ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaElement_(struct soap*, const char*, __ns3__union_XmlSchemaElement_ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaElement_(struct soap*, __ns3__union_XmlSchemaElement_ *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaElement_
#define soap_write_PointerTo__ns3__union_XmlSchemaElement_(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaElement_(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaElement_(soap, data, "-ns3:union-XmlSchemaElement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaElement_ ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaElement_(struct soap*, __ns3__union_XmlSchemaElement_ **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaElement_
#define soap_read_PointerTo__ns3__union_XmlSchemaElement_(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaElement_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaKeyref
#define SOAP_TYPE_PointerToxsd__XmlSchemaKeyref (365)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaKeyref(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaKeyref(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaKeyref(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaKeyref(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaKeyref
#define soap_write_PointerToxsd__XmlSchemaKeyref(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaKeyref(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaKeyref(soap, data, "xsd:XmlSchemaKeyref", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaKeyref(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaKeyref
#define soap_read_PointerToxsd__XmlSchemaKeyref(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaKeyref(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaKey
#define SOAP_TYPE_PointerToxsd__XmlSchemaKey (364)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaKey(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaKey(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaKey(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaKey(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaKey
#define soap_write_PointerToxsd__XmlSchemaKey(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaKey(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaKey(soap, data, "xsd:XmlSchemaKey", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaKey(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaKey
#define soap_read_PointerToxsd__XmlSchemaKey(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaKey(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaUnique
#define SOAP_TYPE_PointerToxsd__XmlSchemaUnique (363)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaUnique(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaUnique(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaUnique(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaUnique(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaUnique
#define soap_write_PointerToxsd__XmlSchemaUnique(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaUnique(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaUnique(soap, data, "xsd:XmlSchemaUnique", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaUnique(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaUnique
#define soap_read_PointerToxsd__XmlSchemaUnique(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaUnique(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaComplexContentExtension_
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaComplexContentExtension_ (361)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(struct soap*, __ns3__union_XmlSchemaComplexContentExtension_ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(struct soap*, const char *, int, __ns3__union_XmlSchemaComplexContentExtension_ *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentExtension_ ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(struct soap*, const char*, __ns3__union_XmlSchemaComplexContentExtension_ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(struct soap*, __ns3__union_XmlSchemaComplexContentExtension_ *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaComplexContentExtension_
#define soap_write_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(soap, data, "-ns3:union-XmlSchemaComplexContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentExtension_ ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(struct soap*, __ns3__union_XmlSchemaComplexContentExtension_ **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaComplexContentExtension_
#define soap_read_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaComplexContentExtension_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_ (359)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, __ns3__union_XmlSchemaComplexContentRestriction_ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, const char *, int, __ns3__union_XmlSchemaComplexContentRestriction_ *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentRestriction_ ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, const char*, __ns3__union_XmlSchemaComplexContentRestriction_ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, __ns3__union_XmlSchemaComplexContentRestriction_ *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_
#define soap_write_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(soap, data, "-ns3:union-XmlSchemaComplexContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaComplexContentRestriction_ ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(struct soap*, __ns3__union_XmlSchemaComplexContentRestriction_ **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_
#define soap_read_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaComplexContentRestriction_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaComplexContentExtension
#define SOAP_TYPE_PointerToxsd__XmlSchemaComplexContentExtension (357)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaComplexContentExtension(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaComplexContentExtension(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaComplexContentExtension(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaComplexContentExtension(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaComplexContentExtension
#define soap_write_PointerToxsd__XmlSchemaComplexContentExtension(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaComplexContentExtension(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaComplexContentExtension(soap, data, "xsd:XmlSchemaComplexContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaComplexContentExtension(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaComplexContentExtension
#define soap_read_PointerToxsd__XmlSchemaComplexContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaComplexContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaComplexContentRestriction
#define SOAP_TYPE_PointerToxsd__XmlSchemaComplexContentRestriction (356)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaComplexContentRestriction(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaComplexContentRestriction(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaComplexContentRestriction(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaComplexContentRestriction(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaComplexContentRestriction
#define soap_write_PointerToxsd__XmlSchemaComplexContentRestriction(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaComplexContentRestriction(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaComplexContentRestriction(soap, data, "xsd:XmlSchemaComplexContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaComplexContentRestriction(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaComplexContentRestriction
#define soap_read_PointerToxsd__XmlSchemaComplexContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaComplexContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSimpleContentExtension
#define SOAP_TYPE_PointerToxsd__XmlSchemaSimpleContentExtension (355)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSimpleContentExtension(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSimpleContentExtension(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSimpleContentExtension(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSimpleContentExtension(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSimpleContentExtension
#define soap_write_PointerToxsd__XmlSchemaSimpleContentExtension(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSimpleContentExtension(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSimpleContentExtension(soap, data, "xsd:XmlSchemaSimpleContentExtension", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSimpleContentExtension(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSimpleContentExtension
#define soap_read_PointerToxsd__XmlSchemaSimpleContentExtension(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSimpleContentExtension(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSimpleContentRestriction
#define SOAP_TYPE_PointerToxsd__XmlSchemaSimpleContentRestriction (354)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSimpleContentRestriction(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSimpleContentRestriction(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSimpleContentRestriction(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSimpleContentRestriction(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSimpleContentRestriction
#define soap_write_PointerToxsd__XmlSchemaSimpleContentRestriction(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSimpleContentRestriction(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSimpleContentRestriction(soap, data, "xsd:XmlSchemaSimpleContentRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSimpleContentRestriction(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSimpleContentRestriction
#define soap_read_PointerToxsd__XmlSchemaSimpleContentRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSimpleContentRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaComplexType__
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaComplexType__ (352)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaComplexType__(struct soap*, __ns3__union_XmlSchemaComplexType__ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaComplexType__(struct soap*, const char *, int, __ns3__union_XmlSchemaComplexType__ *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaComplexType__ ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaComplexType__(struct soap*, const char*, __ns3__union_XmlSchemaComplexType__ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaComplexType__(struct soap*, __ns3__union_XmlSchemaComplexType__ *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaComplexType__
#define soap_write_PointerTo__ns3__union_XmlSchemaComplexType__(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaComplexType__(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaComplexType__(soap, data, "-ns3:union-XmlSchemaComplexType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaComplexType__ ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaComplexType__(struct soap*, __ns3__union_XmlSchemaComplexType__ **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaComplexType__
#define soap_read_PointerTo__ns3__union_XmlSchemaComplexType__(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaComplexType__(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAll
#define SOAP_TYPE_PointerToxsd__XmlSchemaAll (350)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAll(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAll(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAll(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAll(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAll
#define soap_write_PointerToxsd__XmlSchemaAll(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAll(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAll(soap, data, "xsd:XmlSchemaAll", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAll(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAll
#define soap_read_PointerToxsd__XmlSchemaAll(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAll(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaChoice
#define SOAP_TYPE_PointerToxsd__XmlSchemaChoice (349)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaChoice(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaChoice(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaChoice(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaChoice(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaChoice
#define soap_write_PointerToxsd__XmlSchemaChoice(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaChoice(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaChoice(soap, data, "xsd:XmlSchemaChoice", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaChoice(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaChoice
#define soap_read_PointerToxsd__XmlSchemaChoice(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaChoice(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSequence
#define SOAP_TYPE_PointerToxsd__XmlSchemaSequence (348)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSequence(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSequence(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSequence(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSequence(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSequence
#define soap_write_PointerToxsd__XmlSchemaSequence(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSequence(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSequence(soap, data, "xsd:XmlSchemaSequence", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSequence(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSequence
#define soap_read_PointerToxsd__XmlSchemaSequence(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSequence(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaGroupRef
#define SOAP_TYPE_PointerToxsd__XmlSchemaGroupRef (347)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaGroupRef(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaGroupRef(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaGroupRef(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaGroupRef(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaGroupRef
#define soap_write_PointerToxsd__XmlSchemaGroupRef(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaGroupRef(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaGroupRef(soap, data, "xsd:XmlSchemaGroupRef", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaGroupRef(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaGroupRef
#define soap_read_PointerToxsd__XmlSchemaGroupRef(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaGroupRef(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaComplexContent
#define SOAP_TYPE_PointerToxsd__XmlSchemaComplexContent (346)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaComplexContent(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaComplexContent(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaComplexContent(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaComplexContent(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaComplexContent
#define soap_write_PointerToxsd__XmlSchemaComplexContent(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaComplexContent(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaComplexContent(soap, data, "xsd:XmlSchemaComplexContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaComplexContent(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaComplexContent
#define soap_read_PointerToxsd__XmlSchemaComplexContent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaComplexContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSimpleContent
#define SOAP_TYPE_PointerToxsd__XmlSchemaSimpleContent (345)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSimpleContent(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSimpleContent(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSimpleContent(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSimpleContent(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSimpleContent
#define soap_write_PointerToxsd__XmlSchemaSimpleContent(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSimpleContent(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSimpleContent(soap, data, "xsd:XmlSchemaSimpleContent", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSimpleContent(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSimpleContent
#define soap_read_PointerToxsd__XmlSchemaSimpleContent(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSimpleContent(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSimpleTypeRestriction
#define SOAP_TYPE_PointerToxsd__XmlSchemaSimpleTypeRestriction (344)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSimpleTypeRestriction(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSimpleTypeRestriction(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSimpleTypeRestriction(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSimpleTypeRestriction(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSimpleTypeRestriction
#define soap_write_PointerToxsd__XmlSchemaSimpleTypeRestriction(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSimpleTypeRestriction(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSimpleTypeRestriction(soap, data, "xsd:XmlSchemaSimpleTypeRestriction", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSimpleTypeRestriction(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSimpleTypeRestriction
#define soap_read_PointerToxsd__XmlSchemaSimpleTypeRestriction(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSimpleTypeRestriction(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSimpleTypeList
#define SOAP_TYPE_PointerToxsd__XmlSchemaSimpleTypeList (343)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSimpleTypeList(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSimpleTypeList(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSimpleTypeList(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSimpleTypeList(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSimpleTypeList
#define soap_write_PointerToxsd__XmlSchemaSimpleTypeList(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSimpleTypeList(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSimpleTypeList(soap, data, "xsd:XmlSchemaSimpleTypeList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSimpleTypeList(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSimpleTypeList
#define soap_read_PointerToxsd__XmlSchemaSimpleTypeList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSimpleTypeList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSimpleTypeUnion
#define SOAP_TYPE_PointerToxsd__XmlSchemaSimpleTypeUnion (342)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSimpleTypeUnion(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSimpleTypeUnion(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSimpleTypeUnion(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSimpleTypeUnion(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSimpleTypeUnion
#define soap_write_PointerToxsd__XmlSchemaSimpleTypeUnion(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSimpleTypeUnion(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSimpleTypeUnion(soap, data, "xsd:XmlSchemaSimpleTypeUnion", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSimpleTypeUnion(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSimpleTypeUnion
#define soap_read_PointerToxsd__XmlSchemaSimpleTypeUnion(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSimpleTypeUnion(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaUse
#define SOAP_TYPE_PointerToxsd__XmlSchemaUse (341)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaUse(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaUse(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaUse(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaUse(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaUse
#define soap_write_PointerToxsd__XmlSchemaUse(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaUse(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaUse(soap, data, "xsd:XmlSchemaUse", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaUse(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaUse
#define soap_read_PointerToxsd__XmlSchemaUse(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaUse(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__QName
#define SOAP_TYPE_PointerToxsd__QName (340)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__QName(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__QName(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__QName(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__QName(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__QName
#define soap_write_PointerToxsd__QName(soap, data) ( soap_serialize_PointerToxsd__QName(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__QName(soap, data, "xsd:QName", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__QName(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__QName
#define soap_read_PointerToxsd__QName(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAnyAttribute
#define SOAP_TYPE_PointerToxsd__XmlSchemaAnyAttribute (339)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAnyAttribute(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAnyAttribute(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAnyAttribute(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAnyAttribute(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAnyAttribute
#define soap_write_PointerToxsd__XmlSchemaAnyAttribute(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAnyAttribute(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAnyAttribute(soap, data, "xsd:XmlSchemaAnyAttribute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAnyAttribute(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAnyAttribute
#define soap_read_PointerToxsd__XmlSchemaAnyAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAnyAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaAttributeGroup
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaAttributeGroup (338)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaAttributeGroup(struct soap*, __ns3__union_XmlSchemaAttributeGroup *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaAttributeGroup(struct soap*, const char *, int, __ns3__union_XmlSchemaAttributeGroup *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaAttributeGroup ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaAttributeGroup(struct soap*, const char*, __ns3__union_XmlSchemaAttributeGroup **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaAttributeGroup(struct soap*, __ns3__union_XmlSchemaAttributeGroup *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaAttributeGroup
#define soap_write_PointerTo__ns3__union_XmlSchemaAttributeGroup(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaAttributeGroup(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaAttributeGroup(soap, data, "-ns3:union-XmlSchemaAttributeGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaAttributeGroup ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaAttributeGroup(struct soap*, __ns3__union_XmlSchemaAttributeGroup **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaAttributeGroup
#define soap_read_PointerTo__ns3__union_XmlSchemaAttributeGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaAttributeGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAttributeGroupRef
#define SOAP_TYPE_PointerToxsd__XmlSchemaAttributeGroupRef (337)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAttributeGroupRef(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAttributeGroupRef(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAttributeGroupRef(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAttributeGroupRef(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAttributeGroupRef
#define soap_write_PointerToxsd__XmlSchemaAttributeGroupRef(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAttributeGroupRef(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAttributeGroupRef(soap, data, "xsd:XmlSchemaAttributeGroupRef", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAttributeGroupRef(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAttributeGroupRef
#define soap_read_PointerToxsd__XmlSchemaAttributeGroupRef(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAttributeGroupRef(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo_xml__lang
#define SOAP_TYPE_PointerTo_xml__lang (335)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_xml__lang(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_xml__lang(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTo_xml__lang(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_xml__lang(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTo_xml__lang
#define soap_write_PointerTo_xml__lang(soap, data) ( soap_serialize_PointerTo_xml__lang(soap, data), soap_begin_send(soap) || soap_put_PointerTo_xml__lang(soap, data, "xml:lang", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTo_xml__lang(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTo_xml__lang
#define soap_read_PointerTo_xml__lang(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo_xml__lang(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchemaAnnotation
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchemaAnnotation (334)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchemaAnnotation(struct soap*, __ns3__union_XmlSchemaAnnotation *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchemaAnnotation(struct soap*, const char *, int, __ns3__union_XmlSchemaAnnotation *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchemaAnnotation ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchemaAnnotation(struct soap*, const char*, __ns3__union_XmlSchemaAnnotation **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchemaAnnotation(struct soap*, __ns3__union_XmlSchemaAnnotation *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchemaAnnotation
#define soap_write_PointerTo__ns3__union_XmlSchemaAnnotation(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchemaAnnotation(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchemaAnnotation(soap, data, "-ns3:union-XmlSchemaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchemaAnnotation ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchemaAnnotation(struct soap*, __ns3__union_XmlSchemaAnnotation **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchemaAnnotation
#define soap_read_PointerTo__ns3__union_XmlSchemaAnnotation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchemaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAppInfo
#define SOAP_TYPE_PointerToxsd__XmlSchemaAppInfo (333)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAppInfo(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAppInfo(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAppInfo(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAppInfo(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAppInfo
#define soap_write_PointerToxsd__XmlSchemaAppInfo(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAppInfo(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAppInfo(soap, data, "xsd:XmlSchemaAppInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAppInfo(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAppInfo
#define soap_read_PointerToxsd__XmlSchemaAppInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAppInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaDocumentation
#define SOAP_TYPE_PointerToxsd__XmlSchemaDocumentation (332)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaDocumentation(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaDocumentation(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaDocumentation(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaDocumentation(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaDocumentation
#define soap_write_PointerToxsd__XmlSchemaDocumentation(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaDocumentation(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaDocumentation(soap, data, "xsd:XmlSchemaDocumentation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaDocumentation(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaDocumentation
#define soap_read_PointerToxsd__XmlSchemaDocumentation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaDocumentation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__ID
#define SOAP_TYPE_PointerToxsd__ID (330)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__ID(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__ID(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__ID(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__ID(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__ID
#define soap_write_PointerToxsd__ID(soap, data) ( soap_serialize_PointerToxsd__ID(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__ID(soap, data, "xsd:ID", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__ID(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__ID
#define soap_read_PointerToxsd__ID(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__ID(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__token
#define SOAP_TYPE_PointerToxsd__token (329)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__token(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__token(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__token(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__token(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__token
#define soap_write_PointerToxsd__token(soap, data) ( soap_serialize_PointerToxsd__token(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__token(soap, data, "xsd:token", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__token(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__token
#define soap_read_PointerToxsd__token(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__token(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__anyURI
#define SOAP_TYPE_PointerToxsd__anyURI (328)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__anyURI(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__anyURI(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__anyURI(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__anyURI(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__anyURI
#define soap_write_PointerToxsd__anyURI(soap, data) ( soap_serialize_PointerToxsd__anyURI(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__anyURI(soap, data, "xsd:anyURI", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__anyURI(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__anyURI
#define soap_read_PointerToxsd__anyURI(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__anyURI(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaDerivationMethod
#define SOAP_TYPE_PointerToxsd__XmlSchemaDerivationMethod (327)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaDerivationMethod(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaDerivationMethod(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaDerivationMethod(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaDerivationMethod(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaDerivationMethod
#define soap_write_PointerToxsd__XmlSchemaDerivationMethod(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaDerivationMethod(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaDerivationMethod(soap, data, "xsd:XmlSchemaDerivationMethod", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaDerivationMethod(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaDerivationMethod
#define soap_read_PointerToxsd__XmlSchemaDerivationMethod(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaDerivationMethod(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaForm
#define SOAP_TYPE_PointerToxsd__XmlSchemaForm (326)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaForm(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaForm(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaForm(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaForm(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaForm
#define soap_write_PointerToxsd__XmlSchemaForm(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaForm(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaForm(soap, data, "xsd:XmlSchemaForm", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaForm(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaForm
#define soap_read_PointerToxsd__XmlSchemaForm(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaForm(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchema_
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchema_ (325)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchema_(struct soap*, __ns3__union_XmlSchema_ *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchema_(struct soap*, const char *, int, __ns3__union_XmlSchema_ *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchema_ ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchema_(struct soap*, const char*, __ns3__union_XmlSchema_ **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchema_(struct soap*, __ns3__union_XmlSchema_ *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchema_
#define soap_write_PointerTo__ns3__union_XmlSchema_(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchema_(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchema_(soap, data, "-ns3:union-XmlSchema", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchema_ ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchema_(struct soap*, __ns3__union_XmlSchema_ **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchema_
#define soap_read_PointerTo__ns3__union_XmlSchema_(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchema_(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaElement
#define SOAP_TYPE_PointerToxsd__XmlSchemaElement (324)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaElement(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaElement(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaElement(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaElement(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaElement
#define soap_write_PointerToxsd__XmlSchemaElement(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaElement(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaElement(soap, data, "xsd:XmlSchemaElement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaElement(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaElement
#define soap_read_PointerToxsd__XmlSchemaElement(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaElement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaSimpleType
#define SOAP_TYPE_PointerToxsd__XmlSchemaSimpleType (323)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaSimpleType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaSimpleType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaSimpleType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaSimpleType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaSimpleType
#define soap_write_PointerToxsd__XmlSchemaSimpleType(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaSimpleType(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaSimpleType(soap, data, "xsd:XmlSchemaSimpleType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaSimpleType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaSimpleType
#define soap_read_PointerToxsd__XmlSchemaSimpleType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaSimpleType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaComplexType
#define SOAP_TYPE_PointerToxsd__XmlSchemaComplexType (322)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaComplexType(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaComplexType(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaComplexType(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaComplexType(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaComplexType
#define soap_write_PointerToxsd__XmlSchemaComplexType(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaComplexType(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaComplexType(soap, data, "xsd:XmlSchemaComplexType", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaComplexType(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaComplexType
#define soap_read_PointerToxsd__XmlSchemaComplexType(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaComplexType(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAttributeGroup
#define SOAP_TYPE_PointerToxsd__XmlSchemaAttributeGroup (321)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAttributeGroup(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAttributeGroup(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAttributeGroup(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAttributeGroup(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAttributeGroup
#define soap_write_PointerToxsd__XmlSchemaAttributeGroup(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAttributeGroup(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAttributeGroup(soap, data, "xsd:XmlSchemaAttributeGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAttributeGroup(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAttributeGroup
#define soap_read_PointerToxsd__XmlSchemaAttributeGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAttributeGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAttribute
#define SOAP_TYPE_PointerToxsd__XmlSchemaAttribute (320)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAttribute(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAttribute(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAttribute(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAttribute(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAttribute
#define soap_write_PointerToxsd__XmlSchemaAttribute(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAttribute(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAttribute(soap, data, "xsd:XmlSchemaAttribute", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAttribute(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAttribute
#define soap_read_PointerToxsd__XmlSchemaAttribute(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAttribute(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaAnnotation
#define SOAP_TYPE_PointerToxsd__XmlSchemaAnnotation (319)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaAnnotation(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaAnnotation(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaAnnotation(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaAnnotation(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaAnnotation
#define soap_write_PointerToxsd__XmlSchemaAnnotation(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaAnnotation(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaAnnotation(soap, data, "xsd:XmlSchemaAnnotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaAnnotation(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaAnnotation
#define soap_read_PointerToxsd__XmlSchemaAnnotation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaAnnotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaGroup
#define SOAP_TYPE_PointerToxsd__XmlSchemaGroup (318)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaGroup(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaGroup(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaGroup(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaGroup(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaGroup
#define soap_write_PointerToxsd__XmlSchemaGroup(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaGroup(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaGroup(soap, data, "xsd:XmlSchemaGroup", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaGroup(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaGroup
#define soap_read_PointerToxsd__XmlSchemaGroup(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaGroup(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaNotation
#define SOAP_TYPE_PointerToxsd__XmlSchemaNotation (317)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaNotation(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaNotation(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaNotation(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaNotation(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaNotation
#define soap_write_PointerToxsd__XmlSchemaNotation(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaNotation(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaNotation(soap, data, "xsd:XmlSchemaNotation", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaNotation(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaNotation
#define soap_read_PointerToxsd__XmlSchemaNotation(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaNotation(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns3__union_XmlSchema
#define SOAP_TYPE_PointerTo__ns3__union_XmlSchema (315)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns3__union_XmlSchema(struct soap*, __ns3__union_XmlSchema *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns3__union_XmlSchema(struct soap*, const char *, int, __ns3__union_XmlSchema *const*, const char *);
SOAP_FMAC3 __ns3__union_XmlSchema ** SOAP_FMAC4 soap_in_PointerTo__ns3__union_XmlSchema(struct soap*, const char*, __ns3__union_XmlSchema **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns3__union_XmlSchema(struct soap*, __ns3__union_XmlSchema *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns3__union_XmlSchema
#define soap_write_PointerTo__ns3__union_XmlSchema(soap, data) ( soap_serialize_PointerTo__ns3__union_XmlSchema(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns3__union_XmlSchema(soap, data, "-ns3:union-XmlSchema", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns3__union_XmlSchema ** SOAP_FMAC4 soap_get_PointerTo__ns3__union_XmlSchema(struct soap*, __ns3__union_XmlSchema **, const char*, const char*);

#ifndef soap_read_PointerTo__ns3__union_XmlSchema
#define soap_read_PointerTo__ns3__union_XmlSchema(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns3__union_XmlSchema(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaImport
#define SOAP_TYPE_PointerToxsd__XmlSchemaImport (314)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaImport(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaImport(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaImport(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaImport(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaImport
#define soap_write_PointerToxsd__XmlSchemaImport(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaImport(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaImport(soap, data, "xsd:XmlSchemaImport", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaImport(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaImport
#define soap_read_PointerToxsd__XmlSchemaImport(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaImport(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaRedefine
#define SOAP_TYPE_PointerToxsd__XmlSchemaRedefine (313)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaRedefine(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaRedefine(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaRedefine(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaRedefine(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaRedefine
#define soap_write_PointerToxsd__XmlSchemaRedefine(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaRedefine(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaRedefine(soap, data, "xsd:XmlSchemaRedefine", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaRedefine(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaRedefine
#define soap_read_PointerToxsd__XmlSchemaRedefine(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaRedefine(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerToxsd__XmlSchemaInclude
#define SOAP_TYPE_PointerToxsd__XmlSchemaInclude (312)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToxsd__XmlSchemaInclude(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToxsd__XmlSchemaInclude(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerToxsd__XmlSchemaInclude(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToxsd__XmlSchemaInclude(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerToxsd__XmlSchemaInclude
#define soap_write_PointerToxsd__XmlSchemaInclude(soap, data) ( soap_serialize_PointerToxsd__XmlSchemaInclude(soap, data), soap_begin_send(soap) || soap_put_PointerToxsd__XmlSchemaInclude(soap, data, "xsd:XmlSchemaInclude", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerToxsd__XmlSchemaInclude(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerToxsd__XmlSchemaInclude
#define soap_read_PointerToxsd__XmlSchemaInclude(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToxsd__XmlSchemaInclude(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons6__UsernameTokenElement
#define SOAP_TYPE_PointerTons6__UsernameTokenElement (310)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__UsernameTokenElement(struct soap*, ns6__UsernameTokenElement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__UsernameTokenElement(struct soap*, const char *, int, ns6__UsernameTokenElement *const*, const char *);
SOAP_FMAC3 ns6__UsernameTokenElement ** SOAP_FMAC4 soap_in_PointerTons6__UsernameTokenElement(struct soap*, const char*, ns6__UsernameTokenElement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__UsernameTokenElement(struct soap*, ns6__UsernameTokenElement *const*, const char*, const char*);

#ifndef soap_write_PointerTons6__UsernameTokenElement
#define soap_write_PointerTons6__UsernameTokenElement(soap, data) ( soap_serialize_PointerTons6__UsernameTokenElement(soap, data), soap_begin_send(soap) || soap_put_PointerTons6__UsernameTokenElement(soap, data, "ns6:UsernameTokenElement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns6__UsernameTokenElement ** SOAP_FMAC4 soap_get_PointerTons6__UsernameTokenElement(struct soap*, ns6__UsernameTokenElement **, const char*, const char*);

#ifndef soap_read_PointerTons6__UsernameTokenElement
#define soap_read_PointerTons6__UsernameTokenElement(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons6__UsernameTokenElement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__HierarchyInfo
#define SOAP_TYPE_PointerTons5__HierarchyInfo (308)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__HierarchyInfo(struct soap*, ns5__HierarchyInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__HierarchyInfo(struct soap*, const char *, int, ns5__HierarchyInfo *const*, const char *);
SOAP_FMAC3 ns5__HierarchyInfo ** SOAP_FMAC4 soap_in_PointerTons5__HierarchyInfo(struct soap*, const char*, ns5__HierarchyInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__HierarchyInfo(struct soap*, ns5__HierarchyInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__HierarchyInfo
#define soap_write_PointerTons5__HierarchyInfo(soap, data) ( soap_serialize_PointerTons5__HierarchyInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__HierarchyInfo(soap, data, "ns5:HierarchyInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__HierarchyInfo ** SOAP_FMAC4 soap_get_PointerTons5__HierarchyInfo(struct soap*, ns5__HierarchyInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__HierarchyInfo
#define soap_read_PointerTons5__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__AxisInfo
#define SOAP_TYPE_PointerTons5__AxisInfo (306)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__AxisInfo(struct soap*, ns5__AxisInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__AxisInfo(struct soap*, const char *, int, ns5__AxisInfo *const*, const char *);
SOAP_FMAC3 ns5__AxisInfo ** SOAP_FMAC4 soap_in_PointerTons5__AxisInfo(struct soap*, const char*, ns5__AxisInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__AxisInfo(struct soap*, ns5__AxisInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__AxisInfo
#define soap_write_PointerTons5__AxisInfo(soap, data) ( soap_serialize_PointerTons5__AxisInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__AxisInfo(soap, data, "ns5:AxisInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__AxisInfo ** SOAP_FMAC4 soap_get_PointerTons5__AxisInfo(struct soap*, ns5__AxisInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__AxisInfo
#define soap_read_PointerTons5__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Cube
#define SOAP_TYPE_PointerTons5__Cube (304)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Cube(struct soap*, ns5__Cube *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Cube(struct soap*, const char *, int, ns5__Cube *const*, const char *);
SOAP_FMAC3 ns5__Cube ** SOAP_FMAC4 soap_in_PointerTons5__Cube(struct soap*, const char*, ns5__Cube **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Cube(struct soap*, ns5__Cube *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Cube
#define soap_write_PointerTons5__Cube(soap, data) ( soap_serialize_PointerTons5__Cube(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Cube(soap, data, "ns5:Cube", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Cube ** SOAP_FMAC4 soap_get_PointerTons5__Cube(struct soap*, ns5__Cube **, const char*, const char*);

#ifndef soap_read_PointerTons5__Cube
#define soap_read_PointerTons5__Cube(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Cube(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__CellInfo
#define SOAP_TYPE_PointerTons5__CellInfo (303)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__CellInfo(struct soap*, ns5__CellInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__CellInfo(struct soap*, const char *, int, ns5__CellInfo *const*, const char *);
SOAP_FMAC3 ns5__CellInfo ** SOAP_FMAC4 soap_in_PointerTons5__CellInfo(struct soap*, const char*, ns5__CellInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__CellInfo(struct soap*, ns5__CellInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__CellInfo
#define soap_write_PointerTons5__CellInfo(soap, data) ( soap_serialize_PointerTons5__CellInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__CellInfo(soap, data, "ns5:CellInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CellInfo ** SOAP_FMAC4 soap_get_PointerTons5__CellInfo(struct soap*, ns5__CellInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__CellInfo
#define soap_read_PointerTons5__CellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__CellInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__AxesInfo
#define SOAP_TYPE_PointerTons5__AxesInfo (302)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__AxesInfo(struct soap*, ns5__AxesInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__AxesInfo(struct soap*, const char *, int, ns5__AxesInfo *const*, const char *);
SOAP_FMAC3 ns5__AxesInfo ** SOAP_FMAC4 soap_in_PointerTons5__AxesInfo(struct soap*, const char*, ns5__AxesInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__AxesInfo(struct soap*, ns5__AxesInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__AxesInfo
#define soap_write_PointerTons5__AxesInfo(soap, data) ( soap_serialize_PointerTons5__AxesInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__AxesInfo(soap, data, "ns5:AxesInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__AxesInfo ** SOAP_FMAC4 soap_get_PointerTons5__AxesInfo(struct soap*, ns5__AxesInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__AxesInfo
#define soap_read_PointerTons5__AxesInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__AxesInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__CubeInfo
#define SOAP_TYPE_PointerTons5__CubeInfo (301)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__CubeInfo(struct soap*, ns5__CubeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__CubeInfo(struct soap*, const char *, int, ns5__CubeInfo *const*, const char *);
SOAP_FMAC3 ns5__CubeInfo ** SOAP_FMAC4 soap_in_PointerTons5__CubeInfo(struct soap*, const char*, ns5__CubeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__CubeInfo(struct soap*, ns5__CubeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__CubeInfo
#define soap_write_PointerTons5__CubeInfo(soap, data) ( soap_serialize_PointerTons5__CubeInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__CubeInfo(soap, data, "ns5:CubeInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CubeInfo ** SOAP_FMAC4 soap_get_PointerTons5__CubeInfo(struct soap*, ns5__CubeInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__CubeInfo
#define soap_read_PointerTons5__CubeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__CubeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Members
#define SOAP_TYPE_PointerTons5__Members (299)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Members(struct soap*, ns5__Members *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Members(struct soap*, const char *, int, ns5__Members *const*, const char *);
SOAP_FMAC3 ns5__Members ** SOAP_FMAC4 soap_in_PointerTons5__Members(struct soap*, const char*, ns5__Members **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Members(struct soap*, ns5__Members *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Members
#define soap_write_PointerTons5__Members(soap, data) ( soap_serialize_PointerTons5__Members(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Members(soap, data, "ns5:Members", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Members ** SOAP_FMAC4 soap_get_PointerTons5__Members(struct soap*, ns5__Members **, const char*, const char*);

#ifndef soap_read_PointerTons5__Members
#define soap_read_PointerTons5__Members(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Members(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Member
#define SOAP_TYPE_PointerTons5__Member (297)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Member(struct soap*, ns5__Member *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Member(struct soap*, const char *, int, ns5__Member *const*, const char *);
SOAP_FMAC3 ns5__Member ** SOAP_FMAC4 soap_in_PointerTons5__Member(struct soap*, const char*, ns5__Member **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Member(struct soap*, ns5__Member *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Member
#define soap_write_PointerTons5__Member(soap, data) ( soap_serialize_PointerTons5__Member(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Member(soap, data, "ns5:Member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Member ** SOAP_FMAC4 soap_get_PointerTons5__Member(struct soap*, ns5__Member **, const char*, const char*);

#ifndef soap_read_PointerTons5__Member
#define soap_read_PointerTons5__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Member(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Tuple
#define SOAP_TYPE_PointerTons5__Tuple (295)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Tuple(struct soap*, ns5__Tuple *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Tuple(struct soap*, const char *, int, ns5__Tuple *const*, const char *);
SOAP_FMAC3 ns5__Tuple ** SOAP_FMAC4 soap_in_PointerTons5__Tuple(struct soap*, const char*, ns5__Tuple **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Tuple(struct soap*, ns5__Tuple *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Tuple
#define soap_write_PointerTons5__Tuple(soap, data) ( soap_serialize_PointerTons5__Tuple(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Tuple(soap, data, "ns5:Tuple", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Tuple ** SOAP_FMAC4 soap_get_PointerTons5__Tuple(struct soap*, ns5__Tuple **, const char*, const char*);

#ifndef soap_read_PointerTons5__Tuple
#define soap_read_PointerTons5__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns5__union_Axis
#define SOAP_TYPE_PointerTo__ns5__union_Axis (294)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns5__union_Axis(struct soap*, __ns5__union_Axis *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns5__union_Axis(struct soap*, const char *, int, __ns5__union_Axis *const*, const char *);
SOAP_FMAC3 __ns5__union_Axis ** SOAP_FMAC4 soap_in_PointerTo__ns5__union_Axis(struct soap*, const char*, __ns5__union_Axis **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns5__union_Axis(struct soap*, __ns5__union_Axis *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns5__union_Axis
#define soap_write_PointerTo__ns5__union_Axis(soap, data) ( soap_serialize_PointerTo__ns5__union_Axis(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns5__union_Axis(soap, data, "-ns5:union-Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns5__union_Axis ** SOAP_FMAC4 soap_get_PointerTo__ns5__union_Axis(struct soap*, __ns5__union_Axis **, const char*, const char*);

#ifndef soap_read_PointerTo__ns5__union_Axis
#define soap_read_PointerTo__ns5__union_Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns5__union_Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__CrossProduct
#define SOAP_TYPE_PointerTons5__CrossProduct (293)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__CrossProduct(struct soap*, ns5__CrossProduct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__CrossProduct(struct soap*, const char *, int, ns5__CrossProduct *const*, const char *);
SOAP_FMAC3 ns5__CrossProduct ** SOAP_FMAC4 soap_in_PointerTons5__CrossProduct(struct soap*, const char*, ns5__CrossProduct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__CrossProduct(struct soap*, ns5__CrossProduct *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__CrossProduct
#define soap_write_PointerTons5__CrossProduct(soap, data) ( soap_serialize_PointerTons5__CrossProduct(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__CrossProduct(soap, data, "ns5:CrossProduct", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CrossProduct ** SOAP_FMAC4 soap_get_PointerTons5__CrossProduct(struct soap*, ns5__CrossProduct **, const char*, const char*);

#ifndef soap_read_PointerTons5__CrossProduct
#define soap_read_PointerTons5__CrossProduct(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__CrossProduct(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Tuples
#define SOAP_TYPE_PointerTons5__Tuples (292)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Tuples(struct soap*, ns5__Tuples *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Tuples(struct soap*, const char *, int, ns5__Tuples *const*, const char *);
SOAP_FMAC3 ns5__Tuples ** SOAP_FMAC4 soap_in_PointerTons5__Tuples(struct soap*, const char*, ns5__Tuples **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Tuples(struct soap*, ns5__Tuples *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Tuples
#define soap_write_PointerTons5__Tuples(soap, data) ( soap_serialize_PointerTons5__Tuples(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Tuples(soap, data, "ns5:Tuples", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Tuples ** SOAP_FMAC4 soap_get_PointerTons5__Tuples(struct soap*, ns5__Tuples **, const char*, const char*);

#ifndef soap_read_PointerTons5__Tuples
#define soap_read_PointerTons5__Tuples(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Tuples(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Axis
#define SOAP_TYPE_PointerTons5__Axis (289)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Axis(struct soap*, ns5__Axis *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Axis(struct soap*, const char *, int, ns5__Axis *const*, const char *);
SOAP_FMAC3 ns5__Axis ** SOAP_FMAC4 soap_in_PointerTons5__Axis(struct soap*, const char*, ns5__Axis **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Axis(struct soap*, ns5__Axis *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Axis
#define soap_write_PointerTons5__Axis(soap, data) ( soap_serialize_PointerTons5__Axis(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Axis(soap, data, "ns5:Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Axis ** SOAP_FMAC4 soap_get_PointerTons5__Axis(struct soap*, ns5__Axis **, const char*, const char*);

#ifndef soap_read_PointerTons5__Axis
#define soap_read_PointerTons5__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Cell
#define SOAP_TYPE_PointerTons5__Cell (287)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Cell(struct soap*, ns5__Cell *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Cell(struct soap*, const char *, int, ns5__Cell *const*, const char *);
SOAP_FMAC3 ns5__Cell ** SOAP_FMAC4 soap_in_PointerTons5__Cell(struct soap*, const char*, ns5__Cell **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Cell(struct soap*, ns5__Cell *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Cell
#define soap_write_PointerTons5__Cell(soap, data) ( soap_serialize_PointerTons5__Cell(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Cell(soap, data, "ns5:Cell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Cell ** SOAP_FMAC4 soap_get_PointerTons5__Cell(struct soap*, ns5__Cell **, const char*, const char*);

#ifndef soap_read_PointerTons5__Cell
#define soap_read_PointerTons5__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Cell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns5__union_ResultXmlRoot
#define SOAP_TYPE_PointerTo__ns5__union_ResultXmlRoot (286)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns5__union_ResultXmlRoot(struct soap*, __ns5__union_ResultXmlRoot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns5__union_ResultXmlRoot(struct soap*, const char *, int, __ns5__union_ResultXmlRoot *const*, const char *);
SOAP_FMAC3 __ns5__union_ResultXmlRoot ** SOAP_FMAC4 soap_in_PointerTo__ns5__union_ResultXmlRoot(struct soap*, const char*, __ns5__union_ResultXmlRoot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns5__union_ResultXmlRoot(struct soap*, __ns5__union_ResultXmlRoot *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns5__union_ResultXmlRoot
#define soap_write_PointerTo__ns5__union_ResultXmlRoot(soap, data) ( soap_serialize_PointerTo__ns5__union_ResultXmlRoot(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns5__union_ResultXmlRoot(soap, data, "-ns5:union-ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns5__union_ResultXmlRoot ** SOAP_FMAC4 soap_get_PointerTo__ns5__union_ResultXmlRoot(struct soap*, __ns5__union_ResultXmlRoot **, const char*, const char*);

#ifndef soap_read_PointerTo__ns5__union_ResultXmlRoot
#define soap_read_PointerTo__ns5__union_ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns5__union_ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__OlapInfo
#define SOAP_TYPE_PointerTons5__OlapInfo (285)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__OlapInfo(struct soap*, ns5__OlapInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__OlapInfo(struct soap*, const char *, int, ns5__OlapInfo *const*, const char *);
SOAP_FMAC3 ns5__OlapInfo ** SOAP_FMAC4 soap_in_PointerTons5__OlapInfo(struct soap*, const char*, ns5__OlapInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__OlapInfo(struct soap*, ns5__OlapInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__OlapInfo
#define soap_write_PointerTons5__OlapInfo(soap, data) ( soap_serialize_PointerTons5__OlapInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__OlapInfo(soap, data, "ns5:OlapInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__OlapInfo ** SOAP_FMAC4 soap_get_PointerTons5__OlapInfo(struct soap*, ns5__OlapInfo **, const char*, const char*);

#ifndef soap_read_PointerTons5__OlapInfo
#define soap_read_PointerTons5__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Row
#define SOAP_TYPE_PointerTons5__Row (284)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Row(struct soap*, ns5__Row *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Row(struct soap*, const char *, int, ns5__Row *const*, const char *);
SOAP_FMAC3 ns5__Row ** SOAP_FMAC4 soap_in_PointerTons5__Row(struct soap*, const char*, ns5__Row **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Row(struct soap*, ns5__Row *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Row
#define soap_write_PointerTons5__Row(soap, data) ( soap_serialize_PointerTons5__Row(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Row(soap, data, "ns5:Row", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Row ** SOAP_FMAC4 soap_get_PointerTons5__Row(struct soap*, ns5__Row **, const char*, const char*);

#ifndef soap_read_PointerTons5__Row
#define soap_read_PointerTons5__Row(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Row(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__Axes
#define SOAP_TYPE_PointerTons5__Axes (283)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__Axes(struct soap*, ns5__Axes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__Axes(struct soap*, const char *, int, ns5__Axes *const*, const char *);
SOAP_FMAC3 ns5__Axes ** SOAP_FMAC4 soap_in_PointerTons5__Axes(struct soap*, const char*, ns5__Axes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__Axes(struct soap*, ns5__Axes *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__Axes
#define soap_write_PointerTons5__Axes(soap, data) ( soap_serialize_PointerTons5__Axes(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__Axes(soap, data, "ns5:Axes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__Axes ** SOAP_FMAC4 soap_get_PointerTons5__Axes(struct soap*, ns5__Axes **, const char*, const char*);

#ifndef soap_read_PointerTons5__Axes
#define soap_read_PointerTons5__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__Axes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__CellData
#define SOAP_TYPE_PointerTons5__CellData (282)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__CellData(struct soap*, ns5__CellData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__CellData(struct soap*, const char *, int, ns5__CellData *const*, const char *);
SOAP_FMAC3 ns5__CellData ** SOAP_FMAC4 soap_in_PointerTons5__CellData(struct soap*, const char*, ns5__CellData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__CellData(struct soap*, ns5__CellData *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__CellData
#define soap_write_PointerTons5__CellData(soap, data) ( soap_serialize_PointerTons5__CellData(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__CellData(soap, data, "ns5:CellData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__CellData ** SOAP_FMAC4 soap_get_PointerTons5__CellData(struct soap*, ns5__CellData **, const char*, const char*);

#ifndef soap_read_PointerTons5__CellData
#define soap_read_PointerTons5__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__CellData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__HierarchyInfo
#define SOAP_TYPE_PointerTons4__HierarchyInfo (279)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__HierarchyInfo(struct soap*, ns4__HierarchyInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__HierarchyInfo(struct soap*, const char *, int, ns4__HierarchyInfo *const*, const char *);
SOAP_FMAC3 ns4__HierarchyInfo ** SOAP_FMAC4 soap_in_PointerTons4__HierarchyInfo(struct soap*, const char*, ns4__HierarchyInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__HierarchyInfo(struct soap*, ns4__HierarchyInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__HierarchyInfo
#define soap_write_PointerTons4__HierarchyInfo(soap, data) ( soap_serialize_PointerTons4__HierarchyInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__HierarchyInfo(soap, data, "ns4:HierarchyInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__HierarchyInfo ** SOAP_FMAC4 soap_get_PointerTons4__HierarchyInfo(struct soap*, ns4__HierarchyInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__HierarchyInfo
#define soap_read_PointerTons4__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__AxisInfo
#define SOAP_TYPE_PointerTons4__AxisInfo (277)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__AxisInfo(struct soap*, ns4__AxisInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__AxisInfo(struct soap*, const char *, int, ns4__AxisInfo *const*, const char *);
SOAP_FMAC3 ns4__AxisInfo ** SOAP_FMAC4 soap_in_PointerTons4__AxisInfo(struct soap*, const char*, ns4__AxisInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__AxisInfo(struct soap*, ns4__AxisInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__AxisInfo
#define soap_write_PointerTons4__AxisInfo(soap, data) ( soap_serialize_PointerTons4__AxisInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__AxisInfo(soap, data, "ns4:AxisInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__AxisInfo ** SOAP_FMAC4 soap_get_PointerTons4__AxisInfo(struct soap*, ns4__AxisInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__AxisInfo
#define soap_read_PointerTons4__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Cube
#define SOAP_TYPE_PointerTons4__Cube (275)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Cube(struct soap*, ns4__Cube *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Cube(struct soap*, const char *, int, ns4__Cube *const*, const char *);
SOAP_FMAC3 ns4__Cube ** SOAP_FMAC4 soap_in_PointerTons4__Cube(struct soap*, const char*, ns4__Cube **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Cube(struct soap*, ns4__Cube *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Cube
#define soap_write_PointerTons4__Cube(soap, data) ( soap_serialize_PointerTons4__Cube(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Cube(soap, data, "ns4:Cube", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Cube ** SOAP_FMAC4 soap_get_PointerTons4__Cube(struct soap*, ns4__Cube **, const char*, const char*);

#ifndef soap_read_PointerTons4__Cube
#define soap_read_PointerTons4__Cube(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Cube(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__CellInfo
#define SOAP_TYPE_PointerTons4__CellInfo (274)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__CellInfo(struct soap*, ns4__CellInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__CellInfo(struct soap*, const char *, int, ns4__CellInfo *const*, const char *);
SOAP_FMAC3 ns4__CellInfo ** SOAP_FMAC4 soap_in_PointerTons4__CellInfo(struct soap*, const char*, ns4__CellInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__CellInfo(struct soap*, ns4__CellInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__CellInfo
#define soap_write_PointerTons4__CellInfo(soap, data) ( soap_serialize_PointerTons4__CellInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__CellInfo(soap, data, "ns4:CellInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CellInfo ** SOAP_FMAC4 soap_get_PointerTons4__CellInfo(struct soap*, ns4__CellInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__CellInfo
#define soap_read_PointerTons4__CellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__CellInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__AxesInfo
#define SOAP_TYPE_PointerTons4__AxesInfo (273)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__AxesInfo(struct soap*, ns4__AxesInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__AxesInfo(struct soap*, const char *, int, ns4__AxesInfo *const*, const char *);
SOAP_FMAC3 ns4__AxesInfo ** SOAP_FMAC4 soap_in_PointerTons4__AxesInfo(struct soap*, const char*, ns4__AxesInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__AxesInfo(struct soap*, ns4__AxesInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__AxesInfo
#define soap_write_PointerTons4__AxesInfo(soap, data) ( soap_serialize_PointerTons4__AxesInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__AxesInfo(soap, data, "ns4:AxesInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__AxesInfo ** SOAP_FMAC4 soap_get_PointerTons4__AxesInfo(struct soap*, ns4__AxesInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__AxesInfo
#define soap_read_PointerTons4__AxesInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__AxesInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__CubeInfo
#define SOAP_TYPE_PointerTons4__CubeInfo (272)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__CubeInfo(struct soap*, ns4__CubeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__CubeInfo(struct soap*, const char *, int, ns4__CubeInfo *const*, const char *);
SOAP_FMAC3 ns4__CubeInfo ** SOAP_FMAC4 soap_in_PointerTons4__CubeInfo(struct soap*, const char*, ns4__CubeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__CubeInfo(struct soap*, ns4__CubeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__CubeInfo
#define soap_write_PointerTons4__CubeInfo(soap, data) ( soap_serialize_PointerTons4__CubeInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__CubeInfo(soap, data, "ns4:CubeInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CubeInfo ** SOAP_FMAC4 soap_get_PointerTons4__CubeInfo(struct soap*, ns4__CubeInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__CubeInfo
#define soap_read_PointerTons4__CubeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__CubeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Members
#define SOAP_TYPE_PointerTons4__Members (270)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Members(struct soap*, ns4__Members *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Members(struct soap*, const char *, int, ns4__Members *const*, const char *);
SOAP_FMAC3 ns4__Members ** SOAP_FMAC4 soap_in_PointerTons4__Members(struct soap*, const char*, ns4__Members **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Members(struct soap*, ns4__Members *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Members
#define soap_write_PointerTons4__Members(soap, data) ( soap_serialize_PointerTons4__Members(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Members(soap, data, "ns4:Members", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Members ** SOAP_FMAC4 soap_get_PointerTons4__Members(struct soap*, ns4__Members **, const char*, const char*);

#ifndef soap_read_PointerTons4__Members
#define soap_read_PointerTons4__Members(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Members(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Member
#define SOAP_TYPE_PointerTons4__Member (268)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Member(struct soap*, ns4__Member *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Member(struct soap*, const char *, int, ns4__Member *const*, const char *);
SOAP_FMAC3 ns4__Member ** SOAP_FMAC4 soap_in_PointerTons4__Member(struct soap*, const char*, ns4__Member **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Member(struct soap*, ns4__Member *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Member
#define soap_write_PointerTons4__Member(soap, data) ( soap_serialize_PointerTons4__Member(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Member(soap, data, "ns4:Member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Member ** SOAP_FMAC4 soap_get_PointerTons4__Member(struct soap*, ns4__Member **, const char*, const char*);

#ifndef soap_read_PointerTons4__Member
#define soap_read_PointerTons4__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Member(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Tuple
#define SOAP_TYPE_PointerTons4__Tuple (266)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Tuple(struct soap*, ns4__Tuple *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Tuple(struct soap*, const char *, int, ns4__Tuple *const*, const char *);
SOAP_FMAC3 ns4__Tuple ** SOAP_FMAC4 soap_in_PointerTons4__Tuple(struct soap*, const char*, ns4__Tuple **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Tuple(struct soap*, ns4__Tuple *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Tuple
#define soap_write_PointerTons4__Tuple(soap, data) ( soap_serialize_PointerTons4__Tuple(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Tuple(soap, data, "ns4:Tuple", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Tuple ** SOAP_FMAC4 soap_get_PointerTons4__Tuple(struct soap*, ns4__Tuple **, const char*, const char*);

#ifndef soap_read_PointerTons4__Tuple
#define soap_read_PointerTons4__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns4__union_Axis
#define SOAP_TYPE_PointerTo__ns4__union_Axis (265)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns4__union_Axis(struct soap*, __ns4__union_Axis *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns4__union_Axis(struct soap*, const char *, int, __ns4__union_Axis *const*, const char *);
SOAP_FMAC3 __ns4__union_Axis ** SOAP_FMAC4 soap_in_PointerTo__ns4__union_Axis(struct soap*, const char*, __ns4__union_Axis **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns4__union_Axis(struct soap*, __ns4__union_Axis *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns4__union_Axis
#define soap_write_PointerTo__ns4__union_Axis(soap, data) ( soap_serialize_PointerTo__ns4__union_Axis(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns4__union_Axis(soap, data, "-ns4:union-Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns4__union_Axis ** SOAP_FMAC4 soap_get_PointerTo__ns4__union_Axis(struct soap*, __ns4__union_Axis **, const char*, const char*);

#ifndef soap_read_PointerTo__ns4__union_Axis
#define soap_read_PointerTo__ns4__union_Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns4__union_Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__CrossProduct
#define SOAP_TYPE_PointerTons4__CrossProduct (264)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__CrossProduct(struct soap*, ns4__CrossProduct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__CrossProduct(struct soap*, const char *, int, ns4__CrossProduct *const*, const char *);
SOAP_FMAC3 ns4__CrossProduct ** SOAP_FMAC4 soap_in_PointerTons4__CrossProduct(struct soap*, const char*, ns4__CrossProduct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__CrossProduct(struct soap*, ns4__CrossProduct *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__CrossProduct
#define soap_write_PointerTons4__CrossProduct(soap, data) ( soap_serialize_PointerTons4__CrossProduct(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__CrossProduct(soap, data, "ns4:CrossProduct", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CrossProduct ** SOAP_FMAC4 soap_get_PointerTons4__CrossProduct(struct soap*, ns4__CrossProduct **, const char*, const char*);

#ifndef soap_read_PointerTons4__CrossProduct
#define soap_read_PointerTons4__CrossProduct(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__CrossProduct(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Tuples
#define SOAP_TYPE_PointerTons4__Tuples (263)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Tuples(struct soap*, ns4__Tuples *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Tuples(struct soap*, const char *, int, ns4__Tuples *const*, const char *);
SOAP_FMAC3 ns4__Tuples ** SOAP_FMAC4 soap_in_PointerTons4__Tuples(struct soap*, const char*, ns4__Tuples **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Tuples(struct soap*, ns4__Tuples *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Tuples
#define soap_write_PointerTons4__Tuples(soap, data) ( soap_serialize_PointerTons4__Tuples(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Tuples(soap, data, "ns4:Tuples", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Tuples ** SOAP_FMAC4 soap_get_PointerTons4__Tuples(struct soap*, ns4__Tuples **, const char*, const char*);

#ifndef soap_read_PointerTons4__Tuples
#define soap_read_PointerTons4__Tuples(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Tuples(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Axis
#define SOAP_TYPE_PointerTons4__Axis (260)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Axis(struct soap*, ns4__Axis *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Axis(struct soap*, const char *, int, ns4__Axis *const*, const char *);
SOAP_FMAC3 ns4__Axis ** SOAP_FMAC4 soap_in_PointerTons4__Axis(struct soap*, const char*, ns4__Axis **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Axis(struct soap*, ns4__Axis *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Axis
#define soap_write_PointerTons4__Axis(soap, data) ( soap_serialize_PointerTons4__Axis(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Axis(soap, data, "ns4:Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Axis ** SOAP_FMAC4 soap_get_PointerTons4__Axis(struct soap*, ns4__Axis **, const char*, const char*);

#ifndef soap_read_PointerTons4__Axis
#define soap_read_PointerTons4__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Cell
#define SOAP_TYPE_PointerTons4__Cell (258)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Cell(struct soap*, ns4__Cell *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Cell(struct soap*, const char *, int, ns4__Cell *const*, const char *);
SOAP_FMAC3 ns4__Cell ** SOAP_FMAC4 soap_in_PointerTons4__Cell(struct soap*, const char*, ns4__Cell **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Cell(struct soap*, ns4__Cell *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Cell
#define soap_write_PointerTons4__Cell(soap, data) ( soap_serialize_PointerTons4__Cell(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Cell(soap, data, "ns4:Cell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Cell ** SOAP_FMAC4 soap_get_PointerTons4__Cell(struct soap*, ns4__Cell **, const char*, const char*);

#ifndef soap_read_PointerTons4__Cell
#define soap_read_PointerTons4__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Cell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns4__union_ResultXmlRoot
#define SOAP_TYPE_PointerTo__ns4__union_ResultXmlRoot (257)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns4__union_ResultXmlRoot(struct soap*, __ns4__union_ResultXmlRoot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns4__union_ResultXmlRoot(struct soap*, const char *, int, __ns4__union_ResultXmlRoot *const*, const char *);
SOAP_FMAC3 __ns4__union_ResultXmlRoot ** SOAP_FMAC4 soap_in_PointerTo__ns4__union_ResultXmlRoot(struct soap*, const char*, __ns4__union_ResultXmlRoot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns4__union_ResultXmlRoot(struct soap*, __ns4__union_ResultXmlRoot *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns4__union_ResultXmlRoot
#define soap_write_PointerTo__ns4__union_ResultXmlRoot(soap, data) ( soap_serialize_PointerTo__ns4__union_ResultXmlRoot(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns4__union_ResultXmlRoot(soap, data, "-ns4:union-ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns4__union_ResultXmlRoot ** SOAP_FMAC4 soap_get_PointerTo__ns4__union_ResultXmlRoot(struct soap*, __ns4__union_ResultXmlRoot **, const char*, const char*);

#ifndef soap_read_PointerTo__ns4__union_ResultXmlRoot
#define soap_read_PointerTo__ns4__union_ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns4__union_ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__OlapInfo
#define SOAP_TYPE_PointerTons4__OlapInfo (256)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__OlapInfo(struct soap*, ns4__OlapInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__OlapInfo(struct soap*, const char *, int, ns4__OlapInfo *const*, const char *);
SOAP_FMAC3 ns4__OlapInfo ** SOAP_FMAC4 soap_in_PointerTons4__OlapInfo(struct soap*, const char*, ns4__OlapInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__OlapInfo(struct soap*, ns4__OlapInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__OlapInfo
#define soap_write_PointerTons4__OlapInfo(soap, data) ( soap_serialize_PointerTons4__OlapInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__OlapInfo(soap, data, "ns4:OlapInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__OlapInfo ** SOAP_FMAC4 soap_get_PointerTons4__OlapInfo(struct soap*, ns4__OlapInfo **, const char*, const char*);

#ifndef soap_read_PointerTons4__OlapInfo
#define soap_read_PointerTons4__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Row
#define SOAP_TYPE_PointerTons4__Row (255)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Row(struct soap*, ns4__Row *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Row(struct soap*, const char *, int, ns4__Row *const*, const char *);
SOAP_FMAC3 ns4__Row ** SOAP_FMAC4 soap_in_PointerTons4__Row(struct soap*, const char*, ns4__Row **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Row(struct soap*, ns4__Row *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Row
#define soap_write_PointerTons4__Row(soap, data) ( soap_serialize_PointerTons4__Row(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Row(soap, data, "ns4:Row", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Row ** SOAP_FMAC4 soap_get_PointerTons4__Row(struct soap*, ns4__Row **, const char*, const char*);

#ifndef soap_read_PointerTons4__Row
#define soap_read_PointerTons4__Row(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Row(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__Axes
#define SOAP_TYPE_PointerTons4__Axes (254)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__Axes(struct soap*, ns4__Axes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__Axes(struct soap*, const char *, int, ns4__Axes *const*, const char *);
SOAP_FMAC3 ns4__Axes ** SOAP_FMAC4 soap_in_PointerTons4__Axes(struct soap*, const char*, ns4__Axes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__Axes(struct soap*, ns4__Axes *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__Axes
#define soap_write_PointerTons4__Axes(soap, data) ( soap_serialize_PointerTons4__Axes(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__Axes(soap, data, "ns4:Axes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__Axes ** SOAP_FMAC4 soap_get_PointerTons4__Axes(struct soap*, ns4__Axes **, const char*, const char*);

#ifndef soap_read_PointerTons4__Axes
#define soap_read_PointerTons4__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__Axes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__CellData
#define SOAP_TYPE_PointerTons4__CellData (253)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__CellData(struct soap*, ns4__CellData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__CellData(struct soap*, const char *, int, ns4__CellData *const*, const char *);
SOAP_FMAC3 ns4__CellData ** SOAP_FMAC4 soap_in_PointerTons4__CellData(struct soap*, const char*, ns4__CellData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__CellData(struct soap*, ns4__CellData *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__CellData
#define soap_write_PointerTons4__CellData(soap, data) ( soap_serialize_PointerTons4__CellData(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__CellData(soap, data, "ns4:CellData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__CellData ** SOAP_FMAC4 soap_get_PointerTons4__CellData(struct soap*, ns4__CellData **, const char*, const char*);

#ifndef soap_read_PointerTons4__CellData
#define soap_read_PointerTons4__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__CellData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__HierarchyInfo
#define SOAP_TYPE_PointerTons2__HierarchyInfo (250)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__HierarchyInfo(struct soap*, ns2__HierarchyInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__HierarchyInfo(struct soap*, const char *, int, ns2__HierarchyInfo *const*, const char *);
SOAP_FMAC3 ns2__HierarchyInfo ** SOAP_FMAC4 soap_in_PointerTons2__HierarchyInfo(struct soap*, const char*, ns2__HierarchyInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__HierarchyInfo(struct soap*, ns2__HierarchyInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__HierarchyInfo
#define soap_write_PointerTons2__HierarchyInfo(soap, data) ( soap_serialize_PointerTons2__HierarchyInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__HierarchyInfo(soap, data, "ns2:HierarchyInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__HierarchyInfo ** SOAP_FMAC4 soap_get_PointerTons2__HierarchyInfo(struct soap*, ns2__HierarchyInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__HierarchyInfo
#define soap_read_PointerTons2__HierarchyInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__HierarchyInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AxisInfo
#define SOAP_TYPE_PointerTons2__AxisInfo (248)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AxisInfo(struct soap*, ns2__AxisInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AxisInfo(struct soap*, const char *, int, ns2__AxisInfo *const*, const char *);
SOAP_FMAC3 ns2__AxisInfo ** SOAP_FMAC4 soap_in_PointerTons2__AxisInfo(struct soap*, const char*, ns2__AxisInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AxisInfo(struct soap*, ns2__AxisInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AxisInfo
#define soap_write_PointerTons2__AxisInfo(soap, data) ( soap_serialize_PointerTons2__AxisInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__AxisInfo(soap, data, "ns2:AxisInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__AxisInfo ** SOAP_FMAC4 soap_get_PointerTons2__AxisInfo(struct soap*, ns2__AxisInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__AxisInfo
#define soap_read_PointerTons2__AxisInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AxisInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Cube
#define SOAP_TYPE_PointerTons2__Cube (246)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Cube(struct soap*, ns2__Cube *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Cube(struct soap*, const char *, int, ns2__Cube *const*, const char *);
SOAP_FMAC3 ns2__Cube ** SOAP_FMAC4 soap_in_PointerTons2__Cube(struct soap*, const char*, ns2__Cube **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Cube(struct soap*, ns2__Cube *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Cube
#define soap_write_PointerTons2__Cube(soap, data) ( soap_serialize_PointerTons2__Cube(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Cube(soap, data, "ns2:Cube", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Cube ** SOAP_FMAC4 soap_get_PointerTons2__Cube(struct soap*, ns2__Cube **, const char*, const char*);

#ifndef soap_read_PointerTons2__Cube
#define soap_read_PointerTons2__Cube(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Cube(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CellInfo
#define SOAP_TYPE_PointerTons2__CellInfo (245)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CellInfo(struct soap*, ns2__CellInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CellInfo(struct soap*, const char *, int, ns2__CellInfo *const*, const char *);
SOAP_FMAC3 ns2__CellInfo ** SOAP_FMAC4 soap_in_PointerTons2__CellInfo(struct soap*, const char*, ns2__CellInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CellInfo(struct soap*, ns2__CellInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CellInfo
#define soap_write_PointerTons2__CellInfo(soap, data) ( soap_serialize_PointerTons2__CellInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__CellInfo(soap, data, "ns2:CellInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CellInfo ** SOAP_FMAC4 soap_get_PointerTons2__CellInfo(struct soap*, ns2__CellInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__CellInfo
#define soap_read_PointerTons2__CellInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CellInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__AxesInfo
#define SOAP_TYPE_PointerTons2__AxesInfo (244)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__AxesInfo(struct soap*, ns2__AxesInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__AxesInfo(struct soap*, const char *, int, ns2__AxesInfo *const*, const char *);
SOAP_FMAC3 ns2__AxesInfo ** SOAP_FMAC4 soap_in_PointerTons2__AxesInfo(struct soap*, const char*, ns2__AxesInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__AxesInfo(struct soap*, ns2__AxesInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__AxesInfo
#define soap_write_PointerTons2__AxesInfo(soap, data) ( soap_serialize_PointerTons2__AxesInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__AxesInfo(soap, data, "ns2:AxesInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__AxesInfo ** SOAP_FMAC4 soap_get_PointerTons2__AxesInfo(struct soap*, ns2__AxesInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__AxesInfo
#define soap_read_PointerTons2__AxesInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__AxesInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CubeInfo
#define SOAP_TYPE_PointerTons2__CubeInfo (243)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CubeInfo(struct soap*, ns2__CubeInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CubeInfo(struct soap*, const char *, int, ns2__CubeInfo *const*, const char *);
SOAP_FMAC3 ns2__CubeInfo ** SOAP_FMAC4 soap_in_PointerTons2__CubeInfo(struct soap*, const char*, ns2__CubeInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CubeInfo(struct soap*, ns2__CubeInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CubeInfo
#define soap_write_PointerTons2__CubeInfo(soap, data) ( soap_serialize_PointerTons2__CubeInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__CubeInfo(soap, data, "ns2:CubeInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CubeInfo ** SOAP_FMAC4 soap_get_PointerTons2__CubeInfo(struct soap*, ns2__CubeInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__CubeInfo
#define soap_read_PointerTons2__CubeInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CubeInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Members
#define SOAP_TYPE_PointerTons2__Members (241)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Members(struct soap*, ns2__Members *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Members(struct soap*, const char *, int, ns2__Members *const*, const char *);
SOAP_FMAC3 ns2__Members ** SOAP_FMAC4 soap_in_PointerTons2__Members(struct soap*, const char*, ns2__Members **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Members(struct soap*, ns2__Members *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Members
#define soap_write_PointerTons2__Members(soap, data) ( soap_serialize_PointerTons2__Members(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Members(soap, data, "ns2:Members", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Members ** SOAP_FMAC4 soap_get_PointerTons2__Members(struct soap*, ns2__Members **, const char*, const char*);

#ifndef soap_read_PointerTons2__Members
#define soap_read_PointerTons2__Members(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Members(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Member
#define SOAP_TYPE_PointerTons2__Member (239)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Member(struct soap*, ns2__Member *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Member(struct soap*, const char *, int, ns2__Member *const*, const char *);
SOAP_FMAC3 ns2__Member ** SOAP_FMAC4 soap_in_PointerTons2__Member(struct soap*, const char*, ns2__Member **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Member(struct soap*, ns2__Member *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Member
#define soap_write_PointerTons2__Member(soap, data) ( soap_serialize_PointerTons2__Member(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Member(soap, data, "ns2:Member", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Member ** SOAP_FMAC4 soap_get_PointerTons2__Member(struct soap*, ns2__Member **, const char*, const char*);

#ifndef soap_read_PointerTons2__Member
#define soap_read_PointerTons2__Member(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Member(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Tuple
#define SOAP_TYPE_PointerTons2__Tuple (237)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Tuple(struct soap*, ns2__Tuple *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Tuple(struct soap*, const char *, int, ns2__Tuple *const*, const char *);
SOAP_FMAC3 ns2__Tuple ** SOAP_FMAC4 soap_in_PointerTons2__Tuple(struct soap*, const char*, ns2__Tuple **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Tuple(struct soap*, ns2__Tuple *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Tuple
#define soap_write_PointerTons2__Tuple(soap, data) ( soap_serialize_PointerTons2__Tuple(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Tuple(soap, data, "ns2:Tuple", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Tuple ** SOAP_FMAC4 soap_get_PointerTons2__Tuple(struct soap*, ns2__Tuple **, const char*, const char*);

#ifndef soap_read_PointerTons2__Tuple
#define soap_read_PointerTons2__Tuple(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Tuple(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns2__union_Axis
#define SOAP_TYPE_PointerTo__ns2__union_Axis (236)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns2__union_Axis(struct soap*, __ns2__union_Axis *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns2__union_Axis(struct soap*, const char *, int, __ns2__union_Axis *const*, const char *);
SOAP_FMAC3 __ns2__union_Axis ** SOAP_FMAC4 soap_in_PointerTo__ns2__union_Axis(struct soap*, const char*, __ns2__union_Axis **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns2__union_Axis(struct soap*, __ns2__union_Axis *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns2__union_Axis
#define soap_write_PointerTo__ns2__union_Axis(soap, data) ( soap_serialize_PointerTo__ns2__union_Axis(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns2__union_Axis(soap, data, "-ns2:union-Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns2__union_Axis ** SOAP_FMAC4 soap_get_PointerTo__ns2__union_Axis(struct soap*, __ns2__union_Axis **, const char*, const char*);

#ifndef soap_read_PointerTo__ns2__union_Axis
#define soap_read_PointerTo__ns2__union_Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns2__union_Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CrossProduct
#define SOAP_TYPE_PointerTons2__CrossProduct (235)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CrossProduct(struct soap*, ns2__CrossProduct *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CrossProduct(struct soap*, const char *, int, ns2__CrossProduct *const*, const char *);
SOAP_FMAC3 ns2__CrossProduct ** SOAP_FMAC4 soap_in_PointerTons2__CrossProduct(struct soap*, const char*, ns2__CrossProduct **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CrossProduct(struct soap*, ns2__CrossProduct *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CrossProduct
#define soap_write_PointerTons2__CrossProduct(soap, data) ( soap_serialize_PointerTons2__CrossProduct(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__CrossProduct(soap, data, "ns2:CrossProduct", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CrossProduct ** SOAP_FMAC4 soap_get_PointerTons2__CrossProduct(struct soap*, ns2__CrossProduct **, const char*, const char*);

#ifndef soap_read_PointerTons2__CrossProduct
#define soap_read_PointerTons2__CrossProduct(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CrossProduct(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Tuples
#define SOAP_TYPE_PointerTons2__Tuples (234)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Tuples(struct soap*, ns2__Tuples *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Tuples(struct soap*, const char *, int, ns2__Tuples *const*, const char *);
SOAP_FMAC3 ns2__Tuples ** SOAP_FMAC4 soap_in_PointerTons2__Tuples(struct soap*, const char*, ns2__Tuples **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Tuples(struct soap*, ns2__Tuples *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Tuples
#define soap_write_PointerTons2__Tuples(soap, data) ( soap_serialize_PointerTons2__Tuples(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Tuples(soap, data, "ns2:Tuples", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Tuples ** SOAP_FMAC4 soap_get_PointerTons2__Tuples(struct soap*, ns2__Tuples **, const char*, const char*);

#ifndef soap_read_PointerTons2__Tuples
#define soap_read_PointerTons2__Tuples(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Tuples(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Axis
#define SOAP_TYPE_PointerTons2__Axis (231)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Axis(struct soap*, ns2__Axis *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Axis(struct soap*, const char *, int, ns2__Axis *const*, const char *);
SOAP_FMAC3 ns2__Axis ** SOAP_FMAC4 soap_in_PointerTons2__Axis(struct soap*, const char*, ns2__Axis **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Axis(struct soap*, ns2__Axis *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Axis
#define soap_write_PointerTons2__Axis(soap, data) ( soap_serialize_PointerTons2__Axis(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Axis(soap, data, "ns2:Axis", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Axis ** SOAP_FMAC4 soap_get_PointerTons2__Axis(struct soap*, ns2__Axis **, const char*, const char*);

#ifndef soap_read_PointerTons2__Axis
#define soap_read_PointerTons2__Axis(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Axis(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTodouble
#define SOAP_TYPE_PointerTodouble (230)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTodouble(struct soap*, double *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTodouble(struct soap*, const char *, int, double *const*, const char *);
SOAP_FMAC3 double ** SOAP_FMAC4 soap_in_PointerTodouble(struct soap*, const char*, double **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTodouble(struct soap*, double *const*, const char*, const char*);

#ifndef soap_write_PointerTodouble
#define soap_write_PointerTodouble(soap, data) ( soap_serialize_PointerTodouble(soap, data), soap_begin_send(soap) || soap_put_PointerTodouble(soap, data, "double", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 double ** SOAP_FMAC4 soap_get_PointerTodouble(struct soap*, double **, const char*, const char*);

#ifndef soap_read_PointerTodouble
#define soap_read_PointerTodouble(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTodouble(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Cell
#define SOAP_TYPE_PointerTons2__Cell (227)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Cell(struct soap*, ns2__Cell *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Cell(struct soap*, const char *, int, ns2__Cell *const*, const char *);
SOAP_FMAC3 ns2__Cell ** SOAP_FMAC4 soap_in_PointerTons2__Cell(struct soap*, const char*, ns2__Cell **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Cell(struct soap*, ns2__Cell *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Cell
#define soap_write_PointerTons2__Cell(soap, data) ( soap_serialize_PointerTons2__Cell(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Cell(soap, data, "ns2:Cell", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Cell ** SOAP_FMAC4 soap_get_PointerTons2__Cell(struct soap*, ns2__Cell **, const char*, const char*);

#ifndef soap_read_PointerTons2__Cell
#define soap_read_PointerTons2__Cell(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Cell(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTo__ns2__union_ResultXmlRoot
#define SOAP_TYPE_PointerTo__ns2__union_ResultXmlRoot (226)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo__ns2__union_ResultXmlRoot(struct soap*, __ns2__union_ResultXmlRoot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo__ns2__union_ResultXmlRoot(struct soap*, const char *, int, __ns2__union_ResultXmlRoot *const*, const char *);
SOAP_FMAC3 __ns2__union_ResultXmlRoot ** SOAP_FMAC4 soap_in_PointerTo__ns2__union_ResultXmlRoot(struct soap*, const char*, __ns2__union_ResultXmlRoot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo__ns2__union_ResultXmlRoot(struct soap*, __ns2__union_ResultXmlRoot *const*, const char*, const char*);

#ifndef soap_write_PointerTo__ns2__union_ResultXmlRoot
#define soap_write_PointerTo__ns2__union_ResultXmlRoot(soap, data) ( soap_serialize_PointerTo__ns2__union_ResultXmlRoot(soap, data), soap_begin_send(soap) || soap_put_PointerTo__ns2__union_ResultXmlRoot(soap, data, "-ns2:union-ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 __ns2__union_ResultXmlRoot ** SOAP_FMAC4 soap_get_PointerTo__ns2__union_ResultXmlRoot(struct soap*, __ns2__union_ResultXmlRoot **, const char*, const char*);

#ifndef soap_read_PointerTo__ns2__union_ResultXmlRoot
#define soap_read_PointerTo__ns2__union_ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTo__ns2__union_ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__OlapInfo
#define SOAP_TYPE_PointerTons2__OlapInfo (225)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__OlapInfo(struct soap*, ns2__OlapInfo *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__OlapInfo(struct soap*, const char *, int, ns2__OlapInfo *const*, const char *);
SOAP_FMAC3 ns2__OlapInfo ** SOAP_FMAC4 soap_in_PointerTons2__OlapInfo(struct soap*, const char*, ns2__OlapInfo **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__OlapInfo(struct soap*, ns2__OlapInfo *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__OlapInfo
#define soap_write_PointerTons2__OlapInfo(soap, data) ( soap_serialize_PointerTons2__OlapInfo(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__OlapInfo(soap, data, "ns2:OlapInfo", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__OlapInfo ** SOAP_FMAC4 soap_get_PointerTons2__OlapInfo(struct soap*, ns2__OlapInfo **, const char*, const char*);

#ifndef soap_read_PointerTons2__OlapInfo
#define soap_read_PointerTons2__OlapInfo(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__OlapInfo(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__Axes
#define SOAP_TYPE_PointerTons2__Axes (224)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__Axes(struct soap*, ns2__Axes *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__Axes(struct soap*, const char *, int, ns2__Axes *const*, const char *);
SOAP_FMAC3 ns2__Axes ** SOAP_FMAC4 soap_in_PointerTons2__Axes(struct soap*, const char*, ns2__Axes **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__Axes(struct soap*, ns2__Axes *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__Axes
#define soap_write_PointerTons2__Axes(soap, data) ( soap_serialize_PointerTons2__Axes(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__Axes(soap, data, "ns2:Axes", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__Axes ** SOAP_FMAC4 soap_get_PointerTons2__Axes(struct soap*, ns2__Axes **, const char*, const char*);

#ifndef soap_read_PointerTons2__Axes
#define soap_read_PointerTons2__Axes(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__Axes(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__CellData
#define SOAP_TYPE_PointerTons2__CellData (223)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__CellData(struct soap*, ns2__CellData *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__CellData(struct soap*, const char *, int, ns2__CellData *const*, const char *);
SOAP_FMAC3 ns2__CellData ** SOAP_FMAC4 soap_in_PointerTons2__CellData(struct soap*, const char*, ns2__CellData **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__CellData(struct soap*, ns2__CellData *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__CellData
#define soap_write_PointerTons2__CellData(soap, data) ( soap_serialize_PointerTons2__CellData(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__CellData(soap, data, "ns2:CellData", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__CellData ** SOAP_FMAC4 soap_get_PointerTons2__CellData(struct soap*, ns2__CellData **, const char*, const char*);

#ifndef soap_read_PointerTons2__CellData
#define soap_read_PointerTons2__CellData(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__CellData(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Restrictions
#define SOAP_TYPE_PointerTons1__Restrictions (221)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Restrictions(struct soap*, ns1__Restrictions *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Restrictions(struct soap*, const char *, int, ns1__Restrictions *const*, const char *);
SOAP_FMAC3 ns1__Restrictions ** SOAP_FMAC4 soap_in_PointerTons1__Restrictions(struct soap*, const char*, ns1__Restrictions **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Restrictions(struct soap*, ns1__Restrictions *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Restrictions
#define soap_write_PointerTons1__Restrictions(soap, data) ( soap_serialize_PointerTons1__Restrictions(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__Restrictions(soap, data, "ns1:Restrictions", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Restrictions ** SOAP_FMAC4 soap_get_PointerTons1__Restrictions(struct soap*, ns1__Restrictions **, const char*, const char*);

#ifndef soap_read_PointerTons1__Restrictions
#define soap_read_PointerTons1__Restrictions(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Restrictions(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__ResultSet
#define SOAP_TYPE_PointerTons1__ResultSet (220)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__ResultSet(struct soap*, ns1__ResultSet *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__ResultSet(struct soap*, const char *, int, ns1__ResultSet *const*, const char *);
SOAP_FMAC3 ns1__ResultSet ** SOAP_FMAC4 soap_in_PointerTons1__ResultSet(struct soap*, const char*, ns1__ResultSet **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__ResultSet(struct soap*, ns1__ResultSet *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__ResultSet
#define soap_write_PointerTons1__ResultSet(soap, data) ( soap_serialize_PointerTons1__ResultSet(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__ResultSet(soap, data, "ns1:ResultSet", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__ResultSet ** SOAP_FMAC4 soap_get_PointerTons1__ResultSet(struct soap*, ns1__ResultSet **, const char*, const char*);

#ifndef soap_read_PointerTons1__ResultSet
#define soap_read_PointerTons1__ResultSet(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__ResultSet(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Parameters
#define SOAP_TYPE_PointerTons1__Parameters (219)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Parameters(struct soap*, ns1__Parameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Parameters(struct soap*, const char *, int, ns1__Parameters *const*, const char *);
SOAP_FMAC3 ns1__Parameters ** SOAP_FMAC4 soap_in_PointerTons1__Parameters(struct soap*, const char*, ns1__Parameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Parameters(struct soap*, ns1__Parameters *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Parameters
#define soap_write_PointerTons1__Parameters(soap, data) ( soap_serialize_PointerTons1__Parameters(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__Parameters(soap, data, "ns1:Parameters", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Parameters ** SOAP_FMAC4 soap_get_PointerTons1__Parameters(struct soap*, ns1__Parameters **, const char*, const char*);

#ifndef soap_read_PointerTons1__Parameters
#define soap_read_PointerTons1__Parameters(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Parameters(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__Properties
#define SOAP_TYPE_PointerTons1__Properties (218)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__Properties(struct soap*, ns1__Properties *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__Properties(struct soap*, const char *, int, ns1__Properties *const*, const char *);
SOAP_FMAC3 ns1__Properties ** SOAP_FMAC4 soap_in_PointerTons1__Properties(struct soap*, const char*, ns1__Properties **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__Properties(struct soap*, ns1__Properties *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__Properties
#define soap_write_PointerTons1__Properties(soap, data) ( soap_serialize_PointerTons1__Properties(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__Properties(soap, data, "ns1:Properties", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__Properties ** SOAP_FMAC4 soap_get_PointerTons1__Properties(struct soap*, ns1__Properties **, const char*, const char*);

#ifndef soap_read_PointerTons1__Properties
#define soap_read_PointerTons1__Properties(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__Properties(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__CommandStatement
#define SOAP_TYPE_PointerTons1__CommandStatement (217)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__CommandStatement(struct soap*, ns1__CommandStatement *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__CommandStatement(struct soap*, const char *, int, ns1__CommandStatement *const*, const char *);
SOAP_FMAC3 ns1__CommandStatement ** SOAP_FMAC4 soap_in_PointerTons1__CommandStatement(struct soap*, const char*, ns1__CommandStatement **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__CommandStatement(struct soap*, ns1__CommandStatement *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__CommandStatement
#define soap_write_PointerTons1__CommandStatement(soap, data) ( soap_serialize_PointerTons1__CommandStatement(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__CommandStatement(soap, data, "ns1:CommandStatement", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__CommandStatement ** SOAP_FMAC4 soap_get_PointerTons1__CommandStatement(struct soap*, ns1__CommandStatement **, const char*, const char*);

#ifndef soap_read_PointerTons1__CommandStatement
#define soap_read_PointerTons1__CommandStatement(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__CommandStatement(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__RestrictionList
#define SOAP_TYPE_PointerTons1__RestrictionList (216)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__RestrictionList(struct soap*, ns1__RestrictionList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__RestrictionList(struct soap*, const char *, int, ns1__RestrictionList *const*, const char *);
SOAP_FMAC3 ns1__RestrictionList ** SOAP_FMAC4 soap_in_PointerTons1__RestrictionList(struct soap*, const char*, ns1__RestrictionList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__RestrictionList(struct soap*, ns1__RestrictionList *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__RestrictionList
#define soap_write_PointerTons1__RestrictionList(soap, data) ( soap_serialize_PointerTons1__RestrictionList(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__RestrictionList(soap, data, "ns1:RestrictionList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__RestrictionList ** SOAP_FMAC4 soap_get_PointerTons1__RestrictionList(struct soap*, ns1__RestrictionList **, const char*, const char*);

#ifndef soap_read_PointerTons1__RestrictionList
#define soap_read_PointerTons1__RestrictionList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__RestrictionList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons5__ResultXmlRoot
#define SOAP_TYPE_PointerTons5__ResultXmlRoot (215)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ResultXmlRoot(struct soap*, ns5__ResultXmlRoot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ResultXmlRoot(struct soap*, const char *, int, ns5__ResultXmlRoot *const*, const char *);
SOAP_FMAC3 ns5__ResultXmlRoot ** SOAP_FMAC4 soap_in_PointerTons5__ResultXmlRoot(struct soap*, const char*, ns5__ResultXmlRoot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ResultXmlRoot(struct soap*, ns5__ResultXmlRoot *const*, const char*, const char*);

#ifndef soap_write_PointerTons5__ResultXmlRoot
#define soap_write_PointerTons5__ResultXmlRoot(soap, data) ( soap_serialize_PointerTons5__ResultXmlRoot(soap, data), soap_begin_send(soap) || soap_put_PointerTons5__ResultXmlRoot(soap, data, "ns5:ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns5__ResultXmlRoot ** SOAP_FMAC4 soap_get_PointerTons5__ResultXmlRoot(struct soap*, ns5__ResultXmlRoot **, const char*, const char*);

#ifndef soap_read_PointerTons5__ResultXmlRoot
#define soap_read_PointerTons5__ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons5__ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons4__ResultXmlRoot
#define SOAP_TYPE_PointerTons4__ResultXmlRoot (214)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons4__ResultXmlRoot(struct soap*, ns4__ResultXmlRoot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons4__ResultXmlRoot(struct soap*, const char *, int, ns4__ResultXmlRoot *const*, const char *);
SOAP_FMAC3 ns4__ResultXmlRoot ** SOAP_FMAC4 soap_in_PointerTons4__ResultXmlRoot(struct soap*, const char*, ns4__ResultXmlRoot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons4__ResultXmlRoot(struct soap*, ns4__ResultXmlRoot *const*, const char*, const char*);

#ifndef soap_write_PointerTons4__ResultXmlRoot
#define soap_write_PointerTons4__ResultXmlRoot(soap, data) ( soap_serialize_PointerTons4__ResultXmlRoot(soap, data), soap_begin_send(soap) || soap_put_PointerTons4__ResultXmlRoot(soap, data, "ns4:ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns4__ResultXmlRoot ** SOAP_FMAC4 soap_get_PointerTons4__ResultXmlRoot(struct soap*, ns4__ResultXmlRoot **, const char*, const char*);

#ifndef soap_read_PointerTons4__ResultXmlRoot
#define soap_read_PointerTons4__ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons4__ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons2__ResultXmlRoot
#define SOAP_TYPE_PointerTons2__ResultXmlRoot (213)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons2__ResultXmlRoot(struct soap*, ns2__ResultXmlRoot *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons2__ResultXmlRoot(struct soap*, const char *, int, ns2__ResultXmlRoot *const*, const char *);
SOAP_FMAC3 ns2__ResultXmlRoot ** SOAP_FMAC4 soap_in_PointerTons2__ResultXmlRoot(struct soap*, const char*, ns2__ResultXmlRoot **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons2__ResultXmlRoot(struct soap*, ns2__ResultXmlRoot *const*, const char*, const char*);

#ifndef soap_write_PointerTons2__ResultXmlRoot
#define soap_write_PointerTons2__ResultXmlRoot(soap, data) ( soap_serialize_PointerTons2__ResultXmlRoot(soap, data), soap_begin_send(soap) || soap_put_PointerTons2__ResultXmlRoot(soap, data, "ns2:ResultXmlRoot", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns2__ResultXmlRoot ** SOAP_FMAC4 soap_get_PointerTons2__ResultXmlRoot(struct soap*, ns2__ResultXmlRoot **, const char*, const char*);

#ifndef soap_read_PointerTons2__ResultXmlRoot
#define soap_read_PointerTons2__ResultXmlRoot(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons2__ResultXmlRoot(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTons1__PropertyList
#define SOAP_TYPE_PointerTons1__PropertyList (211)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons1__PropertyList(struct soap*, ns1__PropertyList *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons1__PropertyList(struct soap*, const char *, int, ns1__PropertyList *const*, const char *);
SOAP_FMAC3 ns1__PropertyList ** SOAP_FMAC4 soap_in_PointerTons1__PropertyList(struct soap*, const char*, ns1__PropertyList **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons1__PropertyList(struct soap*, ns1__PropertyList *const*, const char*, const char*);

#ifndef soap_write_PointerTons1__PropertyList
#define soap_write_PointerTons1__PropertyList(soap, data) ( soap_serialize_PointerTons1__PropertyList(soap, data), soap_begin_send(soap) || soap_put_PointerTons1__PropertyList(soap, data, "ns1:PropertyList", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 ns1__PropertyList ** SOAP_FMAC4 soap_get_PointerTons1__PropertyList(struct soap*, ns1__PropertyList **, const char*, const char*);

#ifndef soap_read_PointerTons1__PropertyList
#define soap_read_PointerTons1__PropertyList(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTons1__PropertyList(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (209)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_serialize_PointerTostd__string(soap, data), soap_begin_send(soap) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


/* _xsd__schema is a typedef element/attribute synonym for string */

#ifndef SOAP_TYPE__xsd__schema
#define SOAP_TYPE__xsd__schema (75)
#endif

#define soap_default__xsd__schema(soap, a) soap_default_string(soap, a)


#define soap_serialize__xsd__schema soap_serialize_string


#define soap_out__xsd__schema soap_out_string


#define soap_in__xsd__schema soap_in_string


#define soap_put__xsd__schema soap_put_string


#define soap_get__xsd__schema soap_get_string


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_serialize__QName(soap, data), soap_begin_send(soap) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_serialize_string(soap, data), soap_begin_send(soap) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), soap->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), soap->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__XmlSchemaSimpleType
#define SOAP_TYPE_std__vectorTemplateOfxsd__XmlSchemaSimpleType (394)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__XmlSchemaSimpleType(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__XmlSchemaSimpleType(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__XmlSchemaElement
#define SOAP_TYPE_std__vectorTemplateOfxsd__XmlSchemaElement (375)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__XmlSchemaElement(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__XmlSchemaElement(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfxsd__XmlSchemaXPath
#define SOAP_TYPE_std__vectorTemplateOfxsd__XmlSchemaXPath (368)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap*, std::vector<std::string >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap*, const std::vector<std::string >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap*, const char*, int, const std::vector<std::string >*, const char*);
SOAP_FMAC3 std::vector<std::string >* SOAP_FMAC4 soap_in_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap*, const char*, std::vector<std::string >*, const char*);
SOAP_FMAC1 std::vector<std::string > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<std::string > * soap_new_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfxsd__XmlSchemaXPath(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap *soap, std::vector<std::string >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfxsd__XmlSchemaXPath(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__HierarchyInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__HierarchyInfo (309)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap*, std::vector<ns5__HierarchyInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap*, const std::vector<ns5__HierarchyInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap*, const char*, int, const std::vector<ns5__HierarchyInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__HierarchyInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap*, const char*, std::vector<ns5__HierarchyInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__HierarchyInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__HierarchyInfo * > * soap_new_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__HierarchyInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap *soap, std::vector<ns5__HierarchyInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__HierarchyInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__AxisInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__AxisInfo (307)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap*, std::vector<ns5__AxisInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap*, const std::vector<ns5__AxisInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap*, const char*, int, const std::vector<ns5__AxisInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns5__AxisInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap*, const char*, std::vector<ns5__AxisInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns5__AxisInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__AxisInfo * > * soap_new_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__AxisInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap *soap, std::vector<ns5__AxisInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__AxisInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__Cube
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__Cube (305)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Cube(struct soap*, std::vector<ns5__Cube * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Cube(struct soap*, const std::vector<ns5__Cube * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Cube(struct soap*, const char*, int, const std::vector<ns5__Cube * >*, const char*);
SOAP_FMAC3 std::vector<ns5__Cube * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Cube(struct soap*, const char*, std::vector<ns5__Cube * >*, const char*);
SOAP_FMAC1 std::vector<ns5__Cube * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Cube(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__Cube * > * soap_new_std__vectorTemplateOfPointerTons5__Cube(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__Cube(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__Cube(struct soap *soap, std::vector<ns5__Cube * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Cube(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__Members
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__Members (300)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Members(struct soap*, std::vector<ns5__Members * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Members(struct soap*, const std::vector<ns5__Members * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Members(struct soap*, const char*, int, const std::vector<ns5__Members * >*, const char*);
SOAP_FMAC3 std::vector<ns5__Members * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Members(struct soap*, const char*, std::vector<ns5__Members * >*, const char*);
SOAP_FMAC1 std::vector<ns5__Members * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Members(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__Members * > * soap_new_std__vectorTemplateOfPointerTons5__Members(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__Members(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__Members(struct soap *soap, std::vector<ns5__Members * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Members(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__Member
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__Member (298)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Member(struct soap*, std::vector<ns5__Member * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Member(struct soap*, const std::vector<ns5__Member * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Member(struct soap*, const char*, int, const std::vector<ns5__Member * >*, const char*);
SOAP_FMAC3 std::vector<ns5__Member * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Member(struct soap*, const char*, std::vector<ns5__Member * >*, const char*);
SOAP_FMAC1 std::vector<ns5__Member * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Member(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__Member * > * soap_new_std__vectorTemplateOfPointerTons5__Member(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__Member(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__Member(struct soap *soap, std::vector<ns5__Member * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__Tuple
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__Tuple (296)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Tuple(struct soap*, std::vector<ns5__Tuple * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Tuple(struct soap*, const std::vector<ns5__Tuple * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Tuple(struct soap*, const char*, int, const std::vector<ns5__Tuple * >*, const char*);
SOAP_FMAC3 std::vector<ns5__Tuple * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Tuple(struct soap*, const char*, std::vector<ns5__Tuple * >*, const char*);
SOAP_FMAC1 std::vector<ns5__Tuple * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Tuple(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__Tuple * > * soap_new_std__vectorTemplateOfPointerTons5__Tuple(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__Tuple(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__Tuple(struct soap *soap, std::vector<ns5__Tuple * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Tuple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__Axis
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__Axis (290)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Axis(struct soap*, std::vector<ns5__Axis * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Axis(struct soap*, const std::vector<ns5__Axis * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Axis(struct soap*, const char*, int, const std::vector<ns5__Axis * >*, const char*);
SOAP_FMAC3 std::vector<ns5__Axis * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Axis(struct soap*, const char*, std::vector<ns5__Axis * >*, const char*);
SOAP_FMAC1 std::vector<ns5__Axis * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Axis(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__Axis * > * soap_new_std__vectorTemplateOfPointerTons5__Axis(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__Axis(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__Axis(struct soap *soap, std::vector<ns5__Axis * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons5__Cell
#define SOAP_TYPE_std__vectorTemplateOfPointerTons5__Cell (288)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons5__Cell(struct soap*, std::vector<ns5__Cell * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons5__Cell(struct soap*, const std::vector<ns5__Cell * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons5__Cell(struct soap*, const char*, int, const std::vector<ns5__Cell * >*, const char*);
SOAP_FMAC3 std::vector<ns5__Cell * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons5__Cell(struct soap*, const char*, std::vector<ns5__Cell * >*, const char*);
SOAP_FMAC1 std::vector<ns5__Cell * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons5__Cell(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns5__Cell * > * soap_new_std__vectorTemplateOfPointerTons5__Cell(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons5__Cell(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons5__Cell(struct soap *soap, std::vector<ns5__Cell * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons5__Cell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__HierarchyInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__HierarchyInfo (280)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap*, std::vector<ns4__HierarchyInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap*, const std::vector<ns4__HierarchyInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap*, const char*, int, const std::vector<ns4__HierarchyInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__HierarchyInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap*, const char*, std::vector<ns4__HierarchyInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__HierarchyInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__HierarchyInfo * > * soap_new_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__HierarchyInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap *soap, std::vector<ns4__HierarchyInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__HierarchyInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__AxisInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__AxisInfo (278)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap*, std::vector<ns4__AxisInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap*, const std::vector<ns4__AxisInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap*, const char*, int, const std::vector<ns4__AxisInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns4__AxisInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap*, const char*, std::vector<ns4__AxisInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns4__AxisInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__AxisInfo * > * soap_new_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__AxisInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap *soap, std::vector<ns4__AxisInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__AxisInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Cube
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Cube (276)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Cube(struct soap*, std::vector<ns4__Cube * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Cube(struct soap*, const std::vector<ns4__Cube * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Cube(struct soap*, const char*, int, const std::vector<ns4__Cube * >*, const char*);
SOAP_FMAC3 std::vector<ns4__Cube * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Cube(struct soap*, const char*, std::vector<ns4__Cube * >*, const char*);
SOAP_FMAC1 std::vector<ns4__Cube * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Cube(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Cube * > * soap_new_std__vectorTemplateOfPointerTons4__Cube(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__Cube(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__Cube(struct soap *soap, std::vector<ns4__Cube * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__Cube(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Members
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Members (271)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Members(struct soap*, std::vector<ns4__Members * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Members(struct soap*, const std::vector<ns4__Members * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Members(struct soap*, const char*, int, const std::vector<ns4__Members * >*, const char*);
SOAP_FMAC3 std::vector<ns4__Members * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Members(struct soap*, const char*, std::vector<ns4__Members * >*, const char*);
SOAP_FMAC1 std::vector<ns4__Members * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Members(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Members * > * soap_new_std__vectorTemplateOfPointerTons4__Members(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__Members(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__Members(struct soap *soap, std::vector<ns4__Members * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__Members(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Member
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Member (269)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Member(struct soap*, std::vector<ns4__Member * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Member(struct soap*, const std::vector<ns4__Member * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Member(struct soap*, const char*, int, const std::vector<ns4__Member * >*, const char*);
SOAP_FMAC3 std::vector<ns4__Member * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Member(struct soap*, const char*, std::vector<ns4__Member * >*, const char*);
SOAP_FMAC1 std::vector<ns4__Member * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Member(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Member * > * soap_new_std__vectorTemplateOfPointerTons4__Member(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__Member(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__Member(struct soap *soap, std::vector<ns4__Member * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__Member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Tuple
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Tuple (267)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Tuple(struct soap*, std::vector<ns4__Tuple * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Tuple(struct soap*, const std::vector<ns4__Tuple * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Tuple(struct soap*, const char*, int, const std::vector<ns4__Tuple * >*, const char*);
SOAP_FMAC3 std::vector<ns4__Tuple * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Tuple(struct soap*, const char*, std::vector<ns4__Tuple * >*, const char*);
SOAP_FMAC1 std::vector<ns4__Tuple * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Tuple(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Tuple * > * soap_new_std__vectorTemplateOfPointerTons4__Tuple(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__Tuple(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__Tuple(struct soap *soap, std::vector<ns4__Tuple * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__Tuple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Axis
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Axis (261)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Axis(struct soap*, std::vector<ns4__Axis * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Axis(struct soap*, const std::vector<ns4__Axis * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Axis(struct soap*, const char*, int, const std::vector<ns4__Axis * >*, const char*);
SOAP_FMAC3 std::vector<ns4__Axis * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Axis(struct soap*, const char*, std::vector<ns4__Axis * >*, const char*);
SOAP_FMAC1 std::vector<ns4__Axis * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Axis(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Axis * > * soap_new_std__vectorTemplateOfPointerTons4__Axis(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__Axis(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__Axis(struct soap *soap, std::vector<ns4__Axis * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons4__Cell
#define SOAP_TYPE_std__vectorTemplateOfPointerTons4__Cell (259)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons4__Cell(struct soap*, std::vector<ns4__Cell * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons4__Cell(struct soap*, const std::vector<ns4__Cell * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons4__Cell(struct soap*, const char*, int, const std::vector<ns4__Cell * >*, const char*);
SOAP_FMAC3 std::vector<ns4__Cell * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons4__Cell(struct soap*, const char*, std::vector<ns4__Cell * >*, const char*);
SOAP_FMAC1 std::vector<ns4__Cell * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons4__Cell(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns4__Cell * > * soap_new_std__vectorTemplateOfPointerTons4__Cell(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons4__Cell(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons4__Cell(struct soap *soap, std::vector<ns4__Cell * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons4__Cell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__HierarchyInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__HierarchyInfo (251)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap*, std::vector<ns2__HierarchyInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap*, const std::vector<ns2__HierarchyInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap*, const char*, int, const std::vector<ns2__HierarchyInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns2__HierarchyInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap*, const char*, std::vector<ns2__HierarchyInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns2__HierarchyInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__HierarchyInfo * > * soap_new_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__HierarchyInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap *soap, std::vector<ns2__HierarchyInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__HierarchyInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__AxisInfo
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__AxisInfo (249)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap*, std::vector<ns2__AxisInfo * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap*, const std::vector<ns2__AxisInfo * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap*, const char*, int, const std::vector<ns2__AxisInfo * >*, const char*);
SOAP_FMAC3 std::vector<ns2__AxisInfo * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap*, const char*, std::vector<ns2__AxisInfo * >*, const char*);
SOAP_FMAC1 std::vector<ns2__AxisInfo * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__AxisInfo * > * soap_new_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__AxisInfo(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap *soap, std::vector<ns2__AxisInfo * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__AxisInfo(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Cube
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Cube (247)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Cube(struct soap*, std::vector<ns2__Cube * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Cube(struct soap*, const std::vector<ns2__Cube * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Cube(struct soap*, const char*, int, const std::vector<ns2__Cube * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Cube * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Cube(struct soap*, const char*, std::vector<ns2__Cube * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Cube * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Cube(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Cube * > * soap_new_std__vectorTemplateOfPointerTons2__Cube(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Cube(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Cube(struct soap *soap, std::vector<ns2__Cube * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Cube(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Members
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Members (242)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Members(struct soap*, std::vector<ns2__Members * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Members(struct soap*, const std::vector<ns2__Members * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Members(struct soap*, const char*, int, const std::vector<ns2__Members * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Members * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Members(struct soap*, const char*, std::vector<ns2__Members * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Members * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Members(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Members * > * soap_new_std__vectorTemplateOfPointerTons2__Members(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Members(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Members(struct soap *soap, std::vector<ns2__Members * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Members(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Member
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Member (240)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Member(struct soap*, std::vector<ns2__Member * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Member(struct soap*, const std::vector<ns2__Member * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Member(struct soap*, const char*, int, const std::vector<ns2__Member * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Member * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Member(struct soap*, const char*, std::vector<ns2__Member * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Member * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Member(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Member * > * soap_new_std__vectorTemplateOfPointerTons2__Member(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Member(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Member(struct soap *soap, std::vector<ns2__Member * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Member(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Tuple
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Tuple (238)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Tuple(struct soap*, std::vector<ns2__Tuple * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Tuple(struct soap*, const std::vector<ns2__Tuple * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Tuple(struct soap*, const char*, int, const std::vector<ns2__Tuple * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Tuple * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Tuple(struct soap*, const char*, std::vector<ns2__Tuple * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Tuple * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Tuple(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Tuple * > * soap_new_std__vectorTemplateOfPointerTons2__Tuple(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Tuple(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Tuple(struct soap *soap, std::vector<ns2__Tuple * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Tuple(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Axis
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Axis (232)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Axis(struct soap*, std::vector<ns2__Axis * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Axis(struct soap*, const std::vector<ns2__Axis * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Axis(struct soap*, const char*, int, const std::vector<ns2__Axis * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Axis * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Axis(struct soap*, const char*, std::vector<ns2__Axis * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Axis * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Axis(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Axis * > * soap_new_std__vectorTemplateOfPointerTons2__Axis(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Axis(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Axis(struct soap *soap, std::vector<ns2__Axis * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Axis(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOfPointerTons2__Cell
#define SOAP_TYPE_std__vectorTemplateOfPointerTons2__Cell (228)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOfPointerTons2__Cell(struct soap*, std::vector<ns2__Cell * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOfPointerTons2__Cell(struct soap*, const std::vector<ns2__Cell * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOfPointerTons2__Cell(struct soap*, const char*, int, const std::vector<ns2__Cell * >*, const char*);
SOAP_FMAC3 std::vector<ns2__Cell * >* SOAP_FMAC4 soap_in_std__vectorTemplateOfPointerTons2__Cell(struct soap*, const char*, std::vector<ns2__Cell * >*, const char*);
SOAP_FMAC1 std::vector<ns2__Cell * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOfPointerTons2__Cell(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<ns2__Cell * > * soap_new_std__vectorTemplateOfPointerTons2__Cell(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOfPointerTons2__Cell(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOfPointerTons2__Cell(struct soap *soap, std::vector<ns2__Cell * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOfPointerTons2__Cell(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_XML
#define SOAP_TYPE_std__vectorTemplateOf_XML (212)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_XML(struct soap*, std::vector<char * >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_XML(struct soap*, const std::vector<char * >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_XML(struct soap*, const char*, int, const std::vector<char * >*, const char*);
SOAP_FMAC3 std::vector<char * >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_XML(struct soap*, const char*, std::vector<char * >*, const char*);
SOAP_FMAC1 std::vector<char * > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_XML(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<char * > * soap_new_std__vectorTemplateOf_XML(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_XML(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_XML(struct soap *soap, std::vector<char * >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_XML(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
